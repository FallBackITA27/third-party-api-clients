//! The data types sent to and returned from the API client.
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

/**
 * Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PayMode {
    #[serde(rename = "master")]
    Master,
    #[serde(rename = "sub")]
    Sub,
    FallthroughString(String),
}

impl std::fmt::Display for PayMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            PayMode::Master => "master",
            PayMode::Sub => "sub",
            PayMode::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for PayMode {
    fn default() -> PayMode {
        PayMode::Master
    }
}

/// Account options object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Options {
    /**
     * Account options object.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub billing_auto_renew: bool,
    /**
     * Account options object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub meeting_connector_list: Vec<String>,
    /**
     * Account options object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pay_mode: Option<PayMode>,
    /**
     * Account options object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub room_connector_list: Vec<String>,
    /**
     * Account options object.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub share_mc: bool,
    /**
     * Account options object.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub share_rc: bool,
}

/// The account object represents an account on Zoom. The account owner is the user who created the account or had an account created for them. You can read more about the Zoom account structure <a href='https://medium.com/zoom-developer-blog/a-brief-look-at-zoom-account-structures-1d19c745bf8a' target='_blank'>here</a>.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Account {
    /**
     * User's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User's first name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * User's last name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * The account object represents an account on Zoom. The account owner is the user who created the account or had an account created for them. You can read more about the Zoom account structure <a href='https://medium.com/zoom-developer-blog/a-brief-look-at-zoom-account-structures-1d19c745bf8a' target='_blank'>here</a>.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Options>,
    /**
     * User's password.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * The account object represents an account on Zoom. The account owner is the user who created the account or had an account created for them. You can read more about the Zoom account structure <a href='https://medium.com/zoom-developer-blog/a-brief-look-at-zoom-account-structures-1d19c745bf8a' target='_blank'>here</a>.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub vanity_url: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Accounts {
    /**
     * Account name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_name: String,
    /**
     * Account Number of the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_number: String,
    /**
     * Account type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_type: String,
    /**
     * Account creation date and time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Account ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Account owner email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub owner_email: String,
    /**
     * Account seats.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub seats: i64,
    /**
     * Account subscription end date and time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub subscription_end_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Account subscription start date and time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub subscription_start_time: Option<chrono::DateTime<chrono::Utc>>,
}

/// Account object in the account list.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountListItem {
    /**
     * Account object in the account list.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub accounts: Vec<Accounts>,
}

/// List of Accounts.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountList {}

/// Account plan object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlan {
    /**
     * Account plan object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Account plan object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Account base plan object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PlanBase {
    /**
     * Account base plan number of hosts. For a Pro Plan please select a value between 1 and 9. For a Business Plan please select a value between 10 and 49. For a Education Plan please select a value between 20 and 149. For a Free Trial Plan please select a value between 1 and 9999.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Account base <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Account plan object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlanRequired {
    /**
     * Number of hosts for this plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Account <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type</a>.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PlanAudio {
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type</a>.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callout_countries: String,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type</a>.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub ddi_numbers: i64,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type</a>.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub premium_countries: String,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type</a>.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tollfree_countries: String,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type</a>.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Additional phone base plans.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlansPhonePlanBase {
    /**
     * Additional phone base plans.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callout_countries: String,
    /**
     * Additional phone base plans.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PlanCalling {
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Additional phone calling <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#additional-zoom-phone-plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PlanNumber {
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Additional phone number <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#additional-zoom-phone-plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Phone Plan Object
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhonePlan {
    /**
     * Phone Plan Object
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_base: Option<AccountPlansPhonePlanBase>,
    /**
     * Phone Plan Object
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_calling: Vec<PlanCalling>,
    /**
     * Phone Plan Object
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_number: Vec<PlanNumber>,
}

/// Account Plans object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlans {
    /**
     * Account Plans object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_audio: Option<PlanAudio>,
    /**
     * Account base plan object.
     */
    #[serde()]
    pub plan_base: PlanBase,
    /**
     * Account Plans object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_large_meeting: Vec<AccountPlan>,
    /**
     * Account Plans object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_phone: Option<PhonePlan>,
    /**
     * Account Plans object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub plan_recording: String,
    /**
     * Account Plans object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_room_connector: Option<AccountPlan>,
    /**
     * Account Plans object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_webinar: Vec<AccountPlan>,
    /**
     * Account Plans object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_zoom_rooms: Option<AccountPlan>,
}

/**
 * Determine how participants can join the audio portion of the meeting.<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - 3rd party audio conference.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AudioType {
    #[serde(rename = "both")]
    Both,
    #[serde(rename = "telephony")]
    Telephony,
    #[serde(rename = "thirdParty")]
    ThirdParty,
    #[serde(rename = "voip")]
    Voip,
    FallthroughString(String),
}

impl std::fmt::Display for AudioType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AudioType::Both => "both",
            AudioType::Telephony => "telephony",
            AudioType::ThirdParty => "thirdParty",
            AudioType::Voip => "voip",
            AudioType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AudioType {
    fn default() -> AudioType {
        AudioType::Both
    }
}

/**
 * Require a password for a meeting held using Personal Meeting ID (PMI) This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RequirePasswordPmiMeetings {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "jbh_only")]
    JbhOnly,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RequirePasswordPmiMeetings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RequirePasswordPmiMeetings::All => "all",
            RequirePasswordPmiMeetings::JbhOnly => "jbh_only",
            RequirePasswordPmiMeetings::None => "none",
            RequirePasswordPmiMeetings::Noop => "",
            RequirePasswordPmiMeetings::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RequirePasswordPmiMeetings {
    fn default() -> RequirePasswordPmiMeetings {
        RequirePasswordPmiMeetings::Noop
    }
}
impl RequirePasswordPmiMeetings {
    pub fn is_noop(&self) -> bool {
        matches!(self, RequirePasswordPmiMeetings::Noop)
    }
}

/// Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingPasswordRequirement {
    /**
     * Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub consecutive_characters_length: i64,
    /**
     * Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_letter: bool,
    /**
     * Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_number: bool,
    /**
     * Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_special_character: bool,
    /**
     * Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_upper_and_lower_characters: bool,
    /**
     * Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub length: i64,
    /**
     * Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub only_allow_numeric: bool,
    /**
     * Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub weak_enhance_detection: bool,
}

/// Account Settings: Schedule Meeting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ScheduleMeeting {
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio_type: Option<AudioType>,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enforce_login: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enforce_login_domains: String,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enforce_login_with_domains: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub force_pmi_jbh_password: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub jbh_time: i64,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_before_host: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub meeting_password_requirement: Option<MeetingPasswordRequirement>,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub not_store_meeting_topic: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub participant_video: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub personal_meeting: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_instant_meetings: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_password_for_pmi_meetings: Option<RequirePasswordPmiMeetings>,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduled_meetings: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduling_new_meetings: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi_for_instant_meetings: bool,
    /**
     * Account Settings: Schedule Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi_for_scheduled_meetings: bool,
}

/**
 * Play sound when participants join or leave.<br>`host` - Heard by host only.<br>`all` - Heard by host and all attendees.<br>`none` - Disable.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum EntryExitChime {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "host")]
    Host,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for EntryExitChime {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            EntryExitChime::All => "all",
            EntryExitChime::Host => "host",
            EntryExitChime::None => "none",
            EntryExitChime::Noop => "",
            EntryExitChime::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for EntryExitChime {
    fn default() -> EntryExitChime {
        EntryExitChime::Noop
    }
}
impl EntryExitChime {
    pub fn is_noop(&self) -> bool {
        matches!(self, EntryExitChime::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Files {
    /**
     * Unique identifier of the file.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Indicates whether or not this file is the default virtual background file.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub is_default: bool,
    /**
     * File name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * File size.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub size: String,
    /**
     * File type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Settings to manage virtual background.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct VirtualBackgroundSettings {
    /**
     * Settings to manage virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_upload_custom: bool,
    /**
     * Settings to manage virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_videos: bool,
    /**
     * Settings to manage virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Settings to manage virtual background.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub files: Vec<Files>,
}

/**
 * Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
 *   `host`: Only host can share the screen.<br>
 *   `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WhoCanShareScreen {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "host")]
    Host,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for WhoCanShareScreen {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            WhoCanShareScreen::All => "all",
            WhoCanShareScreen::Host => "host",
            WhoCanShareScreen::Noop => "",
            WhoCanShareScreen::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for WhoCanShareScreen {
    fn default() -> WhoCanShareScreen {
        WhoCanShareScreen::Noop
    }
}
impl WhoCanShareScreen {
    pub fn is_noop(&self) -> bool {
        matches!(self, WhoCanShareScreen::Noop)
    }
}

/**
 * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
 *   `host`: Only a host can share the screen when someone else is sharing.<br>
 *   `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WhoCanShareScreenWhenSomeoneSharing {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "host")]
    Host,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for WhoCanShareScreenWhenSomeoneSharing {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            WhoCanShareScreenWhenSomeoneSharing::All => "all",
            WhoCanShareScreenWhenSomeoneSharing::Host => "host",
            WhoCanShareScreenWhenSomeoneSharing::Noop => "",
            WhoCanShareScreenWhenSomeoneSharing::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for WhoCanShareScreenWhenSomeoneSharing {
    fn default() -> WhoCanShareScreenWhenSomeoneSharing {
        WhoCanShareScreenWhenSomeoneSharing::Noop
    }
}
impl WhoCanShareScreenWhenSomeoneSharing {
    pub fn is_noop(&self) -> bool {
        matches!(self, WhoCanShareScreenWhenSomeoneSharing::Noop)
    }
}

/// Account Settings: In Meeting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InMeeting {
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alert_guest_join: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_live_streaming: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_participants_to_rename: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_show_zoom_windows: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub annotation: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub anonymous_question_answer: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub attendee_on_hold: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_answer: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_saving_chat: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub breakout_room: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub chat: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub closed_caption: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub co_host: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub custom_data_center_regions: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub custom_live_streaming_service: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub custom_service_instructions: String,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub data_center_regions: Vec<String>,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub dscp_audio: i64,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub dscp_marking: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub dscp_video: i64,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub e_2e_encryption: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entry_exit_chime: Option<EntryExitChime>,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub far_end_camera_control: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub feedback: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub file_transfer: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub group_hd: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_from_desktop: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_from_mobile: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub meeting_reactions: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub original_audio: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub p_2p_connetion: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub p_2p_ports: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub polling: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ports_range: String,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub post_meeting_feedback: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub private_chat: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_play_own_voice: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_control: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub request_permission_to_unmute: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub screen_sharing: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub sending_default_email_invites: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_a_join_from_your_browser_link: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_meeting_control_toolbar: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub stereo_audio: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_html_format_email: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub virtual_background: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virtual_background_settings: Option<VirtualBackgroundSettings>,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub watermark: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub webinar_question_answer: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub whiteboard: bool,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub who_can_share_screen: Option<WhoCanShareScreen>,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub who_can_share_screen_when_someone_is_sharing: Option<WhoCanShareScreenWhenSomeoneSharing>,
    /**
     * Account Settings: In Meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub workplace_by_facebook: bool,
}

/// Account Settings: Notification.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct EmailNotification {
    /**
     * Account Settings: Notification.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alternative_host_reminder: bool,
    /**
     * Account Settings: Notification.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cancel_meeting_reminder: bool,
    /**
     * Account Settings: Notification.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_avaliable_reminder: bool,
    /**
     * Account Settings: Notification.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub jbh_reminder: bool,
    /**
     * Account Settings: Notification.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub low_host_count_reminder: bool,
    /**
     * Account Settings: Notification.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub schedule_for_reminder: bool,
}

/// Account Settings: Zoom Rooms.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ZoomRooms {
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_start_stop_scheduled_meetings: bool,
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cmr_for_instant_meeting: bool,
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub force_private_meeting: bool,
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub hide_host_information: bool,
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub list_meetings_with_calendar: bool,
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub start_airplay_manually: bool,
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub ultrasonic: bool,
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub upcoming_meeting_alert: bool,
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub weekly_system_restart: bool,
    /**
     * Account Settings: Zoom Rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub zr_post_meeting_feedback: bool,
}

/// This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PasswordRequirement {
    /**
     * This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub consecutive_characters_length: i64,
    /**
     * This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_special_character: bool,
    /**
     * This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub minimum_password_length: i64,
    /**
     * This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub weak_enhance_detection: bool,
}

/**
 * Settings for 2FA( [two factor authentication](https://support.zoom.us/hc/en-us/articles/360038247071) ). The value can be one of the following:
 *   `all`: Two factor authentication will be enabled for all users in the account.<br>
 *   `none`: Two factor authentication is disabled.<br>
 *   `group`: Two factor authentication will be enabled for users belonging to specific groups. If 2FA is enabled for certain groups, the group IDs of the group(s) will be provided in the `sign_in_with_two_factor_auth_groups` field.<br>
 *   `role`: Two factor authentication will be enabled only for users assigned with specific roles in the account. If 2FA is enabled for specific roles, the role IDs will be provided in the
 *   `sign_in_with_two_factor_auth_roles` field.
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum SignInWithTwoFactorAuth {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "role")]
    Role,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for SignInWithTwoFactorAuth {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            SignInWithTwoFactorAuth::All => "all",
            SignInWithTwoFactorAuth::Group => "group",
            SignInWithTwoFactorAuth::None => "none",
            SignInWithTwoFactorAuth::Role => "role",
            SignInWithTwoFactorAuth::Noop => "",
            SignInWithTwoFactorAuth::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for SignInWithTwoFactorAuth {
    fn default() -> SignInWithTwoFactorAuth {
        SignInWithTwoFactorAuth::Noop
    }
}
impl SignInWithTwoFactorAuth {
    pub fn is_noop(&self) -> bool {
        matches!(self, SignInWithTwoFactorAuth::Noop)
    }
}

/// [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Security {
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub admin_change_name_pic: bool,
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub hide_billing_info: bool,
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub import_photos_from_devices: bool,
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password_requirement: Option<PasswordRequirement>,
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub sign_again_period_for_inactivity_on_client: i64,
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub sign_again_period_for_inactivity_on_web: i64,
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sign_in_with_two_factor_auth: Option<SignInWithTwoFactorAuth>,
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sign_in_with_two_factor_auth_groups: Vec<String>,
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sign_in_with_two_factor_auth_roles: Vec<String>,
}

/**
 * Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AutoRecording {
    #[serde(rename = "cloud")]
    Cloud,
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AutoRecording {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AutoRecording::Cloud => "cloud",
            AutoRecording::Local => "local",
            AutoRecording::None => "none",
            AutoRecording::Noop => "",
            AutoRecording::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AutoRecording {
    fn default() -> AutoRecording {
        AutoRecording::Noop
    }
}
impl AutoRecording {
    pub fn is_noop(&self) -> bool {
        matches!(self, AutoRecording::Noop)
    }
}

/// This object represents the minimum password requirements set for recordings via Account Recording Settings.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingPasswordRequirement {
    /**
     * This object represents the minimum password requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_letter: bool,
    /**
     * This object represents the minimum password requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_number: bool,
    /**
     * This object represents the minimum password requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_special_character: bool,
    /**
     * This object represents the minimum password requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub length: i64,
    /**
     * This object represents the minimum password requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub only_allow_numeric: bool,
}

/// Setting to allow cloud recording access only from specific IP address ranges.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct IpAddressAccessControl {
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ip_addresses_or_ranges: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Settings {
    /**
     * Include in-meeting and/or in-webinar audio in the archive.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub audio_file: bool,
    /**
     * Include closed caption or transcript in the archive.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cc_transcript_file: bool,
    /**
     * Include in-meeting chat in the archive.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub chat_file: bool,
    /**
     * Include user email in in-meeting chat file.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub chat_with_sender_email: bool,
    /**
     * Include in-meeting and/or in-webinar video in the archive.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub video_file: bool,
}

/// [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted with archiving solution access by the Zoom support team.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Archive {
    /**
     * [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted with archiving solution access by the Zoom support team.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted with archiving solution access by the Zoom support team.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<Settings>,
    /**
     * [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted with archiving solution access by the Zoom support team.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// Account Settings: Recording.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Recording {
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub account_user_access_recording: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_recovery_deleted_cloud_recordings: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archive: Option<Archive>,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_delete_cmr: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub auto_delete_cmr_days: i64,
    /**
     * Account Settings: Recording.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_recording: Option<AutoRecording>,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_download: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_download_host: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_delete_cloud_recording: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_address_access_control: Option<IpAddressAccessControl>,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub local_recording: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub prevent_host_access_recording: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_audio_file: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_audio_file_each_participant: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_gallery_view: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_speaker_view: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_audio_transcript: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_disclaimer: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording_password_requirement: Option<RecordingPasswordRequirement>,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required_password_for_existing_cloud_recordings: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub save_chat_text: bool,
    /**
     * Account Settings: Recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_timestamp: bool,
}

/// Indicates where most of the participants call into or call from duriing a meeting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TelephonyRegions {
    /**
     * Indicates where most of the participants call into or call from duriing a meeting.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub allowed_values: Vec<String>,
    /**
     * Indicates where most of the participants call into or call from duriing a meeting.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub selection_values: Vec<String>,
}

/// Account Settings: Telephony.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Telephony {
    /**
     * Account Settings: Telephony.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_conference_info: String,
    /**
     * Account Settings: Telephony.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony_regions: Option<TelephonyRegions>,
    /**
     * Account Settings: Telephony.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub third_party_audio: bool,
}

/// Account Settings: Integration.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Integration {
    /**
     * Account Settings: Integration.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "box"
    )]
    pub box_: bool,
    /**
     * Account Settings: Integration.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub dropbox: bool,
    /**
     * Account Settings: Integration.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub google_calendar: bool,
    /**
     * Account Settings: Integration.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub google_drive: bool,
    /**
     * Account Settings: Integration.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub kubi: bool,
    /**
     * Account Settings: Integration.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub microsoft_one_drive: bool,
}

/// Account Settings: Feature.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Feature {
    /**
     * Account Settings: Feature.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub meeting_capacity: i64,
}

/// Account Settings: TSP.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Tsp {
    /**
     * Account Settings: TSP.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub call_out: bool,
    /**
     * Account Settings: TSP.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub call_out_countries: Vec<String>,
    /**
     * Account Settings: TSP.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub display_toll_free_numbers: bool,
    /**
     * Account Settings: TSP.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_international_numbers_link: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingStorageLocation {
    /**
     * Users can choose the country to store their recorded content. Content can include meeting, webinar, and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See [Managing the Communications Content storage location](https://support.zoom.us/hc/en-us/articles/360050781131) for details.
     *  
     *  Provide abbreviated country codes as the value for this field. See the [Countries abbreviation list](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) for details.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub allowed_values: Vec<String>,
    /**
     * Abbreviated country code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Profile {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording_storage_location: Option<RecordingStorageLocation>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountSettings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email_notification: Option<EmailNotification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature: Option<Feature>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_meeting: Option<InMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub integration: Option<Integration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<Profile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording: Option<Recording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule_meeting: Option<ScheduleMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security: Option<Security>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony: Option<Telephony>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp: Option<Tsp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zoom_rooms: Option<ZoomRooms>,
}

/// Indicates where most of the participants call into or call from duriing a meeting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateAccountSettingsTelephonyRegions {
    /**
     * Indicates where most of the participants call into or call from duriing a meeting.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub selection_values: Vec<String>,
}

/// Account Settings Update: Telephony.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateAccountSettingsTelephony {
    /**
     * Account Settings Update: Telephony.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_conference_info: String,
    /**
     * Account Settings Update: Telephony.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony_regions: Option<UpdateAccountSettingsTelephonyRegions>,
    /**
     * Account Settings Update: Telephony.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub third_party_audio: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateAccountSettings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email_notification: Option<EmailNotification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature: Option<Feature>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_meeting: Option<InMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub integration: Option<Integration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<Profile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording: Option<Recording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule_meeting: Option<ScheduleMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security: Option<Security>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony: Option<UpdateAccountSettingsTelephony>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp: Option<Tsp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zoom_rooms: Option<ZoomRooms>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Domains {}

/// List of managed domains.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DomainsList {
    /**
     * List of managed domains.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub domains: Vec<Domains>,
    /**
     * List of managed domains.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/// Billing Contact object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct BillingContact {
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub apt: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub state: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zip: String,
}

/// Billing Contact object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Contact {
    /**
     * Billing Contact's address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address: String,
    /**
     * Billing Contact object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub apt: String,
    /**
     * Billing Contact's city.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * Billing Contact's Country [ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) in abbreviated format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Billing Contact's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Billing Contact's first name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * Billing Contact's last name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * Billing Contact's phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * Billing Contact's state.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub state: String,
    /**
     * Billing Contact's zip/postal code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zip: String,
}

/// Custom Question.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CustomQuestion {
    /**
     * Custom Question.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
    /**
     * Custom Question.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// DateTime Object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DateTime {
    /**
     * DateTime Object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * DateTime Object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
}

/**
 * Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Protocol {
    #[serde(rename = "H.323")]
    H323,
    #[serde(rename = "SIP")]
    Sip,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Protocol {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Protocol::H323 => "H.323",
            Protocol::Sip => "SIP",
            Protocol::Noop => "",
            Protocol::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Protocol {
    fn default() -> Protocol {
        Protocol::Noop
    }
}
impl Protocol {
    pub fn is_noop(&self) -> bool {
        matches!(self, Protocol::Noop)
    }
}

/**
 * Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Encryption {
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "no")]
    No,
    #[serde(rename = "yes")]
    Yes,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Encryption {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Encryption::Auto => "auto",
            Encryption::No => "no",
            Encryption::Yes => "yes",
            Encryption::Noop => "",
            Encryption::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Encryption {
    fn default() -> Encryption {
        Encryption::Noop
    }
}
impl Encryption {
    pub fn is_noop(&self) -> bool {
        matches!(self, Encryption::Noop)
    }
}

/// The H.323/SIP device object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Device {
    /**
     * Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no.
     */
    #[serde(default, skip_serializing_if = "Encryption::is_noop")]
    pub encryption: Encryption,
    /**
     * Device IP.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ip: String,
    /**
     * Device name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP.
     */
    #[serde(default, skip_serializing_if = "Protocol::is_noop")]
    pub protocol: Protocol,
}

/// List of H.323/SIP Devices.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DeviceList {}

/// Group object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Group {
    /**
     * Group object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Group object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_members: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Groups {
    /**
     * Group ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// All of the following types:
///
/// - `Groups`
/// - `Group`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GroupsAllOf {
    /**
     * Group object.
     */
    Group(Group),
    Groups(Groups),
}

/// List of Groups.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupList {
    /**
     * List of Groups.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub groups: Vec<GroupsAllOf>,
    /**
     * List of Groups.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/// Group member object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupMember {
    /**
     * Group member object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Group member object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * Group member object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Group member object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * Group member object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// List of Group Members.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupMemberList {}

/// IM group object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImGroup {}

/// List of IM Groups.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImGroupList {}

/// Meeting object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Meeting {}

/// Meeting object
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingUpdate {}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TrackingFields {
    /**
     * Label of the tracking field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub field: String,
    /**
     * Value for the field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.
     *  
     *  `true`: Tracking field is visible. <br>
     *  
     *  `false`: Tracking field is not visible to the users in the meeting options in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub visible: bool,
}

/// Occurence object. This object is only returned for Recurring Webinars.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Occurrence {
    /**
     * Occurence object. This object is only returned for Recurring Webinars.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Occurence object. This object is only returned for Recurring Webinars.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub occurrence_id: String,
    /**
     * Occurence object. This object is only returned for Recurring Webinars.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Occurence object. This object is only returned for Recurring Webinars.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

/**
 * Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Audio {
    #[serde(rename = "both")]
    Both,
    #[serde(rename = "telephony")]
    Telephony,
    #[serde(rename = "voip")]
    Voip,
    FallthroughString(String),
}

impl std::fmt::Display for Audio {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Audio::Both => "both",
            Audio::Telephony => "telephony",
            Audio::Voip => "voip",
            Audio::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Audio {
    fn default() -> Audio {
        Audio::Both
    }
}

/**
 * Type of number.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Type {
    #[serde(rename = "toll")]
    Toll,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Type {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Type::Toll => "toll",
            Type::Tollfree => "tollfree",
            Type::Noop => "",
            Type::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Type {
    fn default() -> Type {
        Type::Noop
    }
}
impl Type {
    pub fn is_noop(&self) -> bool {
        matches!(self, Type::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GlobalDialInNumbers {
    /**
     * City of the number, if any. For example, Chicago.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * Country code. For example, BR.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Full name of country. For example, Brazil.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country_name: String,
    /**
     * Phone number. For example, +1 2332357613.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Type of number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<Type>,
}

/**
 * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
 *   `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
 *   
 *   `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum EncryptionType {
    #[serde(rename = "e2ee")]
    E2Ee,
    #[serde(rename = "enhanced_encryption")]
    EnhancedEncryption,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for EncryptionType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            EncryptionType::E2Ee => "e2ee",
            EncryptionType::EnhancedEncryption => "enhanced_encryption",
            EncryptionType::Noop => "",
            EncryptionType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for EncryptionType {
    fn default() -> EncryptionType {
        EncryptionType::Noop
    }
}
impl EncryptionType {
    pub fn is_noop(&self) -> bool {
        matches!(self, EncryptionType::Noop)
    }
}

/**
 * Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
 *   `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
 *   `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Method {
    #[serde(rename = "approve")]
    Approve,
    #[serde(rename = "deny")]
    Deny,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Method {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Method::Approve => "approve",
            Method::Deny => "deny",
            Method::Noop => "",
            Method::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Method {
    fn default() -> Method {
        Method::Noop
    }
}
impl Method {
    pub fn is_noop(&self) -> bool {
        matches!(self, Method::Noop)
    }
}

/// Approve or block users from specific regions/countries from joining this meeting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ApprovedDeniedCountriesRegions {
    /**
     * Approve or block users from specific regions/countries from joining this meeting.
     *
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub approved_list: Vec<String>,
    /**
     * Approve or block users from specific regions/countries from joining this meeting.
     *
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub denied_list: Vec<String>,
    /**
     * Approve or block users from specific regions/countries from joining this meeting.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Approve or block users from specific regions/countries from joining this meeting.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<Method>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AuthenticationException {
    /**
     * Email address of the participant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Name of the participant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Rooms {
    /**
     * Name of the breakout room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Email addresses of the participants who are to be assigned to the breakout room.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<String>,
}

/// Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct BreakoutRoom {
    /**
     * Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rooms: Vec<Rooms>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Interpreters {
    /**
     * Email address of the interpreter.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Languages for interpretation. The string must contain two [country Ids](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) separated by a comma.
     *  
     *  For example, if the language is to be interpreted from English to Chinese, the value of this field should be "US,CN".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub languages: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct LanguageInterpretation {
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Information associated with the interpreter.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub interpreters: Vec<Interpreters>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CustomKeys {
    /**
     * Custom key associated with the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub key: String,
    /**
     * Value of the custom key associated with the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// Meeting settings.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingSettings {
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_multiple_devices: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub alternative_hosts: String,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alternative_hosts_email_notification: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub approval_type: i64,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approved_or_denied_countries_or_regions: Option<ApprovedDeniedCountriesRegions>,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio: Option<Audio>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_domains: String,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub authentication_exception: Vec<AuthenticationException>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_name: String,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_option: String,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_recording: Option<AutoRecording>,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub breakout_room: Option<BreakoutRoom>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub close_registration: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cn_meeting: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub contact_email: String,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub contact_name: String,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_keys: Vec<CustomKeys>,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption_type: Option<EncryptionType>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enforce_login: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enforce_login_domains: String,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub global_dial_in_countries: Vec<String>,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub global_dial_in_numbers: Vec<GlobalDialInNumbers>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub in_meeting: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub jbh_time: i64,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_before_host: bool,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language_interpretation: Option<LanguageInterpretation>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub meeting_authentication: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub mute_upon_entry: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub participant_video: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_confirmation_email: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_email_notification: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registration_type: i64,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_share_button: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub waiting_room: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub watermark: bool,
}

/**
 * This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
 *   
 *    <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WeeklyDays {
    #[serde(rename = "1")]
    One,
    #[serde(rename = "2")]
    Two,
    #[serde(rename = "3")]
    Three,
    #[serde(rename = "4")]
    Four,
    #[serde(rename = "5")]
    Five,
    #[serde(rename = "6")]
    Six,
    #[serde(rename = "7")]
    Seven,
    FallthroughString(String),
}

impl std::fmt::Display for WeeklyDays {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            WeeklyDays::One => "1",
            WeeklyDays::Two => "2",
            WeeklyDays::Three => "3",
            WeeklyDays::Four => "4",
            WeeklyDays::Five => "5",
            WeeklyDays::Six => "6",
            WeeklyDays::Seven => "7",
            WeeklyDays::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for WeeklyDays {
    fn default() -> WeeklyDays {
        WeeklyDays::One
    }
}

/// Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Recurrence {
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub end_times: i64,
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub monthly_day: i64,
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub monthly_week: i64,
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub monthly_week_day: i64,
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub repeat_interval: i64,
    /**
     * Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weekly_days: Option<WeeklyDays>,
}

/// Meeting object
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingInfo {
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub agenda: String,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub h_323_password: String,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub join_url: String,
    /**
     * Meeting object
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub occurrences: Vec<Occurrence>,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub pmi: i64,
    /**
     * Meeting object
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pre_schedule: bool,
    /**
     * Meeting object
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<Recurrence>,
    /**
     * Meeting object
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<MeetingSettings>,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub start_url: String,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Meeting object
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<TrackingFields>,
    /**
     * Meeting object
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/**
 * Meeting status
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Status {
    #[serde(rename = "started")]
    Started,
    #[serde(rename = "waiting")]
    Waiting,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Status {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Status::Started => "started",
            Status::Waiting => "waiting",
            Status::Noop => "",
            Status::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Status {
    fn default() -> Status {
        Status::Noop
    }
}
impl Status {
    pub fn is_noop(&self) -> bool {
        matches!(self, Status::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingInfoGetTrackingFields {
    /**
     * Label of the tracking field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub field: String,
    /**
     * Value for the field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.
     *  
     *  `true`: Tracking field is visible. <br>
     *  
     *  `false`: Tracking field is not visible to the users when they look at the meeting details in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub visible: bool,
}

/// Meeting object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingInfoGet {
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub agenda: String,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub encrypted_password: String,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub h_323_password: String,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub join_url: String,
    /**
     * Meeting object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub occurrences: Vec<Occurrence>,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub pmi: i64,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pre_schedule: bool,
    /**
     * Meeting object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<Recurrence>,
    /**
     * Meeting object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<MeetingSettings>,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub start_url: String,
    /**
     * Meeting object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Meeting object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<MeetingInfoGetTrackingFields>,
    /**
     * Meeting object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// List of meetings.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingList {}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingMetricCustomKeys {
    /**
     * Custom key associated with the meetinh.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub key: String,
    /**
     * Value of the custom key associated with the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// Meeting metric details.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingMetric {
    /**
     * Meeting metric details.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_keys: Vec<MeetingMetricCustomKeys>,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dept: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub duration: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_3rd_party_audio: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_pstn: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_recording: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_screen_share: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_sip: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_video: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_voip: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub in_room_participants: i64,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants: i64,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_type: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

/// Meeting invitation details.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingInvitation {
    /**
     * Meeting invitation details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub invitation: String,
}

///  Registrant.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingRegistrant {}

/// List of users.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserList {}

/// List of meeting recording registrant
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingRecordingRegistrantList {}

/// Meeting live stream.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingLiveStream {
    /**
     * The livestream page URL.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub page_url: String,
    /**
     * Stream name and key.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub stream_key: String,
    /**
     * Streaming URL.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub stream_url: String,
}

/**
 * Update the status of a livestream.
 *   
 *   The value can be one of the following:<br>
 *   `start`: Start a live stream. <br>
 *   `stop`: Stop an ongoing live stream.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Action {
    #[serde(rename = "start")]
    Start,
    #[serde(rename = "stop")]
    Stop,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Action {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Action::Start => "start",
            Action::Stop => "stop",
            Action::Noop => "",
            Action::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Action {
    fn default() -> Action {
        Action::Noop
    }
}
impl Action {
    pub fn is_noop(&self) -> bool {
        matches!(self, Action::Noop)
    }
}

/// Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingLiveStreamStatusSettings {
    /**
     * Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub active_speaker_name: bool,
    /**
     * Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
}

/// Meeting live stream status.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingLiveStreamStatus {
    /**
     * Meeting live stream status.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    /**
     * Meeting live stream status.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<MeetingLiveStreamStatusSettings>,
}

/// Webinar live stream.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarLiveStream {
    /**
     * The webinar live stream page's URL.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub page_url: String,
    /**
     * The webinar live stream name and key.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub stream_key: String,
    /**
     * The webinar live stream URL.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub stream_url: String,
}

/**
 * Update the status of a livestream. This value can be one of the following:
 *   
 *   * `start` — Start a webinar live stream.
 *   
 *   * `stop` — Stop an ongoing webinar live stream.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarLiveStreamStatusAction {
    #[serde(rename = "start")]
    Start,
    #[serde(rename = "stop")]
    Stop,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for WebinarLiveStreamStatusAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            WebinarLiveStreamStatusAction::Start => "start",
            WebinarLiveStreamStatusAction::Stop => "stop",
            WebinarLiveStreamStatusAction::Noop => "",
            WebinarLiveStreamStatusAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for WebinarLiveStreamStatusAction {
    fn default() -> WebinarLiveStreamStatusAction {
        WebinarLiveStreamStatusAction::Noop
    }
}
impl WebinarLiveStreamStatusAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, WebinarLiveStreamStatusAction::Noop)
    }
}

/// Update the live stream session's settings. You can **only** update settings for a stopped live stream.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarLiveStreamStatusSettings {
    /**
     * Update the live stream session's settings. You can \*\*only\*\* update settings for a stopped live stream.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub active_speaker_name: bool,
    /**
     * Update the live stream session's settings. You can \*\*only\*\* update settings for a stopped live stream.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
}

/// Webinar live stream status.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarLiveStreamStatus {
    /**
     * Webinar live stream status.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<WebinarLiveStreamStatusAction>,
    /**
     * Webinar live stream status.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<WebinarLiveStreamStatusSettings>,
}

/// List of Meetings
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingInstances {}

/// Pagination Object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Pagination {
    /**
     * Pagination Object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Pagination Object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * Pagination Object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_number: i64,
    /**
     * Pagination Object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * Pagination Object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/// Pagination object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PaginationToken {
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/// Pagination object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PaginationToken4Qos {
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/// Pagination object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PaginationToken4ImChat {
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Pagination object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

/// Panelist base object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Panelist {
    /**
     * Panelist base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Panelist base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Panelists {
    /**
     * Panelist's ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PanelistsData {
    /**
     * Join URL.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub join_url: String,
}

/// All of the following types:
///
/// - `Panelists`
/// - `Panelist`
/// - `PanelistsData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PanelistsAllOf {
    /**
     * Panelist base object.
     */
    Panelist(Panelist),
    Panelists(Panelists),
    PanelistsData(PanelistsData),
}

/// List of panelists.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PanelistList {
    /**
     * List of panelists.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub panelists: Vec<PanelistsAllOf>,
    /**
     * List of panelists.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/// Quality of Service object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct QosAudio {
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub latency: String,
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
}

/// Participant QOS list.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ParticipantQosList {}

/// Quality of service object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AsInput {}

/**
 * The recording status.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RecordingStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RecordingStatus::Completed => "completed",
            RecordingStatus::Noop => "",
            RecordingStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RecordingStatus {
    fn default() -> RecordingStatus {
        RecordingStatus::Noop
    }
}
impl RecordingStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, RecordingStatus::Noop)
    }
}

/// Recording file object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingData {
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub deleted_time: String,
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub file_size: f64,
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_type: String,
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub meeting_id: String,
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub play_url: String,
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_end: String,
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_start: String,
    /**
     * Recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_type: String,
    /**
     * Recording file object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<RecordingStatus>,
}

/// List of recording file.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingList {}

/**
 * The recording file's status.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingSeparateAudioStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RecordingSeparateAudioStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RecordingSeparateAudioStatus::Completed => "completed",
            RecordingSeparateAudioStatus::Noop => "",
            RecordingSeparateAudioStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RecordingSeparateAudioStatus {
    fn default() -> RecordingSeparateAudioStatus {
        RecordingSeparateAudioStatus::Noop
    }
}
impl RecordingSeparateAudioStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, RecordingSeparateAudioStatus::Noop)
    }
}

/// The recording file object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingSeparateAudio {
    /**
     * The recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * The recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_name: String,
    /**
     * The recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub file_size: f64,
    /**
     * The recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_type: String,
    /**
     * The recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub play_url: String,
    /**
     * The recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub recording_end: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The recording file object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub recording_start: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The recording file object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<RecordingSeparateAudioStatus>,
}

/// Return a list of recording files for each participant. The API only returns this response when the **Record a separate audio file of each participant** setting is enabled.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingSeparateAudioList {}

/// The recording meeting object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingMeeting {}

/// List of recordings.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingMeetingList {}

/**
 * Determine how the meeting recording is shared.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ShareRecording {
    #[serde(rename = "internally")]
    Internally,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "publicly")]
    Publicly,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ShareRecording {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ShareRecording::Internally => "internally",
            ShareRecording::None => "none",
            ShareRecording::Publicly => "publicly",
            ShareRecording::Noop => "",
            ShareRecording::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ShareRecording {
    fn default() -> ShareRecording {
        ShareRecording::Noop
    }
}
impl ShareRecording {
    pub fn is_noop(&self) -> bool {
        matches!(self, ShareRecording::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingSettings {
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub approval_type: i64,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_domains: String,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_option: String,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub on_demand: bool,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_authentication: bool,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub send_email_to_host: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub share_recording: Option<ShareRecording>,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_social_share_buttons: bool,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub viewer_download: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingRegistrantStatusAction {
    #[serde(rename = "approve")]
    Approve,
    #[serde(rename = "deny")]
    Deny,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RecordingRegistrantStatusAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RecordingRegistrantStatusAction::Approve => "approve",
            RecordingRegistrantStatusAction::Deny => "deny",
            RecordingRegistrantStatusAction::Noop => "",
            RecordingRegistrantStatusAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RecordingRegistrantStatusAction {
    fn default() -> RecordingRegistrantStatusAction {
        RecordingRegistrantStatusAction::Noop
    }
}
impl RecordingRegistrantStatusAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, RecordingRegistrantStatusAction::Noop)
    }
}

/// Registrant Status
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingRegistrantStatus {
    #[serde(
        default,
        skip_serializing_if = "RecordingRegistrantStatusAction::is_noop"
    )]
    pub action: RecordingRegistrantStatusAction,
    /**
     * Registrant Status
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub registrants: Vec<String>,
}

/// Registrant base object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Registrant {
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub comments: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Registrant base object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_questions: Vec<CustomQuestion>,
    /**
     * A valid email address of the registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Registrant's first name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub industry: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub job_title: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub no_of_employees: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub org: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub purchasing_time_frame: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub role_in_purchase_process: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub state: String,
    /**
     * Registrant base object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zip: String,
}

/// List of Recording Registration
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingRegistrantList {}

/**
 * Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RegistrantStatusAction {
    #[serde(rename = "approve")]
    Approve,
    #[serde(rename = "cancel")]
    Cancel,
    #[serde(rename = "deny")]
    Deny,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RegistrantStatusAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RegistrantStatusAction::Approve => "approve",
            RegistrantStatusAction::Cancel => "cancel",
            RegistrantStatusAction::Deny => "deny",
            RegistrantStatusAction::Noop => "",
            RegistrantStatusAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RegistrantStatusAction {
    fn default() -> RegistrantStatusAction {
        RegistrantStatusAction::Noop
    }
}
impl RegistrantStatusAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, RegistrantStatusAction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Registrants {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RegistrantStatus {
    /**
     * Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant.
     */
    #[serde(default, skip_serializing_if = "RegistrantStatusAction::is_noop")]
    pub action: RegistrantStatusAction,
    /**
     * List of registrants.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub registrants: Vec<Registrants>,
}

/// List of Roles
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RoleList {}

/// List of a Role Members
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RoleMembersList {
    /**
     * List of a Role Members
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<Domains>,
    /**
     * List of a Role Members
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * List of a Role Members
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * List of a Role Members
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_number: i64,
    /**
     * List of a Role Members
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * List of a Role Members
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/// Add Role Members
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddRoleMembers {
    /**
     * Add Role Members
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<String>,
}

/// Base object for sessions.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Session {
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub agenda: String,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Base object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<Recurrence>,
    /**
     * Base object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<MeetingSettings>,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Base object for sessions.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<String>,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SessionUpdateTrackingFields {
    /**
     * Tracking fields type
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub field: String,
    /**
     * Tracking fields value
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SettingsData {
    /**
     * Send confirmation Email to Registrants
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_confirmation_email: bool,
}

/// All of the following types:
///
/// - `MeetingSettings`
/// - `SettingsData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum SettingsAllOf {
    /**
     * Meeting settings.
     */
    MeetingSettings(MeetingSettings),
    SettingsData(SettingsData),
}

/// Base object for sessions.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SessionUpdate {
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub agenda: String,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pre_schedule: bool,
    /**
     * Base object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<Recurrence>,
    /**
     * Base object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<SettingsAllOf>,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub template_id: String,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Base object for sessions.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<SessionUpdateTrackingFields>,
    /**
     * Base object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecurrenceWebinar {
    /**
     * Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_date_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub end_times: i64,
    /**
     * Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub monthly_day: i64,
    /**
     * Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub monthly_week: i64,
    /**
     * Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub monthly_week_day: i64,
    /**
     * Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub repeat_interval: i64,
    /**
     * Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub weekly_days: String,
}

/**
 * Determine how participants can join the audio portion of the webinar.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum SessionWebinarSettingsAudio {
    #[serde(rename = "both")]
    Both,
    #[serde(rename = "telephony")]
    Telephony,
    #[serde(rename = "voip")]
    Voip,
    FallthroughString(String),
}

impl std::fmt::Display for SessionWebinarSettingsAudio {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            SessionWebinarSettingsAudio::Both => "both",
            SessionWebinarSettingsAudio::Telephony => "telephony",
            SessionWebinarSettingsAudio::Voip => "voip",
            SessionWebinarSettingsAudio::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for SessionWebinarSettingsAudio {
    fn default() -> SessionWebinarSettingsAudio {
        SessionWebinarSettingsAudio::Both
    }
}

/**
 * Indicate whether you want attendees to be able to view answered questions only or view all questions.
 *   
 *   * `only`: Attendees are able to view answered questions only.
 *   
 *   *  `all`: Attendees are able to view all questions submitted in the Q&A.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AnswerQuestions {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "only")]
    Only,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AnswerQuestions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AnswerQuestions::All => "all",
            AnswerQuestions::Only => "only",
            AnswerQuestions::Noop => "",
            AnswerQuestions::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AnswerQuestions {
    fn default() -> AnswerQuestions {
        AnswerQuestions::Noop
    }
}
impl AnswerQuestions {
    pub fn is_noop(&self) -> bool {
        matches!(self, AnswerQuestions::Noop)
    }
}

/// [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct QuestionAnswer {
    /**
     * [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_anonymous_questions: bool,
    /**
     * [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub answer_questions: Option<AnswerQuestions>,
    /**
     * [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub attendees_can_comment: bool,
    /**
     * [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub attendees_can_upvote: bool,
    /**
     * [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

/// Send reminder email to attendees and panelists.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AttendeesPanelistsReminderEmailNotification {
    /**
     * Send reminder email to attendees and panelists.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Send reminder email to attendees and panelists.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// Send follow-up email to attendees.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct FollowUpAttendeesEmailNotification {
    /**
     * Send follow-up email to attendees.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Send follow-up email to attendees.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// Send follow-up email to absentees.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct FollowUpAbsenteesEmailNotification {
    /**
     * Send follow-up email to absentees.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Send follow-up email to absentees.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// Webinar settings.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarSettings {
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_multiple_devices: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub alternative_hosts: String,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub approval_type: i64,
    /**
     * Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attendees_and_panelists_reminder_email_notification:
        Option<AttendeesPanelistsReminderEmailNotification>,
    /**
     * Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio: Option<SessionWebinarSettingsAudio>,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_domains: String,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_name: String,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_option: String,
    /**
     * Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_recording: Option<AutoRecording>,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub close_registration: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub contact_email: String,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub contact_name: String,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email_language: String,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enforce_login: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enforce_login_domains: String,
    /**
     * Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub follow_up_absentees_email_notification: Option<FollowUpAbsenteesEmailNotification>,
    /**
     * Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub follow_up_attendees_email_notification: Option<FollowUpAttendeesEmailNotification>,
    /**
     * Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub global_dial_in_countries: Vec<String>,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub hd_video: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub meeting_authentication: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub notify_registrants: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub on_demand: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub panelists_invitation_email_notification: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub panelists_video: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub post_webinar_survey: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub practice_session: bool,
    /**
     * Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub question_and_answer: Option<QuestionAnswer>,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_confirmation_email: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_email_notification: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registrants_restrict_number: i64,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registration_type: i64,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_share_button: bool,
    /**
     * Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub survey_url: String,
}

/// Base webinar object for sessions.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SessionWebinar {
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub agenda: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<RecurrenceWebinar>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<WebinarSettings>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<SessionUpdateTrackingFields>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SettingsDataType {
    /**
     * Send confirmation email to registrants.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_confirmation_email: bool,
}

/// All of the following types:
///
/// - `SessionWebinarSettings`
/// - `SettingsDataType`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum SessionWebinarUpdateSettingsAllOf {
    /**
     * Webinar settings.
     */
    SessionWebinarSettings(SessionWebinarSettings),
    SettingsDataType(SettingsDataType),
}

/// Base webinar object for sessions.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SessionWebinarUpdate {
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub agenda: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<Recurrence>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<SessionWebinarUpdateSettingsAllOf>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<SessionUpdateTrackingFields>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/**
 * Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>
 *   `media_link` - Media link.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum TspAccountsListDialInNumbersType {
    #[serde(rename = "media_link")]
    MediaLink,
    #[serde(rename = "toll")]
    Toll,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for TspAccountsListDialInNumbersType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            TspAccountsListDialInNumbersType::MediaLink => "media_link",
            TspAccountsListDialInNumbersType::Toll => "toll",
            TspAccountsListDialInNumbersType::Tollfree => "tollfree",
            TspAccountsListDialInNumbersType::Noop => "",
            TspAccountsListDialInNumbersType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for TspAccountsListDialInNumbersType {
    fn default() -> TspAccountsListDialInNumbersType {
        TspAccountsListDialInNumbersType::Noop
    }
}
impl TspAccountsListDialInNumbersType {
    pub fn is_noop(&self) -> bool {
        matches!(self, TspAccountsListDialInNumbersType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DialInNumbers {
    /**
     * Country code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * Country Label, if passed, will display in place of code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country_label: String,
    /**
     * Dial-in number: length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>
     *  `media_link` - Media link.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<TspAccountsListDialInNumbersType>,
}

/**
 * Telephony bridge
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum TspBridge {
    #[serde(rename = "EU_TSP_TB")]
    EuTspTb,
    #[serde(rename = "US_TSP_TB")]
    UsTspTb,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for TspBridge {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            TspBridge::EuTspTb => "EU_TSP_TB",
            TspBridge::UsTspTb => "US_TSP_TB",
            TspBridge::Noop => "",
            TspBridge::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for TspBridge {
    fn default() -> TspBridge {
        TspBridge::Noop
    }
}
impl TspBridge {
    pub fn is_noop(&self) -> bool {
        matches!(self, TspBridge::Noop)
    }
}

/// List of TSP accounts.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspAccountsList {
    /**
     * Conference code: numeric value, length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub conference_code: String,
    /**
     * List of TSP accounts.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dial_in_numbers: Vec<DialInNumbers>,
    /**
     * Leader PIN: numeric value, length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub leader_pin: String,
    /**
     * List of TSP accounts.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp_bridge: Option<TspBridge>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DedicatedDialInNumber {
    /**
     * Country code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Dial-in number: length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

/// List of PAC accounts.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Pac {
    /**
     * List of PAC accounts.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub conference_id: i64,
    /**
     * List of PAC accounts.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dedicated_dial_in_number: Vec<DedicatedDialInNumber>,
    /**
     * List of PAC accounts.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub global_dial_in_numbers: Vec<DedicatedDialInNumber>,
    /**
     * List of PAC accounts.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub listen_only_password: String,
    /**
     * List of PAC accounts.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub participant_password: String,
}

/// The user object represents a specific user on Zoom.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct User {
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dept: String,
    /**
     * User's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_client_version: String,
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub last_login_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub pmi: i64,
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub role_name: String,
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * The user object represents a specific user on Zoom.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi: bool,
}

/// Custom attribute(s) of the user.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CustomAttributes {
    /**
     * Custom attribute(s) of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub key: String,
    /**
     * Custom attribute(s) of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Custom attribute(s) of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/**
 * The label to add to the user's phone number. You can only add one label to the user's phone number:
 *   
 *   * `Mobile`
 *   * `Office`
 *   * `Home`
 *   * `Fax`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Label {
    #[serde(rename = "Fax")]
    Fax,
    #[serde(rename = "Home")]
    Home,
    #[serde(rename = "Mobile")]
    Mobile,
    #[serde(rename = "Office")]
    Office,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Label {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Label::Fax => "Fax",
            Label::Home => "Home",
            Label::Mobile => "Mobile",
            Label::Office => "Office",
            Label::Noop => "",
            Label::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Label {
    fn default() -> Label {
        Label::Noop
    }
}
impl Label {
    pub fn is_noop(&self) -> bool {
        matches!(self, Label::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneNumbers {
    /**
     * Country code of the phone number. For example, for United States phone numbers, the value of this field should be "+1".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * [Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `number` field is a Brazil based number, the value of the `country` field should be `BR`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * The label to add to the user's phone number. You can only add one label to the user's phone number:
     *  
     *  \* `Mobile`
     *  \* `Office`
     *  \* `Home`
     *  \* `Fax`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<Label>,
    /**
     * Phone number of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

/// The user update object represents a user on Zoom.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserUpdate {
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub cms_user_id: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub company: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<CustomAttributes>,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dept: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub group_id: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_key: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub job_title: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub language: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub manager: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_country: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phone_numbers: Option<PhoneNumbers>,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub pmi: i64,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi: bool,
    /**
     * The user update object represents a user on Zoom.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub vanity_name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Assistants {
    /**
     * Assistant's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Assistant's user ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// List of user's assistants.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserAssistantsList {
    /**
     * List of user's assistants.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub assistants: Vec<Assistants>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Schedulers {
    /**
     * Email address of the scheduler.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Unique Identifier (User ID) of the Scheduler.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * PMI of the meeting host in long (int64) format.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub pmi: i64,
}

/// List of user's schedulers.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSchedulersList {
    /**
     * List of user's schedulers.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub schedulers: Vec<Schedulers>,
}

/**
 * Determine how participants can join the audio portion of the meeting:<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - Third party audio conference.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserSettingsMeetingAudioType {
    #[serde(rename = "both")]
    Both,
    #[serde(rename = "telephony")]
    Telephony,
    #[serde(rename = "thirdParty")]
    ThirdParty,
    #[serde(rename = "voip")]
    Voip,
    FallthroughString(String),
}

impl std::fmt::Display for UserSettingsMeetingAudioType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserSettingsMeetingAudioType::Both => "both",
            UserSettingsMeetingAudioType::Telephony => "telephony",
            UserSettingsMeetingAudioType::ThirdParty => "thirdParty",
            UserSettingsMeetingAudioType::Voip => "voip",
            UserSettingsMeetingAudioType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserSettingsMeetingAudioType {
    fn default() -> UserSettingsMeetingAudioType {
        UserSettingsMeetingAudioType::Voip
    }
}

/**
 * Require a passcode for Personal Meeting ID (PMI). This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserSettingsMeetingRequirePasswordPmiMeetings {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "jbh_only")]
    JbhOnly,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserSettingsMeetingRequirePasswordPmiMeetings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserSettingsMeetingRequirePasswordPmiMeetings::All => "all",
            UserSettingsMeetingRequirePasswordPmiMeetings::JbhOnly => "jbh_only",
            UserSettingsMeetingRequirePasswordPmiMeetings::None => "none",
            UserSettingsMeetingRequirePasswordPmiMeetings::Noop => "",
            UserSettingsMeetingRequirePasswordPmiMeetings::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserSettingsMeetingRequirePasswordPmiMeetings {
    fn default() -> UserSettingsMeetingRequirePasswordPmiMeetings {
        UserSettingsMeetingRequirePasswordPmiMeetings::Noop
    }
}
impl UserSettingsMeetingRequirePasswordPmiMeetings {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserSettingsMeetingRequirePasswordPmiMeetings::Noop)
    }
}

/// Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsMeetingPasswordRequirement {
    /**
     * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub consecutive_characters_length: i64,
    /**
     * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_letter: bool,
    /**
     * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_number: bool,
    /**
     * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_special_character: bool,
    /**
     * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_upper_and_lower_characters: bool,
    /**
     * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub length: i64,
    /**
     * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub only_allow_numeric: bool,
    /**
     * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub weak_enhance_detection: bool,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsMeeting {
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio_type: Option<UserSettingsMeetingAudioType>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub default_password_for_scheduled_meetings: String,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub embed_password_in_join_link: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub force_pmi_jbh_password: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_before_host: bool,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub meeting_password_requirement: Option<UserSettingsMeetingPasswordRequirement>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub participants_video: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub personal_meeting: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub pmi_password: String,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pstn_password_protected: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_instant_meetings: bool,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_password_for_pmi_meetings: Option<UserSettingsMeetingRequirePasswordPmiMeetings>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduled_meetings: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduling_new_meetings: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi_for_instant_meetings: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi_for_scheduled_meetings: bool,
}

/**
 * Play sound when participants join or leave:<br>`host` - When host joins or leaves.<br>`all` - When any participant joins or leaves.<br>`none` - No join or leave sound.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserSettingsMeetingEntryExitChime {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "host")]
    Host,
    #[serde(rename = "none")]
    None,
    FallthroughString(String),
}

impl std::fmt::Display for UserSettingsMeetingEntryExitChime {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserSettingsMeetingEntryExitChime::All => "all",
            UserSettingsMeetingEntryExitChime::Host => "host",
            UserSettingsMeetingEntryExitChime::None => "none",
            UserSettingsMeetingEntryExitChime::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserSettingsMeetingEntryExitChime {
    fn default() -> UserSettingsMeetingEntryExitChime {
        UserSettingsMeetingEntryExitChime::All
    }
}

/// Settings to manage virtual background.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsMeetingVirtualBackground {
    /**
     * Settings to manage virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_upload_custom: bool,
    /**
     * Settings to manage virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_videos: bool,
    /**
     * Settings to manage virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Settings to manage virtual background.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub files: Vec<Files>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsInMeeting {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_live_streaming: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub annotation: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub attendee_on_hold: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_saving_chat: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub breakout_room: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub chat: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub closed_caption: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub co_host: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub custom_data_center_regions: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub custom_live_streaming_service: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub custom_service_instructions: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub data_center_regions: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub e_2e_encryption: bool,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entry_exit_chime: Option<UserSettingsMeetingEntryExitChime>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub far_end_camera_control: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub feedback: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub file_transfer: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub group_hd: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_from_desktop: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_from_mobile: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub non_verbal_feedback: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub polling: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub private_chat: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_play_voice: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_control: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_support: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub request_permission_to_unmute: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub screen_sharing: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub share_dual_camera: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_a_join_from_your_browser_link: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_meeting_control_toolbar: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub virtual_background: bool,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virtual_background_settings: Option<UserSettingsMeetingVirtualBackground>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub waiting_room: bool,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub who_can_share_screen: Option<WhoCanShareScreen>,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub who_can_share_screen_when_someone_is_sharing: Option<WhoCanShareScreenWhenSomeoneSharing>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub workplace_by_facebook: bool,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsNotification {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alternative_host_reminder: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cancel_meeting_reminder: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub jbh_reminder: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub schedule_for_reminder: bool,
}

/**
 * Automatic recording:<br>`local` - Record on local.<br>`cloud` - Record on cloud.<br>`none` - Disabled.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserSettingsRecordingAuto {
    #[serde(rename = "cloud")]
    Cloud,
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "none")]
    None,
    FallthroughString(String),
}

impl std::fmt::Display for UserSettingsRecordingAuto {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserSettingsRecordingAuto::Cloud => "cloud",
            UserSettingsRecordingAuto::Local => "local",
            UserSettingsRecordingAuto::None => "none",
            UserSettingsRecordingAuto::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserSettingsRecordingAuto {
    fn default() -> UserSettingsRecordingAuto {
        UserSettingsRecordingAuto::Local
    }
}

/// This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsRecordingPasswordRequirement {
    /**
     * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_letter: bool,
    /**
     * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_number: bool,
    /**
     * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_special_character: bool,
    /**
     * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub length: i64,
    /**
     * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub only_allow_numeric: bool,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsRecording {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub ask_host_to_confirm_disclaimer: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub ask_participants_to_consent_disclaimer: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_delete_cmr: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub auto_delete_cmr_days: i64,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_recording: Option<UserSettingsRecordingAuto>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_pause_stop_recording: bool,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_address_access_control: Option<IpAddressAccessControl>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub local_recording: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_audio_file: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_audio_file_each_participant: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_gallery_view: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_speaker_view: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_audio_transcript: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_disclaimer: bool,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording_password_requirement: Option<UserSettingsRecordingPasswordRequirement>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub save_chat_text: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_timestamp: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsTelephony {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_conference_info: String,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_international_numbers_link: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony_regions: Option<TelephonyRegions>,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub third_party_audio: bool,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsFeature {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cn_meeting: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub in_meeting: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub large_meeting: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub large_meeting_capacity: i64,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub meeting_capacity: i64,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub webinar: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub webinar_capacity: i64,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub zoom_events: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub zoom_events_capacity: i64,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub zoom_phone: bool,
}

/// Account Settings: TSP.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsTsp {
    /**
     * Account Settings: TSP.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub call_out: bool,
    /**
     * Account Settings: TSP.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub call_out_countries: Vec<String>,
    /**
     * Account Settings: TSP.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_international_numbers_link: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email_notification: Option<UserSettingsNotification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature: Option<UserSettingsFeature>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_meeting: Option<UserSettingsInMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<Profile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording: Option<UserSettingsRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule_meeting: Option<UserSettingsMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony: Option<UserSettingsTelephony>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp: Option<UserSettingsTsp>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SettingsUpdateTelephony {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_conference_info: String,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_international_numbers_link: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony_regions: Option<UpdateAccountSettingsTelephonyRegions>,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub third_party_audio: bool,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsUpdateFeature {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub large_meeting: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub large_meeting_capacity: i64,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub meeting_capacity: i64,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub webinar: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub webinar_capacity: i64,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub zoom_events: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub zoom_events_capacity: i64,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub zoom_phone: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserSettingsUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email_notification: Option<UserSettingsNotification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature: Option<UserSettingsUpdateFeature>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_meeting: Option<UserSettingsInMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<Profile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording: Option<UserSettingsRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule_meeting: Option<UserSettingsMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony: Option<SettingsUpdateTelephony>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp: Option<UserSettingsTsp>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserPermissions {
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub permissions: Vec<String>,
}

/// Webinar object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Webinar {}

/// Webinar object
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarUpdate {}

/// Webinar object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarInfo {
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub agenda: String,
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub join_url: String,
    /**
     * Webinar object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub occurrences: Vec<Occurrence>,
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Webinar object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<RecurrenceWebinar>,
    /**
     * Webinar object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<WebinarSettings>,
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub start_url: String,
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Webinar object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<SessionUpdateTrackingFields>,
    /**
     * Webinar object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// List of webinars.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarList {}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarMetricCustomKeys {
    /**
     * Custom key associated with the Webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub key: String,
    /**
     * Value of the custom key associated with the Webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// Webinar metric details.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Webinars {
    /**
     * Webinar metric details.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_keys: Vec<WebinarMetricCustomKeys>,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dept: String,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub duration: String,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_3rd_party_audio: bool,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_pstn: bool,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_recording: bool,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_screen_share: bool,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_sip: bool,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_video: bool,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_voip: bool,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host: String,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants: i64,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_type: String,
    /**
     * Webinar metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

/// All of the following types:
///
/// - `Panelist`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarPanelistPanelistsAllOf {
    /**
     * Panelist base object.
     */
    Panelist(Panelist),
}

/// Webinar panelist.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarPanelist {
    /**
     * Webinar panelist.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub panelists: Vec<WebinarPanelistPanelistsAllOf>,
}

/// Webinar panelist.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarPanelistList {}

/// Webinar registrant.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarRegistrant {}

/// Zoom room.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ZoomRoom {
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_type: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub calender_name: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub camera: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_ip: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub health: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Zoom room.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub issues: Vec<String>,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_start_time: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub microphone: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub room_name: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub speaker: String,
    /**
     * Zoom room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

/// Zoom Room List
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ZoomRoomList {}

/// Poll List
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PollList {}

/**
 * Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PollQuestionsType {
    #[serde(rename = "multiple")]
    Multiple,
    #[serde(rename = "single")]
    Single,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for PollQuestionsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            PollQuestionsType::Multiple => "multiple",
            PollQuestionsType::Single => "single",
            PollQuestionsType::Noop => "",
            PollQuestionsType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for PollQuestionsType {
    fn default() -> PollQuestionsType {
        PollQuestionsType::Noop
    }
}
impl PollQuestionsType {
    pub fn is_noop(&self) -> bool {
        matches!(self, PollQuestionsType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Questions {
    /**
     * Answers to the questions
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub answers: Vec<String>,
    /**
     * Question to be asked to the attendees.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<PollQuestionsType>,
}

/// Poll
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Poll {
    /**
     * Poll
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<Questions>,
    /**
     * Poll
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
}

/**
 * Field name of the question.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum FieldName {
    #[serde(rename = "address")]
    Address,
    #[serde(rename = "city")]
    City,
    #[serde(rename = "comments")]
    Comments,
    #[serde(rename = "country")]
    Country,
    #[serde(rename = "industry")]
    Industry,
    #[serde(rename = "job_title")]
    JobTitle,
    #[serde(rename = "no_of_employees")]
    NoOfEmployees,
    #[serde(rename = "org")]
    Org,
    #[serde(rename = "phone")]
    Phone,
    #[serde(rename = "purchasing_time_frame")]
    PurchasingTimeFrame,
    #[serde(rename = "role_in_purchase_process")]
    RoleInPurchaseProcess,
    #[serde(rename = "state")]
    State,
    #[serde(rename = "zip")]
    Zip,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for FieldName {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            FieldName::Address => "address",
            FieldName::City => "city",
            FieldName::Comments => "comments",
            FieldName::Country => "country",
            FieldName::Industry => "industry",
            FieldName::JobTitle => "job_title",
            FieldName::NoOfEmployees => "no_of_employees",
            FieldName::Org => "org",
            FieldName::Phone => "phone",
            FieldName::PurchasingTimeFrame => "purchasing_time_frame",
            FieldName::RoleInPurchaseProcess => "role_in_purchase_process",
            FieldName::State => "state",
            FieldName::Zip => "zip",
            FieldName::Noop => "",
            FieldName::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for FieldName {
    fn default() -> FieldName {
        FieldName::Noop
    }
}
impl FieldName {
    pub fn is_noop(&self) -> bool {
        matches!(self, FieldName::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingRegistrantQuestions {
    /**
     * Field name of the question.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<FieldName>,
    /**
     * Indicates whether or not the displayed fields are required to be filled out by registrants.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required: bool,
}

/**
 * Type of the question being asked.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingRegistrantQuestionsCustomType {
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "single")]
    Single,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for MeetingRegistrantQuestionsCustomType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            MeetingRegistrantQuestionsCustomType::Short => "short",
            MeetingRegistrantQuestionsCustomType::Single => "single",
            MeetingRegistrantQuestionsCustomType::Noop => "",
            MeetingRegistrantQuestionsCustomType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for MeetingRegistrantQuestionsCustomType {
    fn default() -> MeetingRegistrantQuestionsCustomType {
        MeetingRegistrantQuestionsCustomType::Noop
    }
}
impl MeetingRegistrantQuestionsCustomType {
    pub fn is_noop(&self) -> bool {
        matches!(self, MeetingRegistrantQuestionsCustomType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CustomQuestions {
    /**
     * Answer choices for the question. Can not be used for `short` question type as this type of question requires registrants to type out the answer.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub answers: Vec<String>,
    /**
     * Indicates whether or not the custom question is required to be answered by participants or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required: bool,
    /**
     * Title of the custom question.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
    /**
     * Type of the question being asked.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<MeetingRegistrantQuestionsCustomType>,
}

/// Meeting Registrant Questions
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingRegistrantQuestionsData {
    /**
     * Meeting Registrant Questions
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_questions: Vec<CustomQuestions>,
    /**
     * Meeting Registrant Questions
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<MeetingRegistrantQuestions>,
}

/// Webinar Registrant Questions
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarRegistrantQuestions {
    /**
     * Webinar Registrant Questions
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_questions: Vec<String>,
    /**
     * Webinar Registrant Questions
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<String>,
}

/**
 * Field name.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingRegistrantQuestionsFieldName {
    #[serde(rename = "address")]
    Address,
    #[serde(rename = "city")]
    City,
    #[serde(rename = "comments")]
    Comments,
    #[serde(rename = "country")]
    Country,
    #[serde(rename = "industry")]
    Industry,
    #[serde(rename = "job_title")]
    JobTitle,
    #[serde(rename = "last_name")]
    LastName,
    #[serde(rename = "no_of_employees")]
    NoOfEmployees,
    #[serde(rename = "org")]
    Org,
    #[serde(rename = "phone")]
    Phone,
    #[serde(rename = "purchasing_time_frame")]
    PurchasingTimeFrame,
    #[serde(rename = "role_in_purchase_process")]
    RoleInPurchaseProcess,
    #[serde(rename = "state")]
    State,
    #[serde(rename = "zip")]
    Zip,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RecordingRegistrantQuestionsFieldName {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RecordingRegistrantQuestionsFieldName::Address => "address",
            RecordingRegistrantQuestionsFieldName::City => "city",
            RecordingRegistrantQuestionsFieldName::Comments => "comments",
            RecordingRegistrantQuestionsFieldName::Country => "country",
            RecordingRegistrantQuestionsFieldName::Industry => "industry",
            RecordingRegistrantQuestionsFieldName::JobTitle => "job_title",
            RecordingRegistrantQuestionsFieldName::LastName => "last_name",
            RecordingRegistrantQuestionsFieldName::NoOfEmployees => "no_of_employees",
            RecordingRegistrantQuestionsFieldName::Org => "org",
            RecordingRegistrantQuestionsFieldName::Phone => "phone",
            RecordingRegistrantQuestionsFieldName::PurchasingTimeFrame => "purchasing_time_frame",
            RecordingRegistrantQuestionsFieldName::RoleInPurchaseProcess => {
                "role_in_purchase_process"
            }
            RecordingRegistrantQuestionsFieldName::State => "state",
            RecordingRegistrantQuestionsFieldName::Zip => "zip",
            RecordingRegistrantQuestionsFieldName::Noop => "",
            RecordingRegistrantQuestionsFieldName::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RecordingRegistrantQuestionsFieldName {
    fn default() -> RecordingRegistrantQuestionsFieldName {
        RecordingRegistrantQuestionsFieldName::Noop
    }
}
impl RecordingRegistrantQuestionsFieldName {
    pub fn is_noop(&self) -> bool {
        matches!(self, RecordingRegistrantQuestionsFieldName::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingRegistrantQuestions {
    /**
     * Field name.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<RecordingRegistrantQuestionsFieldName>,
    /**
     * State whether the field is required to be answered by the registrant or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required: bool,
}

/**
 * The type of registration question and answers.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingRegistrantQuestionsCustomType {
    #[serde(rename = "multiple")]
    Multiple,
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "single")]
    Single,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RecordingRegistrantQuestionsCustomType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RecordingRegistrantQuestionsCustomType::Multiple => "multiple",
            RecordingRegistrantQuestionsCustomType::Short => "short",
            RecordingRegistrantQuestionsCustomType::Single => "single",
            RecordingRegistrantQuestionsCustomType::Noop => "",
            RecordingRegistrantQuestionsCustomType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RecordingRegistrantQuestionsCustomType {
    fn default() -> RecordingRegistrantQuestionsCustomType {
        RecordingRegistrantQuestionsCustomType::Noop
    }
}
impl RecordingRegistrantQuestionsCustomType {
    pub fn is_noop(&self) -> bool {
        matches!(self, RecordingRegistrantQuestionsCustomType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingRegistrantQuestionsCustom {
    /**
     * Answer choices for the question. Can not be used with Short answer type.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub answers: Vec<String>,
    /**
     * State whether registrants are required to answer custom questions or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required: bool,
    /**
     * Title of the question.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
    /**
     * The type of registration question and answers.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<RecordingRegistrantQuestionsCustomType>,
}

/// Recording Registrant Questions
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingRegistrantQuestionsData {
    /**
     * Recording Registrant Questions
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_questions: Vec<RecordingRegistrantQuestionsCustom>,
    /**
     * Recording Registrant Questions
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<RecordingRegistrantQuestions>,
}

/// Tracking Field List
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TrackingFieldList {}

/// Tracking Field
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TrackingField {
    /**
     * Tracking Field
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub field: String,
    /**
     * Tracking Field
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub recommended_values: Vec<String>,
    /**
     * Tracking Field
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required: bool,
    /**
     * Tracking Field
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub visible: bool,
}

/**
 * Determine how participants can join the audio portion of the meeting.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum CreateWebinarSettingsAudio {
    #[serde(rename = "both")]
    Both,
    #[serde(rename = "telephony")]
    Telephony,
    #[serde(rename = "voip")]
    Voip,
    FallthroughString(String),
}

impl std::fmt::Display for CreateWebinarSettingsAudio {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            CreateWebinarSettingsAudio::Both => "both",
            CreateWebinarSettingsAudio::Telephony => "telephony",
            CreateWebinarSettingsAudio::Voip => "voip",
            CreateWebinarSettingsAudio::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for CreateWebinarSettingsAudio {
    fn default() -> CreateWebinarSettingsAudio {
        CreateWebinarSettingsAudio::Both
    }
}

/// Create Webinar settings.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateWebinarSettings {
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_multiple_devices: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub alternative_hosts: String,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub approval_type: i64,
    /**
     * Create Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attendees_and_panelists_reminder_email_notification:
        Option<AttendeesPanelistsReminderEmailNotification>,
    /**
     * Create Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio: Option<CreateWebinarSettingsAudio>,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_domains: String,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_option: String,
    /**
     * Create Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_recording: Option<AutoRecording>,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub close_registration: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub contact_email: String,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub contact_name: String,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email_language: String,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enforce_login: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enforce_login_domains: String,
    /**
     * Create Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub follow_up_absentees_email_notification: Option<FollowUpAbsenteesEmailNotification>,
    /**
     * Create Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub follow_up_attendees_email_notification: Option<FollowUpAttendeesEmailNotification>,
    /**
     * Create Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub global_dial_in_countries: Vec<String>,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub hd_video: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub meeting_authentication: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub on_demand: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub panelists_invitation_email_notification: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub panelists_video: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub post_webinar_survey: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub practice_session: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub question_and_answer: Option<QuestionAnswer>,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_email_notification: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registrants_restrict_number: i64,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registration_type: i64,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_share_button: bool,
    /**
     * Create Webinar settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub survey_url: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingCreateTrackingFields {
    /**
     * Label of the tracking field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub field: String,
    /**
     * Tracking fields value
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// Language interpretation [settings](https://support.zoom.us/hc/en-us/articles/360034919791-Language-interpretation-in-meetings-and-webinars#h_01EGGQFD3Q4BST3378SA762MJ1) for meetings.
///
/// **Note:** This feature is only available on certain Webinar add-on, Education, Business and higher plans. If this feature is not enabled on the host's account, this setting will not be applied for the meeting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingCreateSettingsLanguageInterpretation {
    /**
     * Language interpretation [settings](https://support.zoom.us/hc/en-us/articles/360034919791-Language-interpretation-in-meetings-and-webinars#h_01EGGQFD3Q4BST3378SA762MJ1) for meetings.
     *  
     *  \*\*Note:\*\* This feature is only available on certain Webinar add-on, Education, Business and higher plans. If this feature is not enabled on the host's account, this setting will not be applied for the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Language interpretation [settings](https://support.zoom.us/hc/en-us/articles/360034919791-Language-interpretation-in-meetings-and-webinars#h_01EGGQFD3Q4BST3378SA762MJ1) for meetings.
     *  
     *  \*\*Note:\*\* This feature is only available on certain Webinar add-on, Education, Business and higher plans. If this feature is not enabled on the host's account, this setting will not be applied for the meeting.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub interpreters: Vec<Interpreters>,
}

/// Meeting settings.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingCreateSettings {
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub additional_data_center_regions: Vec<String>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_multiple_devices: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub alternative_hosts: String,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alternative_hosts_email_notification: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub approval_type: i64,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approved_or_denied_countries_or_regions: Option<ApprovedDeniedCountriesRegions>,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio: Option<Audio>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_domains: String,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub authentication_exception: Vec<AuthenticationException>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication_option: String,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_recording: Option<AutoRecording>,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub breakout_room: Option<BreakoutRoom>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub close_registration: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cn_meeting: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub contact_email: String,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub contact_name: String,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption_type: Option<EncryptionType>,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub global_dial_in_countries: Vec<String>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub in_meeting: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub jbh_time: i64,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_before_host: bool,
    /**
     * Meeting settings.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language_interpretation: Option<MeetingCreateSettingsLanguageInterpretation>,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub meeting_authentication: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub mute_upon_entry: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub participant_video: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_confirmation_email: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_email_notification: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registration_type: i64,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_share_button: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub waiting_room: bool,
    /**
     * Meeting settings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub watermark: bool,
}

/// Base object for meeting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingCreate {
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub agenda: String,
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pre_schedule: bool,
    /**
     * Base object for meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<Recurrence>,
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub schedule_for: String,
    /**
     * Base object for meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<MeetingCreateSettings>,
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub template_id: String,
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Base object for meeting.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<MeetingCreateTrackingFields>,
    /**
     * Base object for meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateWebinarTrackingFields {
    /**
     * Tracking fields type
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub field: String,
    /**
     * Tracking fields value
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// Base webinar object for sessions.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateWebinar {
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub agenda: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<RecurrenceWebinar>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<CreateWebinarSettings>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Base webinar object for sessions.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<CreateWebinarTrackingFields>,
    /**
     * Base webinar object for sessions.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspGlobalDialIn {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_url: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ChannelSettings {
    /**
     * Allow members to add external users to the channel. The value can be one of the following:<br>
     *  `0`: Disable. Do not allow channel members to add external users to the channel.<br>
     *  `1`: All channel members. Allow all channel members to add external users to the channel.<br>
     *  `2`: By members in your organization. Allow only members in your organization to add external users to the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub allow_to_add_external_users: i64,
    /**
     * New members to the channel can see previous messages and files posted in the channel.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub new_members_can_see_previous_messages_files: bool,
    /**
     * Permissions for members to post to the channel. The value can be one of the following:<br>
     *  `1`: Everyone. All members can post to the channel.<br>
     *  `2`: Admin only. Only the admin can post to the channel<br>
     *  `3`: Admin and specific members. Only the admin and specified members can post to the channel. <br>
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub posting_permissions: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Properties {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel_settings: Option<ChannelSettings>,
    /**
     * The ID of the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The [Jabber Identity](https://en.wikipedia.org/wiki/JID_(Jabber)) used to access the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jid: String,
    /**
     * The channel name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Type of the channel. The value can be one of the following:<br>
     *  `1`: Private channel. Members must be invited to join the channel.<br>
     *  `2`: Private channel with members belonging to one Zoom account. All members of this channel are from the same organization and must be invited to join.<br>
     *  `3`: Public channel. Anyone can search for this channel and join the channel.<br>
     *  `4`: Instant channel. This channel is created by adding members to a new chat.<br>
     *  `5`: Public channel. Anyone can join this channel and can invite members of other accounts.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// The channel object represents a Zoom chat [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-).
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Channel {
    /**
     * The channel object represents a Zoom chat [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-).
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Properties>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CpuUsage {
    /**
     * System Maximum CPU Usage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub system_max_cpu_usage: String,
    /**
     * Zoom Average CPU Usage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zoom_avg_cpu_usage: String,
    /**
     * Zoom Maximum CPU Usage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zoom_max_cpu_usage: String,
    /**
     * Zoom Minimum CPU Usage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zoom_min_cpu_usage: String,
}

/// QoS metrics on audio being sent by a participant who joined the meeting via a Cloud Room Connector.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AudioDeviceFromCrc {
    /**
     * QoS metrics on audio being sent by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * QoS metrics on audio being sent by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * QoS metrics on audio being sent by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * QoS metrics on audio being sent by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub latency: String,
    /**
     * QoS metrics on audio being sent by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
}

/// QoS metrics on audio received by a participant who joined the meeting via a Cloud Room Connector.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AudioDeviceCrc {
    /**
     * QoS metrics on audio received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * QoS metrics on audio received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * QoS metrics on audio received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * QoS metrics on audio received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub latency: String,
    /**
     * QoS metrics on audio received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
}

/// QoS metrics on video input being sent from a Cloud Room Connector used by the participant to join the meeting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct VideoDeviceFromCrc {
    /**
     * QoS metrics on video input being sent from a Cloud Room Connector used by the participant to join the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * QoS metrics on video input being sent from a Cloud Room Connector used by the participant to join the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * QoS metrics on video input being sent from a Cloud Room Connector used by the participant to join the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * QoS metrics on video input being sent from a Cloud Room Connector used by the participant to join the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub latency: String,
    /**
     * QoS metrics on video input being sent from a Cloud Room Connector used by the participant to join the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
}

/// QoS metrics on video output received by a participant who joined the meeting via a Cloud Room Connector.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct VideoDeviceCrc {
    /**
     * QoS metrics on video output received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * QoS metrics on video output received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * QoS metrics on video output received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * QoS metrics on video output received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub latency: String,
    /**
     * QoS metrics on video output received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
}

/// QoS metrics on screen shares by a participant who joined the meeting via a Cloud Room Connector.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AsDeviceFromCrc {
    /**
     * QoS metrics on screen shares by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * QoS metrics on screen shares by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * QoS metrics on screen shares by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * QoS metrics on screen shares by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub latency: String,
    /**
     * QoS metrics on screen shares by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
}

/// QoS metrics on screen shares output being received by a participant who joined the meeting via a Cloud Room Connector.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AsDeviceCrc {
    /**
     * QoS metrics on screen shares output being received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * QoS metrics on screen shares output being received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * QoS metrics on screen shares output being received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * QoS metrics on screen shares output being received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub latency: String,
    /**
     * QoS metrics on screen shares output being received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserQos {
    /**
     * QoS metrics on screen shares by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub as_device_from_crc: Option<AsDeviceFromCrc>,
    /**
     * QoS metrics on screen shares output being received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub as_device_to_crc: Option<AsDeviceCrc>,
    /**
     * Quality of service object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub as_input: Option<AsInput>,
    /**
     * Quality of service object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub as_output: Option<AsInput>,
    /**
     * QoS metrics on audio being sent by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio_device_from_crc: Option<AudioDeviceFromCrc>,
    /**
     * QoS metrics on audio received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio_device_to_crc: Option<AudioDeviceCrc>,
    /**
     * Quality of Service object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio_input: Option<QosAudio>,
    /**
     * Quality of Service object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio_output: Option<QosAudio>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu_usage: Option<CpuUsage>,
    /**
     * Date-time of QOS
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * QoS metrics on video input being sent from a Cloud Room Connector used by the participant to join the meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub video_device_from_crc: Option<VideoDeviceFromCrc>,
    /**
     * QoS metrics on video output received by a participant who joined the meeting via a Cloud Room Connector.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub video_device_to_crc: Option<VideoDeviceCrc>,
    /**
     * Quality of service object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub video_input: Option<AsInput>,
    /**
     * Quality of service object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub video_output: Option<AsInput>,
}

/// Participant QOS.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ParticipantQos {
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device: String,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub domain: String,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub harddisk_id: String,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ip_address: String,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub join_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub leave_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_addr: String,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub pc_name: String,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * Participant QOS.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub user_qos: Vec<UserQos>,
    /**
     * Participant QOS.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub version: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountSettingsRecordingAuthenticationUpdateOptionType {
    #[serde(rename = "enforce_login")]
    EnforceLogin,
    #[serde(rename = "enforce_login_with_domains")]
    EnforceLoginWithDomains,
    #[serde(rename = "internally")]
    Internally,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AccountSettingsRecordingAuthenticationUpdateOptionType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AccountSettingsRecordingAuthenticationUpdateOptionType::EnforceLogin => "enforce_login",
            AccountSettingsRecordingAuthenticationUpdateOptionType::EnforceLoginWithDomains => {
                "enforce_login_with_domains"
            }
            AccountSettingsRecordingAuthenticationUpdateOptionType::Internally => "internally",
            AccountSettingsRecordingAuthenticationUpdateOptionType::Noop => "",
            AccountSettingsRecordingAuthenticationUpdateOptionType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AccountSettingsRecordingAuthenticationUpdateOptionType {
    fn default() -> AccountSettingsRecordingAuthenticationUpdateOptionType {
        AccountSettingsRecordingAuthenticationUpdateOptionType::Noop
    }
}
impl AccountSettingsRecordingAuthenticationUpdateOptionType {
    pub fn is_noop(&self) -> bool {
        matches!(
            self,
            AccountSettingsRecordingAuthenticationUpdateOptionType::Noop
        )
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountSettingsRecordingAuthenticationUpdateOptionAction {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "update")]
    Update,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AccountSettingsRecordingAuthenticationUpdateOptionAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AccountSettingsRecordingAuthenticationUpdateOptionAction::Add => "add",
            AccountSettingsRecordingAuthenticationUpdateOptionAction::Delete => "delete",
            AccountSettingsRecordingAuthenticationUpdateOptionAction::Update => "update",
            AccountSettingsRecordingAuthenticationUpdateOptionAction::Noop => "",
            AccountSettingsRecordingAuthenticationUpdateOptionAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AccountSettingsRecordingAuthenticationUpdateOptionAction {
    fn default() -> AccountSettingsRecordingAuthenticationUpdateOptionAction {
        AccountSettingsRecordingAuthenticationUpdateOptionAction::Noop
    }
}
impl AccountSettingsRecordingAuthenticationUpdateOptionAction {
    pub fn is_noop(&self) -> bool {
        matches!(
            self,
            AccountSettingsRecordingAuthenticationUpdateOptionAction::Noop
        )
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AuthenticationOption {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<AccountSettingsRecordingAuthenticationUpdateOptionAction>,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub default_option: bool,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub domains: String,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<AccountSettingsRecordingAuthenticationUpdateOptionType>,
}

/// Only authenticated users can view cloud recordings
/// The viewers need to authenticate prior to viewing the cloud recordings, hosts can choose one of the authentication methods when sharing a cloud recording.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountSettingsRecordingAuthenticationUpdate {
    /**
     * Only authenticated users can view cloud recordings
     *  The viewers need to authenticate prior to viewing the cloud recordings, hosts can choose one of the authentication methods when sharing a cloud recording.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication_option: Option<AuthenticationOption>,
    /**
     * Only authenticated users can view cloud recordings
     *  The viewers need to authenticate prior to viewing the cloud recordings, hosts can choose one of the authentication methods when sharing a cloud recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_authentication: bool,
}

/// Quality of Service object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct QoSPhone {
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mos: String,
    /**
     * Quality of Service object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub network_delay: String,
}

/// Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingSecuritySettingsPasswordRequirement {
    /**
     * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub consecutive_characters_length: i64,
    /**
     * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_letter: bool,
    /**
     * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_number: bool,
    /**
     * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_special_character: bool,
    /**
     * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub have_upper_and_lower_characters: bool,
    /**
     * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub length: i64,
    /**
     * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub only_allow_numeric: bool,
    /**
     * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub weak_enhance_detection: bool,
}

/// Specify the settings to be applied if waiting room is enabled.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WaitingRoomSettings {
    /**
     * Specify the settings to be applied if waiting room is enabled.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants_to_place_in_waiting_room: i64,
    /**
     * Specify the settings to be applied if waiting room is enabled.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub users_who_can_admit_participants_from_waiting_room: i64,
    /**
     * Specify the settings to be applied if waiting room is enabled.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub whitelisted_domains_for_waiting_room: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingSecurity {
    /**
     * `true`: Require that all meetings are secured with at least one security option.
     *  
     *  This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_security: bool,
    /**
     * If set to `true`, Block users in specific domains from joining meetings and webinars.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub block_user_domain: bool,
    /**
     * Specific domain, for Example: `\*.example.com`.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub block_user_domain_list: Vec<String>,
    /**
     * If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub embed_password_in_join_link: bool,
    /**
     * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be \*\*automatically disabled\*\*. <br><br>The value of this field can be one of the following:<br>
     *  `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
     *  
     *  `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also \*\*disables\*\* the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption_type: Option<EncryptionType>,
    /**
     * Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub end_to_end_encrypted_meetings: bool,
    /**
     * If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub meeting_password: bool,
    /**
     * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub meeting_password_requirement: Option<MeetingSecuritySettingsPasswordRequirement>,
    /**
     * Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub phone_password: bool,
    /**
     * If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pmi_password: bool,
    /**
     * Require a passcode for meetings which have already been scheduled.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduled_meeting: bool,
    /**
     * Require a passcode for webinars which have already been scheduled.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduled_webinar: bool,
    /**
     * When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub waiting_room: bool,
    /**
     * Specify the settings to be applied if waiting room is enabled.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub waiting_room_settings: Option<WaitingRoomSettings>,
    /**
     * If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub webinar_password: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingSecuritySettings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub meeting_security: Option<MeetingSecurity>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MetricsCustomKeys {
    /**
     * Custom key associated with the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub key: String,
    /**
     * Value of the custom key associated with the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MetricsTrackingFields {
    /**
     * Label of the tracking field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub field: String,
    /**
     * Value of the tracking field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// Meeting metric details.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Metrics {
    /**
     * Meeting metric details.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_keys: Vec<MetricsCustomKeys>,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dept: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub duration: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_3rd_party_audio: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_pstn: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_recording: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_screen_share: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_sip: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_video: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_voip: bool,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub in_room_participants: i64,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants: i64,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Meeting metric details.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<MetricsTrackingFields>,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_type: String,
    /**
     * Meeting metric details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

/**
 * The archived file's file type:
 *   * `MP4` — Video file.
 *   * `M4A` — Audio-only file.
 *   * `TRANSCRIPT` — A transcript file of the recording, in VTT file format.
 *   * `CHAT` — A TXT file containing chat messages that were sent during the meeting.
 *   * `CC` — A file containing the recording's closed captions, in VTT file format.
 *   * `CSV` — A file containing polling data in, in CSV format.
 *   
 *   For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum FileType {
    #[serde(rename = "CC")]
    Cc,
    #[serde(rename = "CHAT")]
    Chat,
    #[serde(rename = "CSV")]
    Csv,
    #[serde(rename = "M4A")]
    M4A,
    #[serde(rename = "MP4")]
    Mp4,
    #[serde(rename = "TRANSCRIPT")]
    Transcript,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for FileType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            FileType::Cc => "CC",
            FileType::Chat => "CHAT",
            FileType::Csv => "CSV",
            FileType::M4A => "M4A",
            FileType::Mp4 => "MP4",
            FileType::Transcript => "TRANSCRIPT",
            FileType::Noop => "",
            FileType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for FileType {
    fn default() -> FileType {
        FileType::Noop
    }
}
impl FileType {
    pub fn is_noop(&self) -> bool {
        matches!(self, FileType::Noop)
    }
}

/**
 * The archived file's recording type:
 *   * `shared_screen_with_speaker_view(CC)`
 *   * `shared_screen_with_speaker_view`
 *   * `shared_screen_with_gallery_view`
 *   * `speaker_view`
 *   * `gallery_view`
 *   * `shared_screen`
 *   * `audio_only`
 *   * `audio_transcript`
 *   * `chat_file`
 *   * `active_speaker`
 *   * `host_video`
 *   
 *   For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingType {
    #[serde(rename = "active_speaker")]
    ActiveSpeaker,
    #[serde(rename = "audio_only")]
    AudioOnly,
    #[serde(rename = "audio_transcript")]
    AudioTranscript,
    #[serde(rename = "chat_file")]
    ChatFile,
    #[serde(rename = "gallery_view")]
    GalleryView,
    #[serde(rename = "host_video")]
    HostVideo,
    #[serde(rename = "shared_screen")]
    SharedScreen,
    #[serde(rename = "shared_screen_with_gallery_view")]
    SharedScreenWithGalleryView,
    #[serde(rename = "shared_screen_with_speaker_view")]
    SharedScreenWithSpeakerView,
    #[serde(rename = "shared_screen_with_speaker_view(CC)")]
    SharedScreenWithSpeakerViewCc,
    #[serde(rename = "speaker_view")]
    SpeakerView,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RecordingType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RecordingType::ActiveSpeaker => "active_speaker",
            RecordingType::AudioOnly => "audio_only",
            RecordingType::AudioTranscript => "audio_transcript",
            RecordingType::ChatFile => "chat_file",
            RecordingType::GalleryView => "gallery_view",
            RecordingType::HostVideo => "host_video",
            RecordingType::SharedScreen => "shared_screen",
            RecordingType::SharedScreenWithGalleryView => "shared_screen_with_gallery_view",
            RecordingType::SharedScreenWithSpeakerView => "shared_screen_with_speaker_view",
            RecordingType::SharedScreenWithSpeakerViewCc => "shared_screen_with_speaker_view(CC)",
            RecordingType::SpeakerView => "speaker_view",
            RecordingType::Noop => "",
            RecordingType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RecordingType {
    fn default() -> RecordingType {
        RecordingType::Noop
    }
}
impl RecordingType {
    pub fn is_noop(&self) -> bool {
        matches!(self, RecordingType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ArchiveFiles {
    /**
     * The URL from which to download the archived file.
     *  
     *  To download the archived file of a meeting or a webinar hosted in your account, create a [Zoom JWT App Type](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the `access_token` query parameter and include this query parameter at the end of the URL. For example:
     *  
     *  `https://{{base-domain}}/rec/archive/download/xxx?access_token={{Your-JWT}}`
     *  
     *  If a user has authorized and installed your OAuth app that supports archiving, use the user’s [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the file. For example:
     *  
     *  `https://{{base-domain}}/rec/archive/download/xxx?access_token={{OAuth-Access-Token}}`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * The archived file's file extension.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_extension: String,
    /**
     * The archived file's file size.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub file_size: i64,
    /**
     * The archived file's file type:
     *  \* `MP4` — Video file.
     *  \* `M4A` — Audio-only file.
     *  \* `TRANSCRIPT` — A transcript file of the recording, in VTT file format.
     *  \* `CHAT` — A TXT file containing chat messages that were sent during the meeting.
     *  \* `CC` — A file containing the recording's closed captions, in VTT file format.
     *  \* `CSV` — A file containing polling data in, in CSV format.
     *  
     *  For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
     */
    #[serde(default, skip_serializing_if = "FileType::is_noop")]
    pub file_type: FileType,
    /**
     * The archived file's unique ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The archived file's recording type:
     *  \* `shared_screen_with_speaker_view(CC)`
     *  \* `shared_screen_with_speaker_view`
     *  \* `shared_screen_with_gallery_view`
     *  \* `speaker_view`
     *  \* `gallery_view`
     *  \* `shared_screen`
     *  \* `audio_only`
     *  \* `audio_transcript`
     *  \* `chat_file`
     *  \* `active_speaker`
     *  \* `host_video`
     *  
     *  For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
     */
    #[serde(default, skip_serializing_if = "RecordingType::is_noop")]
    pub recording_type: RecordingType,
    /**
     * The archived file's status.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

/// Any of the following types:
///
/// - `ArchiveFiles`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ArchiveFilesAnyOf {
    ArchiveFiles(ArchiveFiles),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CloudArchivedFiles {
    /**
     * Information about the archive files.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub archive_files: Vec<ArchiveFilesAnyOf>,
    /**
     * The meeting's duration.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * The ID of the user who was set as the meeting's host.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_id: String,
    /**
     * The meeting's ID, in long (int64) format. This is also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * The number of recording files returned in the API call response.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub recording_count: i64,
    /**
     * The meeting's start time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The meeting's timezone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * The meeting's topic.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * The total size of the archive file.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_size: i64,
    /**
     * The meeting or webinar's type:
     *  
     *  Meeting type values:
     *  \* `1` — Instant meeting.
     *  \* `2` — Scheduled meeting.
     *  \* `3` — Recurring meeting with no fixed time.
     *  \* `8` — Recurring meeting with a fixed time.
     *  
     *  Webinar type values:
     *  
     *  \* `5` — A webinar.
     *  \* `6` — Recurring webinar with no fixed time.
     *  \* `9` — Recurring webinar with a fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * The meeting's universally unique ID (UUID). Each meeting instance generates its own meeting UUID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Attendees {
    /**
     * User display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// Invite Links
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InviteLink {
    /**
     * Invite Links
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub attendees: Vec<Attendees>,
    /**
     * Invite Links
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub ttl: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InviteLinksAttendees {
    /**
     * The URL to join the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub join_url: String,
    /**
     * The user's display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// Invite links response.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InviteLinks {
    /**
     * Invite links response.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub attendees: Vec<InviteLinksAttendees>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateChannelBodyRequest {
    /**
     * A new name for the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingStatusUpdateBodyRequestAction {
    #[serde(rename = "recover")]
    Recover,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RecordingStatusUpdateBodyRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RecordingStatusUpdateBodyRequestAction::Recover => "recover",
            RecordingStatusUpdateBodyRequestAction::Noop => "",
            RecordingStatusUpdateBodyRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RecordingStatusUpdateBodyRequestAction {
    fn default() -> RecordingStatusUpdateBodyRequestAction {
        RecordingStatusUpdateBodyRequestAction::Noop
    }
}
impl RecordingStatusUpdateBodyRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, RecordingStatusUpdateBodyRequestAction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingStatusUpdateBodyRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<RecordingStatusUpdateBodyRequestAction>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UploadVbRequest {
    /**
     * Provide the file's path here.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file: String,
}

/// Specify emergency address for the account.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct EmergencyAddress {
    /**
     * Specify the street address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address_line_1: String,
    /**
     * Specify emergency address for the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address_line_2: String,
    /**
     * Specify emergency address for the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * Specify the two letter [country code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) (Alpha-2 code in ISO-3166).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Specify emergency address for the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub state_code: String,
    /**
     * Specify emergency address for the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zip: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SetUpAccountRequest {
    /**
     * Specify emergency address for the account.
     */
    #[serde()]
    pub emergency_address: EmergencyAddress,
    /**
     * Specify extension number that will be associated with the owner of the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
}

/**
 * Query response by number assignment. The value can be one of the following:
 *   <br>
 *   `assigned`: The number has been assigned to either a user, a call queue, an auto-receptionist or a common area phone in an account. <br>`unassigned`: The number is not assigned to anyone.<br>
 *   `all`: Include both assigned and unassigned numbers in the response.<br>
 *   `byoc`: Include Bring Your Own Carrier (BYOC) numbers only in the response.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListAccountPhoneNumbersType {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "assigned")]
    Assigned,
    #[serde(rename = "unassigned")]
    Unassigned,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListAccountPhoneNumbersType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListAccountPhoneNumbersType::All => "all",
            ListAccountPhoneNumbersType::Assigned => "assigned",
            ListAccountPhoneNumbersType::Unassigned => "unassigned",
            ListAccountPhoneNumbersType::Noop => "",
            ListAccountPhoneNumbersType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListAccountPhoneNumbersType {
    fn default() -> ListAccountPhoneNumbersType {
        ListAccountPhoneNumbersType::Noop
    }
}
impl ListAccountPhoneNumbersType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListAccountPhoneNumbersType::Noop)
    }
}

/**
 * The type of assignee to whom the number is assigned. The value can be one of the following:<br>
 *   `user`<br> `callQueue`<br> `autoReceptionist`<br>
 *   `commonAreaPhone`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ExtensionType {
    #[serde(rename = "autoReceptionist")]
    AutoReceptionist,
    #[serde(rename = "callQueue")]
    CallQueue,
    #[serde(rename = "commonAreaPhone")]
    CommonAreaPhone,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ExtensionType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ExtensionType::AutoReceptionist => "autoReceptionist",
            ExtensionType::CallQueue => "callQueue",
            ExtensionType::CommonAreaPhone => "commonAreaPhone",
            ExtensionType::User => "user",
            ExtensionType::Noop => "",
            ExtensionType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ExtensionType {
    fn default() -> ExtensionType {
        ExtensionType::Noop
    }
}
impl ExtensionType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ExtensionType::Noop)
    }
}

/**
 * The type of phone number. The value can be either `toll` or `tollfree`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum NumberType {
    #[serde(rename = "toll")]
    Toll,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for NumberType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            NumberType::Toll => "toll",
            NumberType::Tollfree => "tollfree",
            NumberType::Noop => "",
            NumberType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for NumberType {
    fn default() -> NumberType {
        NumberType::Noop
    }
}
impl NumberType {
    pub fn is_noop(&self) -> bool {
        matches!(self, NumberType::Noop)
    }
}

/**
 * Source of phone number.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Source {
    #[serde(rename = "external")]
    External,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Source {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Source::External => "external",
            Source::Internal => "internal",
            Source::Noop => "",
            Source::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Source {
    fn default() -> Source {
        Source::Noop
    }
}
impl Source {
    pub fn is_noop(&self) -> bool {
        matches!(self, Source::Noop)
    }
}

/**
 * Status of the number.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListAccountPhoneNumbersResponseStatus {
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListAccountPhoneNumbersResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListAccountPhoneNumbersResponseStatus::Available => "available",
            ListAccountPhoneNumbersResponseStatus::Pending => "pending",
            ListAccountPhoneNumbersResponseStatus::Noop => "",
            ListAccountPhoneNumbersResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListAccountPhoneNumbersResponseStatus {
    fn default() -> ListAccountPhoneNumbersResponseStatus {
        ListAccountPhoneNumbersResponseStatus::Noop
    }
}
impl ListAccountPhoneNumbersResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListAccountPhoneNumbersResponseStatus::Noop)
    }
}

/**
 * The type of number. Values can be one of the following:<br>
 *   `toll`, `tollfree`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListAccountPhoneNumbersResponseNumberType {
    #[serde(rename = "toll")]
    Toll,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListAccountPhoneNumbersResponseNumberType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListAccountPhoneNumbersResponseNumberType::Toll => "toll",
            ListAccountPhoneNumbersResponseNumberType::Tollfree => "tollfree",
            ListAccountPhoneNumbersResponseNumberType::Noop => "",
            ListAccountPhoneNumbersResponseNumberType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListAccountPhoneNumbersResponseNumberType {
    fn default() -> ListAccountPhoneNumbersResponseNumberType {
        ListAccountPhoneNumbersResponseNumberType::Noop
    }
}
impl ListAccountPhoneNumbersResponseNumberType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListAccountPhoneNumbersResponseNumberType::Noop)
    }
}

/**
 * Indicates who the phone number belongs to.<br>
 *   `user`: Number has been assigned to an existing phone user allowing them to receive calls through their extension number or direct phone number.<br> `callQueue`: Phone number has been assigned to a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br> `commonAreaPhone`: Phone number has been assigned to a [ provisioned common area desk phone](https://support.zoom.us/hc/en-us/articles/360021119092-Provisioning-Phones-and-Devices).
 *   `autoReceptionist`: Phone number has been assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Integrated-Voice-Response-IVR-).<br>
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListAccountPhoneNumbersResponseAssigneeType {
    #[serde(rename = "autoReceptionist")]
    AutoReceptionist,
    #[serde(rename = "callQueue")]
    CallQueue,
    #[serde(rename = "commonAreaPhone")]
    CommonAreaPhone,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListAccountPhoneNumbersResponseAssigneeType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListAccountPhoneNumbersResponseAssigneeType::AutoReceptionist => "autoReceptionist",
            ListAccountPhoneNumbersResponseAssigneeType::CallQueue => "callQueue",
            ListAccountPhoneNumbersResponseAssigneeType::CommonAreaPhone => "commonAreaPhone",
            ListAccountPhoneNumbersResponseAssigneeType::User => "user",
            ListAccountPhoneNumbersResponseAssigneeType::Noop => "",
            ListAccountPhoneNumbersResponseAssigneeType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListAccountPhoneNumbersResponseAssigneeType {
    fn default() -> ListAccountPhoneNumbersResponseAssigneeType {
        ListAccountPhoneNumbersResponseAssigneeType::Noop
    }
}
impl ListAccountPhoneNumbersResponseAssigneeType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListAccountPhoneNumbersResponseAssigneeType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Assignee {
    /**
     * Extension number of the Phone.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Unique Identifier of the user to whom the number has been assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the user to whom the number has been assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Indicates who the phone number belongs to.<br>
     *  `user`: Number has been assigned to an existing phone user allowing them to receive calls through their extension number or direct phone number.<br> `callQueue`: Phone number has been assigned to a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br> `commonAreaPhone`: Phone number has been assigned to a [ provisioned common area desk phone](https://support.zoom.us/hc/en-us/articles/360021119092-Provisioning-Phones-and-Devices).
     *  `autoReceptionist`: Phone number has been assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Integrated-Voice-Response-IVR-).<br>
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<ListAccountPhoneNumbersResponseAssigneeType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Site {
    /**
     * Target [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) in which the phone number was assigned. Sites allow you to organize the phone users in your organization. For example, you sites could be created based on different office locations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the site where the phone number is assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// Displayed when the `type` request parameter is `byoc`.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Carrier {
    /**
     * Displayed when the `type` request parameter is `byoc`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * Displayed when the `type` request parameter is `byoc`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// Displayed when the `type` request parameter is `byoc`.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SipGroup {
    /**
     * Displayed when the `type` request parameter is `byoc`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Displayed when the `type` request parameter is `byoc`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListAccountPhoneNumbersResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<Assignee>,
    /**
     * The capability for the phone number, whether it can take incoming calls, make outgoing calls, or both. Values include `incoming`, `outgoing`, or both of these values.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub capability: Vec<String>,
    /**
     * Displayed when the `type` request parameter is `byoc`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub carrier: Option<Carrier>,
    /**
     * The display name for the phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Unique Identifier of the Phone Number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Location (city, state and country) where the Phone number is assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Phone number in E164 format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * The type of number. Values can be one of the following:<br>
     *  `toll`, `tollfree`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub number_type: Option<ListAccountPhoneNumbersResponseNumberType>,
    /**
     * Displayed when the `type` request parameter is `byoc`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sip_group: Option<SipGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<Site>,
    /**
     * Source of phone number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<Source>,
    /**
     * Status of the number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListAccountPhoneNumbersResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListAccountPhoneNumbersResponseData {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<ListAccountPhoneNumbersResponse>,
    /**
     * The total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/**
 * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum TransportProtocol {
    #[serde(rename = "AUTO")]
    Auto,
    #[serde(rename = "TCP")]
    Tcp,
    #[serde(rename = "TLS")]
    Tls,
    #[serde(rename = "UDP")]
    Udp,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for TransportProtocol {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            TransportProtocol::Auto => "AUTO",
            TransportProtocol::Tcp => "TCP",
            TransportProtocol::Tls => "TLS",
            TransportProtocol::Udp => "UDP",
            TransportProtocol::Noop => "",
            TransportProtocol::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for TransportProtocol {
    fn default() -> TransportProtocol {
        TransportProtocol::Noop
    }
}
impl TransportProtocol {
    pub fn is_noop(&self) -> bool {
        matches!(self, TransportProtocol::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Phones {
    /**
     * Authorization name of the user  registered for SIP Phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authorization_name: String,
    /**
     * The name or IP address of your provider’s SIP domain.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub domain: String,
    /**
     * Unique Identifier of the SIP Phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The password generated for the user in the SIP account.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub proxy_server: String,
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub proxy_server_2: String,
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub proxy_server_3: String,
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub register_server: String,
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub register_server_2: String,
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub register_server_3: String,
    /**
     * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registration_expire_time: i64,
    /**
     * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport_protocol: Option<TransportProtocol>,
    /**
     * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport_protocol_2: Option<TransportProtocol>,
    /**
     * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport_protocol_3: Option<TransportProtocol>,
    /**
     * The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `example@example.com.mac`) to add accounts for different platforms for the same user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
    /**
     * The phone number associated with the user in the SIP account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * The number to dial for checking voicemail.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub voice_mail: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSipPhonesResponse {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of pages returned for the request made.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * The page number of the current results.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_number: i64,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * SIP phones object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phones: Vec<Phones>,
    /**
     * The total number of all the records available across pages.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateSipPhoneRequest {
    /**
     * Authorization name of the user registered for SIP Phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authorization_name: String,
    /**
     * The name or IP address of your provider’s SIP domain. (example: CDC.WEB).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub domain: String,
    /**
     * The password generated for the user in the SIP account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub proxy_server: String,
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub proxy_server_2: String,
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub proxy_server_3: String,
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub register_server: String,
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub register_server_2: String,
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub register_server_3: String,
    /**
     * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registration_expire_time: i64,
    /**
     * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport_protocol: Option<TransportProtocol>,
    /**
     * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport_protocol_2: Option<TransportProtocol>,
    /**
     * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport_protocol_3: Option<TransportProtocol>,
    /**
     * The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `example@example.com.mac`) to add accounts for different platforms for the same user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
    /**
     * The phone number associated with the user in the SIP account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * The number to dial for checking voicemail.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub voice_mail: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSipPhoneRequest {
    /**
     * Authorization name of the user  registered for SIP Phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authorization_name: String,
    /**
     * The name or IP address of your provider’s SIP domain. (example: CDC.WEB).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub domain: String,
    /**
     * The password generated for the user in the SIP account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub proxy_server: String,
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub proxy_server_2: String,
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub proxy_server_3: String,
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub register_server: String,
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub register_server_2: String,
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub register_server_3: String,
    /**
     * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registration_expire_time: i64,
    /**
     * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport_protocol: Option<TransportProtocol>,
    /**
     * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport_protocol_2: Option<TransportProtocol>,
    /**
     * Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport_protocol_3: Option<TransportProtocol>,
    /**
     * The phone number associated with the user in the SIP account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * The number to dial for checking voicemail.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub voice_mail: String,
}

/**
 * The status of the Zoom Room.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListZoomRoomsStatus {
    #[serde(rename = "Available")]
    Available,
    #[serde(rename = "InMeeting")]
    InMeeting,
    #[serde(rename = "Offline")]
    Offline,
    #[serde(rename = "UnderConstruction")]
    UnderConstruction,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListZoomRoomsStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListZoomRoomsStatus::Available => "Available",
            ListZoomRoomsStatus::InMeeting => "InMeeting",
            ListZoomRoomsStatus::Offline => "Offline",
            ListZoomRoomsStatus::UnderConstruction => "UnderConstruction",
            ListZoomRoomsStatus::Noop => "",
            ListZoomRoomsStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListZoomRoomsStatus {
    fn default() -> ListZoomRoomsStatus {
        ListZoomRoomsStatus::Noop
    }
}
impl ListZoomRoomsStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListZoomRoomsStatus::Noop)
    }
}

/**
 * Type of the Zoom Rooms.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListZoomRoomsType {
    #[serde(rename = "DigitalSignageOnly")]
    DigitalSignageOnly,
    #[serde(rename = "SchedulingDisplayOnly")]
    SchedulingDisplayOnly,
    #[serde(rename = "ZoomRoom")]
    ZoomRoom,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListZoomRoomsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListZoomRoomsType::DigitalSignageOnly => "DigitalSignageOnly",
            ListZoomRoomsType::SchedulingDisplayOnly => "SchedulingDisplayOnly",
            ListZoomRoomsType::ZoomRoom => "ZoomRoom",
            ListZoomRoomsType::Noop => "",
            ListZoomRoomsType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListZoomRoomsType {
    fn default() -> ListZoomRoomsType {
        ListZoomRoomsType::Noop
    }
}
impl ListZoomRoomsType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListZoomRoomsType::Noop)
    }
}

/**
 * Status of the Zoom Room.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListZoomRoomsResponseStatus {
    #[serde(rename = "Available")]
    Available,
    #[serde(rename = "InMeeting")]
    InMeeting,
    #[serde(rename = "Offline")]
    Offline,
    #[serde(rename = "UnderConstruction")]
    UnderConstruction,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListZoomRoomsResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListZoomRoomsResponseStatus::Available => "Available",
            ListZoomRoomsResponseStatus::InMeeting => "InMeeting",
            ListZoomRoomsResponseStatus::Offline => "Offline",
            ListZoomRoomsResponseStatus::UnderConstruction => "UnderConstruction",
            ListZoomRoomsResponseStatus::Noop => "",
            ListZoomRoomsResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListZoomRoomsResponseStatus {
    fn default() -> ListZoomRoomsResponseStatus {
        ListZoomRoomsResponseStatus::Noop
    }
}
impl ListZoomRoomsResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListZoomRoomsResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListZoomRoomsResponse {
    /**
     * Activation Code is the code that is used to complete the setup of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub activation_code: String,
    /**
     * Unique Identifier of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Unique Identifier of the [location](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) of the room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location_id: String,
    /**
     * Name of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Globally unique identifier of the Zoom Room. Use this ID for the \*\*Dashboard Zoom Room APIs\*\*.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub room_id: String,
    /**
     * Status of the Zoom Room.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListZoomRoomsResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListZoomRoomsResponseData {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * List of existing Zoom Rooms.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rooms: Vec<ListZoomRoomsResponse>,
}

/**
 * Type of the Zoom Room.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AddRoomRequestType {
    #[serde(rename = "DigitalSignageOnly")]
    DigitalSignageOnly,
    #[serde(rename = "SchedulingDisplayOnly")]
    SchedulingDisplayOnly,
    #[serde(rename = "ZoomRoom")]
    ZoomRoom,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AddRoomRequestType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AddRoomRequestType::DigitalSignageOnly => "DigitalSignageOnly",
            AddRoomRequestType::SchedulingDisplayOnly => "SchedulingDisplayOnly",
            AddRoomRequestType::ZoomRoom => "ZoomRoom",
            AddRoomRequestType::Noop => "",
            AddRoomRequestType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AddRoomRequestType {
    fn default() -> AddRoomRequestType {
        AddRoomRequestType::Noop
    }
}
impl AddRoomRequestType {
    pub fn is_noop(&self) -> bool {
        matches!(self, AddRoomRequestType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddRoomRequest {
    /**
     * \*\*Optional\*\*<br>Location ID of the lowest level location in the [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) where the Zoom Room is to be added. For instance if the structure of the location hierarchy is set up as “country, states, city, campus, building, floor”, a room can only be added under the floor level location.
     *  
     *  This ID can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location_id: String,
    /**
     * Name of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Type of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "AddRoomRequestType::is_noop",
        rename = "type"
    )]
    pub type_: AddRoomRequestType,
}

/**
 * Type of the Zoom Room.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AddRoomResponseType {
    #[serde(rename = "DigitalSignageOnly")]
    DigitalSignageOnly,
    #[serde(rename = "SchedulingDisplayOnly")]
    SchedulingDisplayOnly,
    #[serde(rename = "ZoomRoom")]
    ZoomRoom,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AddRoomResponseType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AddRoomResponseType::DigitalSignageOnly => "DigitalSignageOnly",
            AddRoomResponseType::SchedulingDisplayOnly => "SchedulingDisplayOnly",
            AddRoomResponseType::ZoomRoom => "ZoomRoom",
            AddRoomResponseType::Noop => "",
            AddRoomResponseType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AddRoomResponseType {
    fn default() -> AddRoomResponseType {
        AddRoomResponseType::Noop
    }
}
impl AddRoomResponseType {
    pub fn is_noop(&self) -> bool {
        matches!(self, AddRoomResponseType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddRoomResponse {
    /**
     * Unique Identifier of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Location ID of the location where the Zoom Room was added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location_id: String,
    /**
     * Name of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Globally unique identifier of the Zoom Room. Use this ID for the \*\*Dashboard Zoom Room APIs\*\*.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub room_id: String,
    /**
     * Type of the Zoom Room.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<AddRoomResponseType>,
}

/// Auto Receptionist for each site.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MainAutoReceptionist {
    /**
     * Auto Receptionist for each site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_id: String,
    /**
     * Auto Receptionist for each site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * Auto Receptionist for each site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Auto Receptionist for each site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// Site country
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Country {
    /**
     * Site country
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * Site country
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Sites {
    /**
     * Site country
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub country: Option<Country>,
    /**
     * Site ID. Unique Identifier of the site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Auto Receptionist for each site.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub main_auto_receptionist: Option<MainAutoReceptionist>,
    /**
     * Name of the Site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Site Code
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_code: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPhoneSitesResponse {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub page_size: String,
    /**
     * List of site(s).
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sites: Vec<Sites>,
    /**
     * Total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub total_records: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DefaultEmergencyAddress {
    /**
     * Address Line 1 of the  [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address) consisting of house number and street name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address_line_1: String,
    /**
     * Address Line 2 of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address) consisting of Building number, floor number, unit, etc.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address_line_2: String,
    /**
     * City of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * Two lettered country code (Aplha-2 code in ISO-3166) standard of the Site's [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * State Code of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub state_code: String,
    /**
     * Zip Code of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zip: String,
}

/// Short extension of the phone site.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ShortExtension {
    /**
     * Short extension of the phone site.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub length: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreatePhoneSiteRequest {
    /**
     * Display name of the [auto-receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Integrated-Voice-Response-IVR-) for the site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub auto_receptionist_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_emergency_address: Option<DefaultEmergencyAddress>,
    /**
     * Name of the Site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Short extension of the phone site.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub short_extension: Option<ShortExtension>,
    /**
     * Identifier for a site. If site code is enabled, this field is required.
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub site_code: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreatePhoneSiteResponse {
    /**
     * Site ID: Unique Identifier of a site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// [Main Auto Receptionist](https://support.zoom.us/hc/en-us/articles/360021121312#h_bc7ff1d5-0e6c-40cd-b889-62010cb98c57) for each site.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSiteResponseMainAutoReceptionist {
    /**
     * [Main Auto Receptionist](https://support.zoom.us/hc/en-us/articles/360021121312#h_bc7ff1d5-0e6c-40cd-b889-62010cb98c57) for each site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_id: String,
    /**
     * [Main Auto Receptionist](https://support.zoom.us/hc/en-us/articles/360021121312#h_bc7ff1d5-0e6c-40cd-b889-62010cb98c57) for each site.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * [Main Auto Receptionist](https://support.zoom.us/hc/en-us/articles/360021121312#h_bc7ff1d5-0e6c-40cd-b889-62010cb98c57) for each site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * [Main Auto Receptionist](https://support.zoom.us/hc/en-us/articles/360021121312#h_bc7ff1d5-0e6c-40cd-b889-62010cb98c57) for each site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// Short extension of the phone site.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSiteResponseShortExtension {
    /**
     * Short extension of the phone site.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub length: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSiteResponse {
    /**
     * Site country
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub country: Option<Country>,
    /**
     * Site ID. Unique Identifier of the site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * [Main Auto Receptionist](https://support.zoom.us/hc/en-us/articles/360021121312#h_bc7ff1d5-0e6c-40cd-b889-62010cb98c57) for each site.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub main_auto_receptionist: Option<GetSiteResponseMainAutoReceptionist>,
    /**
     * Name of the Site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Short extension of the phone site.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub short_extension: Option<GetSiteResponseShortExtension>,
    /**
     * [Site Code](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b)
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub site_code: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSiteDetailsRequest {
    /**
     * Name of the site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * [Site Code](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub site_code: i64,
}

/**
 * Presence status of the contact in Zoom Client. The value of this field can be one of the following:
 *   `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PresenceStatus {
    #[serde(rename = "Available")]
    Available,
    #[serde(rename = "Away")]
    Away,
    #[serde(rename = "Do_Not_Disturb")]
    DoNotDisturb,
    #[serde(rename = "Offline")]
    Offline,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for PresenceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            PresenceStatus::Available => "Available",
            PresenceStatus::Away => "Away",
            PresenceStatus::DoNotDisturb => "Do_Not_Disturb",
            PresenceStatus::Offline => "Offline",
            PresenceStatus::Noop => "",
            PresenceStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for PresenceStatus {
    fn default() -> PresenceStatus {
        PresenceStatus::Noop
    }
}
impl PresenceStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, PresenceStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Contacts {
    /**
     * Department of the contact as provided in the user's Zoom profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dept: String,
    /**
     * Direct Number(s) of a user who has Zoom Phone license assigned.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub direct_numbers: Vec<String>,
    /**
     * Email address of the contact.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Extension Number of a user who has Zoom Phone license assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * First name of the contact.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * User ID of the contact.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Unique Identifier of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub im_group_id: String,
    /**
     * Name of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub im_group_name: String,
    /**
     * Department of the user as provided in the user's Zoom profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub job_title: String,
    /**
     * Last name of the contact.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * Location of the user as provided in the user's Zoom profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Phone number of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * Presence status of the contact in Zoom Client. The value of this field can be one of the following:
     *  `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub presence_status: Option<PresenceStatus>,
    /**
     * SIP Phone number of the user. Returned only if user has SIP phone enabled.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_phone_number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SearchCompanyContactsResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub contacts: Vec<Contacts>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned with a single API call. Default value is `1`.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

/**
 * This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
 *   
 *   This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetChatMessagesResponseStatus {
    #[serde(rename = "Deleted")]
    Deleted,
    #[serde(rename = "Edited")]
    Edited,
    #[serde(rename = "Normal")]
    Normal,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetChatMessagesResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetChatMessagesResponseStatus::Deleted => "Deleted",
            GetChatMessagesResponseStatus::Edited => "Edited",
            GetChatMessagesResponseStatus::Normal => "Normal",
            GetChatMessagesResponseStatus::Noop => "",
            GetChatMessagesResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetChatMessagesResponseStatus {
    fn default() -> GetChatMessagesResponseStatus {
        GetChatMessagesResponseStatus::Noop
    }
}
impl GetChatMessagesResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetChatMessagesResponseStatus::Noop)
    }
}

/// The Chatbot's message, in JSON format. For more information, read the [Chatbots: Send, Edit, and Delete Messages](https://marketplace.zoom.us/docs/guides/chatbots/send-edit-and-delete-messages) documentation.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct BotMessage {}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Messages {
    /**
     * The Chatbot's message, in JSON format. For more information, read the [Chatbots: Send, Edit, and Delete Messages](https://marketplace.zoom.us/docs/guides/chatbots/send-edit-and-delete-messages) documentation.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bot_message: Option<BotMessage>,
    /**
     * The date-time at which the message was sent.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * The file's download URL.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * The file's unique ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_id: String,
    /**
     * The file's name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_name: String,
    /**
     * The file's size, in bytes.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub file_size: i64,
    /**
     * Message ID: Unique Identifier of the message.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The message content.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
    /**
     * Unique identifier of a reply. This field will only be returned if the message is a reply message.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub reply_main_message_id: String,
    /**
     * Timestamp of when the reply message was sent. This field will only be returned if the message is a reply message.
     *  
     *  The value of this field will be in \*\*long\*\* format(int64).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub reply_main_message_timestamp: i64,
    /**
     * The email address of the sender of the message.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sender: String,
    /**
     * This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
     *  
     *  This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<GetChatMessagesResponseStatus>,
    /**
     * The timestamp of the message in microseconds.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub timestamp: i64,
}

/// Chat message object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetChatMessagesResponse {
    /**
     * Chat message object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<chrono::NaiveDate>,
    /**
     * Chat message object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub messages: Vec<Messages>,
    /**
     * Chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AtItems {
    /**
     * This field is required if the value of `at_type` field is set to 1.
     *  
     *  Email address of the contact.
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub at_contact: String,
    /**
     * Type of mention. You can use one of the following values:<br>
     *  \* `1`: Mention a contact.
     *  
     *  \* `2`: Mention "all" to notify everyone in the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub at_type: i64,
    /**
     * End position of the mention.
     *  
     *  Example message: "@Shrijana How are you?"
     *  In this case, the end position of the mention "@Shrijana" is 8. Hence, the value of this field will be 8.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub end_position: i64,
    /**
     * Start position of the mention("@") in the message string.
     *  
     *  For example if you want to include the mention at the beginning of the message, the value for this field will be 0.
     *  
     *  Example message: "@Shrijana How are you?"
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub start_position: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SendaChatMessageRequest {
    /**
     * [Chat mentions](https://support.zoom.us/hc/en-us/articles/360037567431-Using-chat-mentions-and-slash-commands) object. Use this object to include mentions in the message that will be sent to  a channel.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub at_items: Vec<AtItems>,
    /**
     * The message to be sent.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
    /**
     * The Channel Id of the channel where you would like to send a message.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_channel: String,
    /**
     * The email address of the contact to whom you would like to send the message.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_contact: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SendaChatMessageResponse {
    /**
     * Message ID: Unique Identifier of the message.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MarkMessageRequest {
    /**
     * Values include <br>`read` or `unread`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub action: String,
    /**
     * The marking message's timestamp.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub timestamp: i64,
    /**
     * The Channel ID of the channel where you sent the message.<br>You must provide either a `to_contact` or `to_channel` parameter in the API request.
     *   You can retrieve the Channel ID using the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_channel: String,
    /**
     * The email address of the contact to whom the message was sent.<br>
     *  You must provide either a `to_contact` or `to_channel` parameter in the API request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_contact: String,
}

/**
 * The action to perform with the message:
 *   * `add` — Add an emoji reaction.
 *   * `remove` — Remove an emoji reaction.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReactMessageRequestAction {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ReactMessageRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ReactMessageRequestAction::Add => "add",
            ReactMessageRequestAction::Remove => "remove",
            ReactMessageRequestAction::Noop => "",
            ReactMessageRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ReactMessageRequestAction {
    fn default() -> ReactMessageRequestAction {
        ReactMessageRequestAction::Noop
    }
}
impl ReactMessageRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, ReactMessageRequestAction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReactMessageRequest {
    /**
     * The action to perform with the message:
     *  \* `add` — Add an emoji reaction.
     *  \* `remove` — Remove an emoji reaction.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<ReactMessageRequestAction>,
    /**
     * The emoji's unicode value, in `UTF-32` format. For more information, read the [Emojipedia](https://emojipedia.org/emoji-modifier-sequence/) documentation.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub emoji: String,
    /**
     * The channel's ID where you sent the message. You must provide either the `to_contact` or the `to_channel` parameter in the API request.
     *  
     *  To get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_channel: String,
    /**
     * The email address of the contact to whom the message was sent. You must provide either the `to_contact` or the `to_channel` parameter in the API request.
     *  
     *  To get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_contact: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Reactions {
    /**
     * The emoji's Unicode value, in `UTF-32` format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub emoji: String,
    /**
     * The emoji's total usage count.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_count: i64,
}

/// A chat message object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetChatMessageResponse {
    /**
     * A chat message object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bot_message: Option<BotMessage>,
    /**
     * A chat message object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_id: String,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_name: String,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub file_size: i64,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
    /**
     * A chat message object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub reactions: Vec<Reactions>,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub reply_main_message_id: String,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub reply_main_message_timestamp: i64,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sender: String,
    /**
     * A chat message object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub timestamp: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct EditMessageRequest {
    /**
     * The edited message.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
    /**
     * The Channel ID of the channel where you sent the message.<br>You must provide either `to_contact` or `to_channel` parameter in the API request.
     *   Channel ID can be retrieved from List User's Channels API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_channel: String,
    /**
     * The email address of the contact to whom the message was sent.<br>
     *  You must provide either `to_contact` or `to_channel` parameter in the API request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_contact: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ChannelsSettings {
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub allow_to_add_external_users: i64,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub new_members_can_see_previous_messages_files: bool,
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub posting_permissions: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Channels {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channels_settings: Option<ChannelsSettings>,
    /**
     * Channel ID: Unique identifier of the Channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Type of the channel. The value can be one of the following:<br>
     *  `1`: \*\*Private channel.\*\* In this type of channel, members must be invited to join a channel.<br>
     *  `2`: \*\*Private channel with users that belong to the same Zoom account\*\*. Members in this channel should be invited and the members should be from the same organization.<br>
     *  `3`: \*\*Public channel.\*\* Anyone can search for this channel and join the channel. External members cannot be invited.<br>
     *  `4`: \*\*New chat\*\*. This is an instant channel which can be created by adding members to a new chat.<br>
     *  `5`: \*\*Public channel\*\*, similar to above, except members can invite members of other accounts.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetChannelsResponse {
    /**
     * Chat Channel object(s).
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub channels: Vec<Channels>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned with a single API call.
     *  Default value: 30.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The total number of records found.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Members {
    /**
     * Member's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateChannelRequest {
    /**
     * Member(s) to include in the channel. A max of 5 members can be added to the channel at once with this API.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<Members>,
    /**
     * Name of the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Type of the channel. The value can be one of the following:<br>
     *  `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
     *  `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
     *  `3`: Public channel. Anyone can search for this channel and join the channel.<br>
     *  `4`: New chat. This is an instant channel which can be created by adding members to a new chat.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateChannelResponse {
    /**
     * Channel ID: Unique Identifier of the Channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Channel JID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jid: String,
    /**
     * Channel name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Channel type.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetUserContactsResponse {
    /**
     * Contact's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contact's first name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * Contact Id.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Contact's last name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetUserContactsResponseData {
    /**
     * The contacts object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub contacts: Vec<GetUserContactsResponse>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned with a single API call.
     *  Default value: 30.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

/**
 * Contact's Presence Status in the Zoom Chat Client. The status can be one of the following: <br> `Do_Not_Disturb`<br> `Away`<br> `Available`<br> `Offline`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetUserContactResponsePresenceStatus {
    #[serde(rename = "Available")]
    Available,
    #[serde(rename = "Away")]
    Away,
    #[serde(rename = "Do_Not_Disturb")]
    DoNotDisturb,
    #[serde(rename = "Offline")]
    Offline,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetUserContactResponsePresenceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetUserContactResponsePresenceStatus::Available => "Available",
            GetUserContactResponsePresenceStatus::Away => "Away",
            GetUserContactResponsePresenceStatus::DoNotDisturb => "Do_Not_Disturb",
            GetUserContactResponsePresenceStatus::Offline => "Offline",
            GetUserContactResponsePresenceStatus::Noop => "",
            GetUserContactResponsePresenceStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetUserContactResponsePresenceStatus {
    fn default() -> GetUserContactResponsePresenceStatus {
        GetUserContactResponsePresenceStatus::Noop
    }
}
impl GetUserContactResponsePresenceStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetUserContactResponsePresenceStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetUserContactResponse {
    /**
     * Direct number(s) assigned to the contact.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub direct_numbers: Vec<String>,
    /**
     * Contact's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Extension number of the contact.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * Contact's first name
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * User ID of the contact.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Contact's last name
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * Phone number of the contact.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * Contact's Presence Status in the Zoom Chat Client. The status can be one of the following: <br> `Do_Not_Disturb`<br> `Away`<br> `Available`<br> `Offline`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub presence_status: Option<GetUserContactResponsePresenceStatus>,
}

/**
 * The role of the member. The value can be one of these: `owner`, `admin`, `member`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Role {
    #[serde(rename = "admin")]
    Admin,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "owner")]
    Owner,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Role {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Role::Admin => "admin",
            Role::Member => "member",
            Role::Owner => "owner",
            Role::Noop => "",
            Role::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Role {
    fn default() -> Role {
        Role::Noop
    }
}
impl Role {
    pub fn is_noop(&self) -> bool {
        matches!(self, Role::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListChannelMembersResponse {
    /**
     * Email address of the member.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Member's first name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * Member ID: Unique Identifier of the member.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Member's last name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * The user's display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The role of the member. The value can be one of these: `owner`, `admin`, `member`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListChannelMembersResponseData {
    /**
     * Members in a channel.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<ListChannelMembersResponse>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned with a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InviteChannelMembersRequest {
    /**
     * Email address of the member.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InviteChannelMembersRequestData {
    /**
     * Members of a channel. You can invite up to a max number of 5 members with a single API call.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<InviteChannelMembersRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InviteChannelMembersResponse {
    /**
     * The date and time at which the member(s) are added to the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub added_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Member Ids of the members.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub ids: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct JoinChannelResponse {
    /**
     * The date and time at which a user joined the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub added_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Member Id of the user who joined the public channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// The account object represents an account on Zoom. The account owner is the user who created the account or had an account created for them. You can read more about the Zoom account structure <a href='https://medium.com/zoom-developer-blog/a-brief-look-at-zoom-account-structures-1d19c745bf8a' target='_blank'>here</a>.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountCreateRequest {
    /**
     * The account object represents an account on Zoom. The account owner is the user who created the account or had an account created for them. You can read more about the Zoom account structure <a href='https://medium.com/zoom-developer-blog/a-brief-look-at-zoom-account-structures-1d19c745bf8a' target='_blank'>here</a>.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_name: String,
    /**
     * User's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User's first name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * User's last name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * The account object represents an account on Zoom. The account owner is the user who created the account or had an account created for them. You can read more about the Zoom account structure <a href='https://medium.com/zoom-developer-blog/a-brief-look-at-zoom-account-structures-1d19c745bf8a' target='_blank'>here</a>.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Options>,
    /**
     * User's password.
     *  
     *  \*\*Note:\*\* If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountCreateResponse {
    /**
     * Account created date time.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created_at: String,
    /**
     * Account ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Account owner email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub owner_email: String,
    /**
     * Account owner ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub owner_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountResponse {
    /**
     * Account creation date and time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Account ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Account options object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Options>,
    /**
     * Account owner email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub owner_email: String,
    /**
     * Account owner ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub owner_id: String,
    /**
     * Account Vanity URL
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub vanity_url: String,
}

/**
 * Use the following options to filter the results of the account's information:
 *   * `meeting_authentication` — View the account's [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars).
 *   * `recording_authentication` — View the account's [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings).
 *   * `security` — View the account's security settings. For example, password requirements for user login or two-factor authentication.<br>
 *   * `meeting_security` — View the account's meeting security settings.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum OptionData {
    #[serde(rename = "meeting_authentication")]
    MeetingAuthentication,
    #[serde(rename = "recording_authentication")]
    RecordingAuthentication,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for OptionData {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            OptionData::MeetingAuthentication => "meeting_authentication",
            OptionData::RecordingAuthentication => "recording_authentication",
            OptionData::Noop => "",
            OptionData::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for OptionData {
    fn default() -> OptionData {
        OptionData::Noop
    }
}
impl OptionData {
    pub fn is_noop(&self) -> bool {
        matches!(self, OptionData::Noop)
    }
}

/// One of the following types:
///
/// - `AccountSettings`
/// - `Domains`
/// - `Security`
/// - `MeetingSecuritySettings`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountSettingsResponseOneOf {
    AccountSettings(AccountSettings),
    Domains(Domains),
    MeetingSecuritySettings(MeetingSecuritySettings),
    /**
     * [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
     */
    Security(Security),
}

/// One of the following types:
///
/// - `UpdateAccountSettings`
/// - `Domains`
/// - `MeetingSecuritySettings`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountSettingsUpdateRequestOneOf {
    Domains(Domains),
    MeetingSecuritySettings(MeetingSecuritySettings),
    UpdateAccountSettings(UpdateAccountSettings),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountSettingsUpdateOption {
    #[serde(rename = "meeting_authentication")]
    MeetingAuthentication,
    #[serde(rename = "meeting_security")]
    MeetingSecurity,
    #[serde(rename = "recording_authentication")]
    RecordingAuthentication,
    #[serde(rename = "security")]
    Security,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AccountSettingsUpdateOption {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AccountSettingsUpdateOption::MeetingAuthentication => "meeting_authentication",
            AccountSettingsUpdateOption::MeetingSecurity => "meeting_security",
            AccountSettingsUpdateOption::RecordingAuthentication => "recording_authentication",
            AccountSettingsUpdateOption::Security => "security",
            AccountSettingsUpdateOption::Noop => "",
            AccountSettingsUpdateOption::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AccountSettingsUpdateOption {
    fn default() -> AccountSettingsUpdateOption {
        AccountSettingsUpdateOption::Noop
    }
}
impl AccountSettingsUpdateOption {
    pub fn is_noop(&self) -> bool {
        matches!(self, AccountSettingsUpdateOption::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountTrustedDomainResponse {
    /**
     * List of trusted domains
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub trusted_domains: Vec<String>,
}

/**
 * Status of the plan.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountPlansResponsePlanBaseStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "cancel")]
    Cancel,
    #[serde(rename = "expired")]
    Expired,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AccountPlansResponsePlanBaseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AccountPlansResponsePlanBaseStatus::Active => "active",
            AccountPlansResponsePlanBaseStatus::Cancel => "cancel",
            AccountPlansResponsePlanBaseStatus::Expired => "expired",
            AccountPlansResponsePlanBaseStatus::Noop => "",
            AccountPlansResponsePlanBaseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AccountPlansResponsePlanBaseStatus {
    fn default() -> AccountPlansResponsePlanBaseStatus {
        AccountPlansResponsePlanBaseStatus::Noop
    }
}
impl AccountPlansResponsePlanBaseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, AccountPlansResponsePlanBaseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlansResponsePlanBase {
    /**
     * Account base plan number of hosts. For a Pro Plan please select a value between 1 and 9. For a Business Plan please select a value between 10 and 49. For a Education Plan please select a value between 20 and 149. For a Free Trial Plan please select a value between 1 and 9999.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Next invoice date for the plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub next_invoice_date: Option<chrono::NaiveDate>,
    /**
     * Date at which the plan became effective on the account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_effective_date: Option<chrono::NaiveDate>,
    /**
     * Status of the plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<AccountPlansResponsePlanBaseStatus>,
    /**
     * Account base <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PlanZoomRooms {
    /**
     * Account plan number of hosts.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Next invoice date for the plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub next_invoice_date: Option<chrono::NaiveDate>,
    /**
     * Date at which the plan became effective on the account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_effective_date: Option<chrono::NaiveDate>,
    /**
     * Status of the plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<AccountPlansResponsePlanBaseStatus>,
    /**
     * Account <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Account plan object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PlanWebinar {
    /**
     * Account plan object.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Account plan object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub next_invoice_date: Option<chrono::NaiveDate>,
    /**
     * Account plan object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_effective_date: Option<chrono::NaiveDate>,
    /**
     * Account plan object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<AccountPlansResponsePlanBaseStatus>,
    /**
     * Account plan object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/**
 * Status of additional Cloud Recording plan.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PlanRecordingStatus {
    #[serde(rename = "Active")]
    Active,
    #[serde(rename = "Cancelled")]
    Cancelled,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for PlanRecordingStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            PlanRecordingStatus::Active => "Active",
            PlanRecordingStatus::Cancelled => "Cancelled",
            PlanRecordingStatus::Noop => "",
            PlanRecordingStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for PlanRecordingStatus {
    fn default() -> PlanRecordingStatus {
        PlanRecordingStatus::Noop
    }
}
impl PlanRecordingStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, PlanRecordingStatus::Noop)
    }
}

/// Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlansResponsePlanAudio {
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callout_countries: String,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub ddi_numbers: i64,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub next_invoice_date: Option<chrono::NaiveDate>,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub premium_countries: String,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_effective_date: Option<chrono::NaiveDate>,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<AccountPlansResponsePlanBaseStatus>,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tollfree_countries: String,
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Additional phone base plans.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlansResponsePlanPhoneBase {
    /**
     * Additional phone base plans.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callout_countries: String,
    /**
     * Additional phone base plans.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub next_invoice_date: Option<chrono::NaiveDate>,
    /**
     * Additional phone base plans.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_effective_date: Option<chrono::NaiveDate>,
    /**
     * Additional phone base plans.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<AccountPlansResponsePlanBaseStatus>,
    /**
     * Additional phone base plans.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlansResponsePlanPhoneCalling {
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Next invoice date for the plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub next_invoice_date: Option<chrono::NaiveDate>,
    /**
     * Date at which the plan became effective on the account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_effective_date: Option<chrono::NaiveDate>,
    /**
     * Status of the plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<AccountPlansResponsePlanBaseStatus>,
    /**
     * Additional phone calling <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#additional-zoom-phone-plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlansResponsePlanPhoneNumber {
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Next invoice date for the plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub next_invoice_date: Option<chrono::NaiveDate>,
    /**
     * Date at which the plan became effective on the account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_effective_date: Option<chrono::NaiveDate>,
    /**
     * Status of the plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<AccountPlansResponsePlanBaseStatus>,
    /**
     * Additional phone number <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#additional-zoom-phone-plans">plan type.</a>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Phone Plan Object
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PlanPhone {
    /**
     * Phone Plan Object
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_base: Option<AccountPlansResponsePlanPhoneBase>,
    /**
     * Phone Plan Object
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_calling: Vec<AccountPlansResponsePlanPhoneCalling>,
    /**
     * Phone Plan Object
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_number: Vec<AccountPlansResponsePlanPhoneNumber>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlansResponse {
    /**
     * Additional audio conferencing <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#audio-conferencing-plans">plan type.</a>
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_audio: Option<AccountPlansResponsePlanAudio>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_base: Option<AccountPlansResponsePlanBase>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_large_meeting: Vec<PlanWebinar>,
    /**
     * Phone Plan Object
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_phone: Option<PlanPhone>,
    /**
     * Additional Cloud Recording plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub plan_recording: String,
    /**
     * Next invoice date of Additional Cloud Recording plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_recording_next_invoice_date: Option<chrono::NaiveDate>,
    /**
     * Plan start date of Additional Cloud Recording plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_recording_service_effective_date: Option<chrono::NaiveDate>,
    /**
     * Status of additional Cloud Recording plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_recording_status: Option<PlanRecordingStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_room_connector: Option<PlanZoomRooms>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_webinar: Vec<PlanWebinar>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_zoom_rooms: Option<PlanZoomRooms>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlanCreateRequest {
    /**
     * Billing Contact object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contact: Option<Contact>,
}

/// All of the following types:
///
/// - `AccountPlanCreateRequest`
/// - `AccountPlans`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountPlanCreateRequestAllOf {
    AccountPlanCreateRequest(AccountPlanCreateRequest),
    /**
     * Account Plans object.
     */
    AccountPlans(AccountPlans),
}

/// Zoom Phone Plan Object
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlanAddonCreateRequest {
    /**
     * Phone Plan Object
     */
    #[serde()]
    pub plan_details: PhonePlan,
    /**
     * Zoom Phone Plan `plan_phone`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// One of the following types:
///
/// - `AccountPlanRequired`
/// - `AccountPlanAddonCreateRequest`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountPlanAddonCreateRequestOneOf {
    /**
     * Zoom Phone Plan Object
     */
    AccountPlanAddonCreateRequest(AccountPlanAddonCreateRequest),
    /**
     * Account plan object.
     */
    AccountPlanRequired(AccountPlanRequired),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupCreateRequest {
    /**
     * Group name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupCreateResponse {
    /**
     * Group ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Group name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Group member count.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_members: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupResponse {
    /**
     * Group ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Group name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Total count of members in the group.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_members: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupUpdateRequest {
    /**
     * Group name. It must be unique to one account and less than 128 characters.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupMembersResponse {
    /**
     * User's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * First name of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * Unique Identifier of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Last name of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * User type: <br> `1` - Basic<br> `2` - Licensed<br> `3` - On-prem
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupMembersResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<GroupMembersResponse>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of pages returned from this request.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * The page number of the current results.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_number: i64,
    /**
     * The number of records returned from a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The total number of records available across all pages.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupMembersCreateRequest {
    /**
     * User email. If the user ID is given then the user email should be ignored.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupMembersCreateRequestData {
    /**
     * List of Group members
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<GroupMembersCreateRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupMembersCreateResponse {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub added_at: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ids: String,
}

/**
 * The action to perform:
 *   * `move` — Remove the group member from one group and move them to a different group.
 *   * `set_primary` — Set the user's primary group.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UpdateGroupMemberRequestAction {
    #[serde(rename = "move")]
    Move,
    #[serde(rename = "set_primary")]
    SetPrimary,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UpdateGroupMemberRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UpdateGroupMemberRequestAction::Move => "move",
            UpdateGroupMemberRequestAction::SetPrimary => "set_primary",
            UpdateGroupMemberRequestAction::Noop => "",
            UpdateGroupMemberRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UpdateGroupMemberRequestAction {
    fn default() -> UpdateGroupMemberRequestAction {
        UpdateGroupMemberRequestAction::Noop
    }
}
impl UpdateGroupMemberRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, UpdateGroupMemberRequestAction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateGroupMemberRequest {
    /**
     * The action to perform:
     *  \* `move` — Remove the group member from one group and move them to a different group.
     *  \* `set_primary` — Set the user's primary group.
     */
    #[serde(
        default,
        skip_serializing_if = "UpdateGroupMemberRequestAction::is_noop"
    )]
    pub action: UpdateGroupMemberRequestAction,
    /**
     * The target group's ID. To get this value, use the [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API.
     *  \* To set a user's primary group, use the designated primary group's `groupId` value.
     *  \* To move a group member from one group to another, use the `groupId` of the designated group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub target_group_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DeviceCreateResponse {
    /**
     * Device ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// All of the following types:
///
/// - `DeviceCreateResponse`
/// - `Device`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DeviceCreateResponseAllOf {
    /**
     * The H.323/SIP device object.
     */
    Device(Device),
    DeviceCreateResponse(DeviceCreateResponse),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TrackingfieldGetResponse {
    /**
     * Tracking Field ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// All of the following types:
///
/// - `TrackingfieldCreateResponse`
/// - `TrackingField`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum TrackingfieldCreateResponseAllOf {
    /**
     * Tracking Field
     */
    TrackingField(TrackingField),
    TrackingfieldCreateResponse(TrackingfieldCreateResponse),
}

/// All of the following types:
///
/// - `TrackingfieldGetResponse`
/// - `TrackingField`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum TrackingfieldGetResponseAllOf {
    /**
     * Tracking Field
     */
    TrackingField(TrackingField),
    TrackingfieldGetResponse(TrackingfieldGetResponse),
}

/**
 * IM Group types:<br>`normal` - Only members can see automatically see the other members of this group. Other people can search for members within this group. <br>`shared` - Everyone under an account can see the group members automatically.<br>`restricted` - Nobody can see the group or search for members except the members in the group.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ImGroupCreateRequestType {
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "restricted")]
    Restricted,
    #[serde(rename = "shared")]
    Shared,
    FallthroughString(String),
}

impl std::fmt::Display for ImGroupCreateRequestType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ImGroupCreateRequestType::Normal => "normal",
            ImGroupCreateRequestType::Restricted => "restricted",
            ImGroupCreateRequestType::Shared => "shared",
            ImGroupCreateRequestType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ImGroupCreateRequestType {
    fn default() -> ImGroupCreateRequestType {
        ImGroupCreateRequestType::Normal
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImGroupCreateRequest {
    /**
     * Group name: must be unique to one account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Members can search for others under same account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search_by_account: Option<bool>,
    /**
     * Members can search for others in the same email domain.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search_by_domain: Option<bool>,
    /**
     * Members can search for others under same master account, including all sub accounts.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search_by_ma_account: Option<bool>,
    /**
     * IM Group types:<br>`normal` - Only members can see automatically see the other members of this group. Other people can search for members within this group. <br>`shared` - Everyone under an account can see the group members automatically.<br>`restricted` - Nobody can see the group or search for members except the members in the group.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<ImGroupCreateRequestType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImGroupCreateResponse {
    /**
     * Group ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Group name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Members can search for others under same account.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub search_by_account: bool,
    /**
     * Members can search for others in the same email domain.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub search_by_domain: bool,
    /**
     * Members can search for others under same master account, including all sub accounts.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub search_by_ma_account: bool,
    /**
     * Group member count.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_members: i64,
}

/// All of the following types:
///
/// - `Groups`
/// - `ImGroup`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ImGroupResponseAllOf {
    Groups(Groups),
    /**
     * IM group object.
     */
    ImGroup(ImGroup),
}

/**
 * IM Group types:<br>`normal` - Only group members can automatically see others in their group. Other people can search for members in the group.<br>`shared` - Everyone under the account can see the group and members automatically.<br>`restricted` - Nobody can see the group or search for members except for the members in the group.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ImGroupUpdateRequestType {
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "restricted")]
    Restricted,
    #[serde(rename = "shared")]
    Shared,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ImGroupUpdateRequestType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ImGroupUpdateRequestType::Normal => "normal",
            ImGroupUpdateRequestType::Restricted => "restricted",
            ImGroupUpdateRequestType::Shared => "shared",
            ImGroupUpdateRequestType::Noop => "",
            ImGroupUpdateRequestType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ImGroupUpdateRequestType {
    fn default() -> ImGroupUpdateRequestType {
        ImGroupUpdateRequestType::Noop
    }
}
impl ImGroupUpdateRequestType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ImGroupUpdateRequestType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImGroupUpdateRequest {
    /**
     * Group name: must be unique to one account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Members can search for others under same account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search_by_account: Option<bool>,
    /**
     * Members can search for others in the same email domain.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search_by_domain: Option<bool>,
    /**
     * Members can search for others under same master account, including all sub accounts.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search_by_ma_account: Option<bool>,
    /**
     * IM Group types:<br>`normal` - Only group members can automatically see others in their group. Other people can search for members in the group.<br>`shared` - Everyone under the account can see the group and members automatically.<br>`restricted` - Nobody can see the group or search for members except for the members in the group.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<ImGroupUpdateRequestType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImGroupMembersCreateRequest {
    /**
     * User email. If the user ID is given then ignore the user email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImGroupMembersCreateRequestData {
    /**
     * List of IM group members.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<ImGroupMembersCreateRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImChatSessionsResponse {
    /**
     * Start date.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * End date.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
}

/**
 * IM chat session type.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ImChatSessionsResponseType {
    #[serde(rename = "1:1")]
    One,
    #[serde(rename = "Group")]
    Group,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ImChatSessionsResponseType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ImChatSessionsResponseType::One => "1:1",
            ImChatSessionsResponseType::Group => "Group",
            ImChatSessionsResponseType::Noop => "",
            ImChatSessionsResponseType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ImChatSessionsResponseType {
    fn default() -> ImChatSessionsResponseType {
        ImChatSessionsResponseType::Noop
    }
}
impl ImChatSessionsResponseType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ImChatSessionsResponseType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Sessions {
    /**
     * Last message sent time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub last_message_sent_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting topic.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * IM chat session ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub session_id: String,
    /**
     * IM chat session type.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<ImChatSessionsResponseType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImChatSessionsResponseData {
    /**
     * Array of session objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sessions: Vec<Sessions>,
}

/// All of the following types:
///
/// - `ImChatSessionsResponse`
/// - `PaginationToken4ImChat`
/// - `ImChatSessionsResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ImChatSessionsResponseAllOf {
    ImChatSessionsResponse(ImChatSessionsResponse),
    ImChatSessionsResponseData(ImChatSessionsResponseData),
    /**
     * Pagination object.
     */
    PaginationToken4ImChat(PaginationToken4ImChat),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImChatMessagesResponse {
    /**
     * Start date.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * IM chat session ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub session_id: String,
    /**
     * End date.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImChatMessagesResponseData {
    /**
     * IM chat message action.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub action: String,
    /**
     * Action time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub action_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * IM chat message sent time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * IM chat message content.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
    /**
     * IM chat message sender.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sender: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ImChatMessagesResponseDataType {
    /**
     * Array of session objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub messages: Vec<ImChatMessagesResponseData>,
}

/// All of the following types:
///
/// - `ImChatMessagesResponse`
/// - `PaginationToken4ImChat`
/// - `ImChatMessagesResponseDataType`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ImChatMessagesResponseAllOf {
    ImChatMessagesResponse(ImChatMessagesResponse),
    ImChatMessagesResponseDataType(ImChatMessagesResponseDataType),
    /**
     * Pagination object.
     */
    PaginationToken4ImChat(PaginationToken4ImChat),
}

/**
 * The meeting types: <br>`scheduled` - This includes all valid past meetings (unexpired), live meetings and upcoming scheduled meetings. It is equivalent to the combined list of "Previous Meetings" and "Upcoming Meetings" displayed in the user's [Meetings page](https://zoom.us/meeting) on the Zoom Web Portal.<br>`live` - All the ongoing meetings.<br>`upcoming` - All upcoming meetings including live meetings.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingsType {
    #[serde(rename = "live")]
    Live,
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "upcoming")]
    Upcoming,
    FallthroughString(String),
}

impl std::fmt::Display for MeetingsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            MeetingsType::Live => "live",
            MeetingsType::Scheduled => "scheduled",
            MeetingsType::Upcoming => "upcoming",
            MeetingsType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for MeetingsType {
    fn default() -> MeetingsType {
        MeetingsType::Live
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingCreateResponse {
    /**
     * Unique identifier of the scheduler who scheduled this meeting on behalf of the host. This field is only returned if you used "schedule_for" option in the [Create a Meeting API request](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub assistant_id: String,
    /**
     * Email address of the meeting host.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_email: String,
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * URL using which registrants can register for a meeting. This field is only returned for meetings that have enabled registration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub registration_url: String,
}

/// All of the following types:
///
/// - `MeetingCreateResponse`
/// - `MeetingInfo`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingCreateResponseAllOf {
    MeetingCreateResponse(MeetingCreateResponse),
    /**
     * Meeting object
     */
    MeetingInfo(MeetingInfo),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingResponse {
    /**
     * Unique identifier of the scheduler who scheduled this meeting on behalf of the host. This field is only returned if you used "schedule_for" option in the [Create a Meeting API request](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub assistant_id: String,
    /**
     * Email address of the meeting host.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_email: String,
    /**
     * ID of the user who is set as host of meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_id: String,
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Unique meeting ID. Each meeting instance will generate its own Meeting UUID (i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). You can retrieve a list of UUIDs from past meeting instances using [this API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/pastmeetings) . Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

/// All of the following types:
///
/// - `MeetingResponse`
/// - `MeetingInfoGet`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingResponseAllOf {
    /**
     * Meeting object.
     */
    MeetingInfoGet(MeetingInfoGet),
    MeetingResponse(MeetingResponse),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingUpdateRequest {
    /**
     * Email or userId if you want to schedule meeting for another user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub schedule_for: String,
}

/// All of the following types:
///
/// - `MeetingUpdateRequest`
/// - `MeetingUpdate`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingUpdateRequestAllOf {
    /**
     * Meeting object
     */
    MeetingUpdate(MeetingUpdate),
    MeetingUpdateRequest(MeetingUpdateRequest),
}

/**
 * `end` - End a meeting.<br>
 *   `recover` - [Recover](https://support.zoom.us/hc/en-us/articles/360038297111-Recover-a-deleted-meeting) a deleted meeting.
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingStatusRequestAction {
    #[serde(rename = "end")]
    End,
    #[serde(rename = "recover")]
    Recover,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for MeetingStatusRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            MeetingStatusRequestAction::End => "end",
            MeetingStatusRequestAction::Recover => "recover",
            MeetingStatusRequestAction::Noop => "",
            MeetingStatusRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for MeetingStatusRequestAction {
    fn default() -> MeetingStatusRequestAction {
        MeetingStatusRequestAction::Noop
    }
}
impl MeetingStatusRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, MeetingStatusRequestAction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingStatusRequest {
    /**
     * `end` - End a meeting.<br>
     *  `recover` - [Recover](https://support.zoom.us/hc/en-us/articles/360038297111-Recover-a-deleted-meeting) a deleted meeting.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<MeetingStatusRequestAction>,
}

/**
 * The registrant status:<br>`pending` - Registrant's status is pending.<br>`approved` - Registrant's status is approved.<br>`denied` - Registrant's status is denied.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingRegistrantsStatus {
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "denied")]
    Denied,
    #[serde(rename = "pending")]
    Pending,
    FallthroughString(String),
}

impl std::fmt::Display for MeetingRegistrantsStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            MeetingRegistrantsStatus::Approved => "approved",
            MeetingRegistrantsStatus::Denied => "denied",
            MeetingRegistrantsStatus::Pending => "pending",
            MeetingRegistrantsStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for MeetingRegistrantsStatus {
    fn default() -> MeetingRegistrantsStatus {
        MeetingRegistrantsStatus::Approved
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingRegistrantCreateResponse {
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Unique URL for this registrant to join the meeting. This URL should only be shared with the registrant for whom the API request was made.
     *  If the meeting was [created](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate) with manual approval type (`approval_type`: 1), the join URL will not be returned in the response.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub join_url: String,
    /**
     * Unique identifier of the registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub registrant_id: String,
    /**
     * The start time for the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub start_time: String,
    /**
     * Topic of the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PastMeetingDetailsResponse {
    /**
     * Meeting duration.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Meeting end time (GMT).
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Host ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_id: String,
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Number of meeting participants.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants_count: i64,
    /**
     * Meeting start time (GMT).
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting topic.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Sum of meeting minutes from all participants in the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_minutes: i64,
    /**
     * Meeting type.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * User email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
    /**
     * User display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * Meeting UUID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Participants {
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Participant display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Email address of the user. This field will be returned if the user logged into Zoom to join the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PastMeetingParticipantsResponse {
    /**
     * Array of meeting participant objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<Participants>,
}

/// All of the following types:
///
/// - `PaginationToken`
/// - `PastMeetingParticipantsResponse`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PastMeetingParticipantsResponseAllOf {
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
    PastMeetingParticipantsResponse(PastMeetingParticipantsResponse),
}

/// All of the following types:
///
/// - `Poll`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingPollCreateRequestAllOf {
    /**
     * Poll
     */
    Poll(Poll),
}

/**
 * Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingPollCreateResponseStatus {
    #[serde(rename = "ended")]
    Ended,
    #[serde(rename = "notstart")]
    Notstart,
    #[serde(rename = "sharing")]
    Sharing,
    #[serde(rename = "started")]
    Started,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for MeetingPollCreateResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            MeetingPollCreateResponseStatus::Ended => "ended",
            MeetingPollCreateResponseStatus::Notstart => "notstart",
            MeetingPollCreateResponseStatus::Sharing => "sharing",
            MeetingPollCreateResponseStatus::Started => "started",
            MeetingPollCreateResponseStatus::Noop => "",
            MeetingPollCreateResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for MeetingPollCreateResponseStatus {
    fn default() -> MeetingPollCreateResponseStatus {
        MeetingPollCreateResponseStatus::Noop
    }
}
impl MeetingPollCreateResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, MeetingPollCreateResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingPollGetResponse {
    /**
     * Meeting Poll ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<MeetingPollCreateResponseStatus>,
}

/// All of the following types:
///
/// - `MeetingPollCreateResponse`
/// - `Poll`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingPollCreateResponseAllOf {
    MeetingPollCreateResponse(MeetingPollCreateResponse),
    /**
     * Poll
     */
    Poll(Poll),
}

/// All of the following types:
///
/// - `MeetingPollGetResponse`
/// - `Poll`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingPollGetResponseAllOf {
    MeetingPollGetResponse(MeetingPollGetResponse),
    /**
     * Poll
     */
    Poll(Poll),
}

/// All of the following types:
///
/// - `MeetingRegistrantQuestionsData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MeetingRegistrantsQuestionsGetResponseAllOf {
    /**
     * Meeting Registrant Questions
     */
    MeetingRegistrantQuestionsData(MeetingRegistrantQuestionsData),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingGetResponse {
    /**
     * JWT token for downloading the meeting recording.
     *   This is only returned if the `include_fields` query parameter contains `download_access_token`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_access_token: String,
    /**
     * The password of the sharing recording file.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
}

/// All of the following types:
///
/// - `RecordingMeeting`
/// - `RecordingGetResponse`
/// - `RecordingSeparateAudioList`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingGetResponseAllOf {
    RecordingGetResponse(RecordingGetResponse),
    /**
     * The recording meeting object.
     */
    RecordingMeeting(RecordingMeeting),
    /**
     * Return a list of recording files for each participant. The API only returns this response when the \*\*Record a separate audio file of each participant\*\* setting is enabled.
     */
    RecordingSeparateAudioList(RecordingSeparateAudioList),
}

/**
 * The recording delete actions:<br>`trash` - Move recording to trash.<br>`delete` - Delete recording permanently.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingDeleteAction {
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "trash")]
    Trash,
    FallthroughString(String),
}

impl std::fmt::Display for RecordingDeleteAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RecordingDeleteAction::Delete => "delete",
            RecordingDeleteAction::Trash => "trash",
            RecordingDeleteAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RecordingDeleteAction {
    fn default() -> RecordingDeleteAction {
        RecordingDeleteAction::Trash
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MeetingRecordingRegistrantCreateResponse {
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Registrant ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub registrant_id: String,
    /**
     * Share URL for the on-demand recording. This includes the “tk” token for the registrant. This is similar to the token that Zoom returns in the URL response to join a registered meeting, for example: `url?tk=xxxx`. Except while the meeting registration token can be used to join the meeting, this token can only be used to watch the recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub share_url: String,
    /**
     * Meeting Topic
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
}

/// All of the following types:
///
/// - `RecordingRegistrantQuestionsData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingRegistrantQuestionUpdateRequestAllOf {
    /**
     * Recording Registrant Questions
     */
    RecordingRegistrantQuestionsData(RecordingRegistrantQuestionsData),
}

/**
 * Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
 *   
 *   If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardMeetingsType {
    #[serde(rename = "live")]
    Live,
    #[serde(rename = "past")]
    Past,
    #[serde(rename = "pastOne")]
    PastOne,
    FallthroughString(String),
}

impl std::fmt::Display for DashboardMeetingsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DashboardMeetingsType::Live => "live",
            DashboardMeetingsType::Past => "past",
            DashboardMeetingsType::PastOne => "pastOne",
            DashboardMeetingsType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DashboardMeetingsType {
    fn default() -> DashboardMeetingsType {
        DashboardMeetingsType::Live
    }
}

/**
 * Set the value of this field to "tracking_fields" if you would like to include tracking fields of each meeting in the response.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum IncludeFields {
    #[serde(rename = "tracking_fields")]
    TrackingFields,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for IncludeFields {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            IncludeFields::TrackingFields => "tracking_fields",
            IncludeFields::Noop => "",
            IncludeFields::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for IncludeFields {
    fn default() -> IncludeFields {
        IncludeFields::Noop
    }
}
impl IncludeFields {
    pub fn is_noop(&self) -> bool {
        matches!(self, IncludeFields::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardMeetingsResponse {
    /**
     * Start date for this report in 'yyyy-mm-dd' format.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * End date for this report in 'yyyy-mm-dd' format.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardMeetingsResponseData {
    /**
     * Array of meeting objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub meetings: Vec<Metrics>,
}

/// All of the following types:
///
/// - `DashboardMeetingsResponse`
/// - `PaginationToken`
/// - `DashboardMeetingsResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardMeetingsResponseAllOf {
    DashboardMeetingsResponse(DashboardMeetingsResponse),
    DashboardMeetingsResponseData(DashboardMeetingsResponseData),
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
}

/**
 * The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardMeetingDetailType {
    #[serde(rename = "live")]
    Live,
    #[serde(rename = "past")]
    Past,
    #[serde(rename = "pastOne")]
    PastOne,
    FallthroughString(String),
}

impl std::fmt::Display for DashboardMeetingDetailType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DashboardMeetingDetailType::Live => "live",
            DashboardMeetingDetailType::Past => "past",
            DashboardMeetingDetailType::PastOne => "pastOne",
            DashboardMeetingDetailType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DashboardMeetingDetailType {
    fn default() -> DashboardMeetingDetailType {
        DashboardMeetingDetailType::Live
    }
}

/**
 * Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingregistrants). This is not supported for `live` meeting types.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardMeetingParticipantsIncludeFields {
    #[serde(rename = "registrant_id")]
    RegistrantId,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for DashboardMeetingParticipantsIncludeFields {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DashboardMeetingParticipantsIncludeFields::RegistrantId => "registrant_id",
            DashboardMeetingParticipantsIncludeFields::Noop => "",
            DashboardMeetingParticipantsIncludeFields::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DashboardMeetingParticipantsIncludeFields {
    fn default() -> DashboardMeetingParticipantsIncludeFields {
        DashboardMeetingParticipantsIncludeFields::Noop
    }
}
impl DashboardMeetingParticipantsIncludeFields {
    pub fn is_noop(&self) -> bool {
        matches!(self, DashboardMeetingParticipantsIncludeFields::Noop)
    }
}

/**
 * The type of device the participant used to join the meeting:
 *   * `Phone` — Participant joined via PSTN.
 *   * `H.323/SIP` — Participant joined via an H.323 or SIP device.
 *   * `Windows` — Participant joined via VoIP using a Windows device.
 *   * `Mac` — Participant joined via VoIP using a Mac device.
 *   * `iOS` — Participant joined via VoIP using an iOS device.
 *   * `Android` — Participant joined via VoIP using an Android device.
 *   
 *   **Note:** This response returns an empty string (`““`) value for any users who are **not** a part of the host’s account (external users).
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardMeetingParticipantsResponseDevice {
    #[serde(rename = "Android")]
    Android,
    #[serde(rename = "H.323/SIP")]
    H323Sip,
    #[serde(rename = "Mac")]
    Mac,
    #[serde(rename = "Phone")]
    Phone,
    #[serde(rename = "Windows")]
    Windows,
    #[serde(rename = "iOS")]
    IOs,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for DashboardMeetingParticipantsResponseDevice {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DashboardMeetingParticipantsResponseDevice::Android => "Android",
            DashboardMeetingParticipantsResponseDevice::H323Sip => "H.323/SIP",
            DashboardMeetingParticipantsResponseDevice::Mac => "Mac",
            DashboardMeetingParticipantsResponseDevice::Phone => "Phone",
            DashboardMeetingParticipantsResponseDevice::Windows => "Windows",
            DashboardMeetingParticipantsResponseDevice::IOs => "iOS",
            DashboardMeetingParticipantsResponseDevice::Noop => "",
            DashboardMeetingParticipantsResponseDevice::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DashboardMeetingParticipantsResponseDevice {
    fn default() -> DashboardMeetingParticipantsResponseDevice {
        DashboardMeetingParticipantsResponseDevice::Noop
    }
}
impl DashboardMeetingParticipantsResponseDevice {
    pub fn is_noop(&self) -> bool {
        matches!(self, DashboardMeetingParticipantsResponseDevice::Noop)
    }
}

/**
 * The participant's network type:
 *   
 *   * `Wired`
 *   * `Wifi`
 *   * `PPP` — Point-to-Point.
 *   * `Cellular` — 3G, 4G, and 5G cellular.
 *   * `Others` — An unknown device.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum NetworkType {
    #[serde(rename = "Cellular")]
    Cellular,
    #[serde(rename = "Others")]
    Others,
    #[serde(rename = "PPP")]
    Ppp,
    #[serde(rename = "Wifi")]
    Wifi,
    #[serde(rename = "Wired")]
    Wired,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for NetworkType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            NetworkType::Cellular => "Cellular",
            NetworkType::Others => "Others",
            NetworkType::Ppp => "PPP",
            NetworkType::Wifi => "Wifi",
            NetworkType::Wired => "Wired",
            NetworkType::Noop => "",
            NetworkType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for NetworkType {
    fn default() -> NetworkType {
        NetworkType::Noop
    }
}
impl NetworkType {
    pub fn is_noop(&self) -> bool {
        matches!(self, NetworkType::Noop)
    }
}

/**
 * Audio quality of the participant.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AudioQuality {
    #[serde(rename = "bad")]
    Bad,
    #[serde(rename = "fair")]
    Fair,
    #[serde(rename = "good")]
    Good,
    #[serde(rename = "poor")]
    Poor,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AudioQuality {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AudioQuality::Bad => "bad",
            AudioQuality::Fair => "fair",
            AudioQuality::Good => "good",
            AudioQuality::Poor => "poor",
            AudioQuality::Noop => "",
            AudioQuality::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AudioQuality {
    fn default() -> AudioQuality {
        AudioQuality::Noop
    }
}
impl AudioQuality {
    pub fn is_noop(&self) -> bool {
        matches!(self, AudioQuality::Noop)
    }
}

/**
 * Video quality of the participant.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum VideoQuality {
    #[serde(rename = "bad")]
    Bad,
    #[serde(rename = "fair")]
    Fair,
    #[serde(rename = "good")]
    Good,
    #[serde(rename = "poor")]
    Poor,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for VideoQuality {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            VideoQuality::Bad => "bad",
            VideoQuality::Fair => "fair",
            VideoQuality::Good => "good",
            VideoQuality::Poor => "poor",
            VideoQuality::Noop => "",
            VideoQuality::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for VideoQuality {
    fn default() -> VideoQuality {
        VideoQuality::Noop
    }
}
impl VideoQuality {
    pub fn is_noop(&self) -> bool {
        matches!(self, VideoQuality::Noop)
    }
}

/**
 * Screen share quality of the participant.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ScreenShareQuality {
    #[serde(rename = "bad")]
    Bad,
    #[serde(rename = "fair")]
    Fair,
    #[serde(rename = "good")]
    Good,
    #[serde(rename = "poor")]
    Poor,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ScreenShareQuality {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ScreenShareQuality::Bad => "bad",
            ScreenShareQuality::Fair => "fair",
            ScreenShareQuality::Good => "good",
            ScreenShareQuality::Poor => "poor",
            ScreenShareQuality::Noop => "",
            ScreenShareQuality::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ScreenShareQuality {
    fn default() -> ScreenShareQuality {
        ScreenShareQuality::Noop
    }
}
impl ScreenShareQuality {
    pub fn is_noop(&self) -> bool {
        matches!(self, ScreenShareQuality::Noop)
    }
}

/**
 * Indicates whether the participant is in the waiting room or in the meeting.
 *   
 *   The value of this field can be `in_meeting` or `in_waiting_room`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardMeetingParticipantsResponseStatus {
    #[serde(rename = "in_meeting")]
    InMeeting,
    #[serde(rename = "in_waiting_room")]
    InWaitingRoom,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for DashboardMeetingParticipantsResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DashboardMeetingParticipantsResponseStatus::InMeeting => "in_meeting",
            DashboardMeetingParticipantsResponseStatus::InWaitingRoom => "in_waiting_room",
            DashboardMeetingParticipantsResponseStatus::Noop => "",
            DashboardMeetingParticipantsResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DashboardMeetingParticipantsResponseStatus {
    fn default() -> DashboardMeetingParticipantsResponseStatus {
        DashboardMeetingParticipantsResponseStatus::Noop
    }
}
impl DashboardMeetingParticipantsResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, DashboardMeetingParticipantsResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardMeetingParticipantsResponse {
    /**
     * Audio quality of the participant.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio_quality: Option<AudioQuality>,
    /**
     * The type of camera that the participant used during the meeting.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub camera: String,
    /**
     * Participant connection type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub connection_type: String,
    /**
     * Another identifier for the participant. Can be a number or characters, maximum length of 15 characters.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub customer_key: String,
    /**
     * Data Center where participant's meeting data is stored.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub data_center: String,
    /**
     * The type of device the participant used to join the meeting:
     *  \* `Phone` — Participant joined via PSTN.
     *  \* `H.323/SIP` — Participant joined via an H.323 or SIP device.
     *  \* `Windows` — Participant joined via VoIP using a Windows device.
     *  \* `Mac` — Participant joined via VoIP using a Mac device.
     *  \* `iOS` — Participant joined via VoIP using an iOS device.
     *  \* `Android` — Participant joined via VoIP using an Android device.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<DashboardMeetingParticipantsResponseDevice>,
    /**
     * The participant's PC domain.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub domain: String,
    /**
     * Email address of the participant.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The participant's hard disk ID.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub harddisk_id: String,
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The number of participants who joined via Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub in_room_participants: i64,
    /**
     * Participant's IP address.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ip_address: String,
    /**
     * The time at which participant joined the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub join_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Possible reasons for why participant left the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub leave_reason: String,
    /**
     * The time at which a participant left the meeting. For live meetings, this field will only be returned if a participant has left the ongoing meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub leave_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Participant's location.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * The participant's MAC address.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_addr: String,
    /**
     * The type of microphone that the participant used during the meeting.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub microphone: String,
    /**
     * The participant's network type:
     *  
     *  \* `Wired`
     *  \* `Wifi`
     *  \* `PPP` — Point-to-Point.
     *  \* `Cellular` — 3G, 4G, and 5G cellular.
     *  \* `Others` — An unknown device.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network_type: Option<NetworkType>,
    /**
     * Name of Participant's PC.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub pc_name: String,
    /**
     * Indicates whether or not recording was used during the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording: bool,
    /**
     * Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter. This is not supported for `live` meeting types.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub registrant_id: String,
    /**
     * Screen share quality of the participant.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub screen_share_quality: Option<ScreenShareQuality>,
    /**
     * Indicates whether or not a user selected to share an iPhone/iPad app during the screenshare.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub share_application: bool,
    /**
     * Indicates whether or not a user selected to share their desktop during the screenshare.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub share_desktop: bool,
    /**
     * Indicates whether or not a user selected to share their whiteboard during the screenshare.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub share_whiteboard: bool,
    /**
     * The type of speaker that the participant used during the meeting.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub speaker: String,
    /**
     * Indicates whether the participant is in the waiting room or in the meeting.
     *  
     *  The value of this field can be `in_meeting` or `in_waiting_room`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<DashboardMeetingParticipantsResponseStatus>,
    /**
     * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
    /**
     * Participant display name.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * Participant's Zoom Client version.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub version: String,
    /**
     * Video quality of the participant.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub video_quality: Option<VideoQuality>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardMeetingParticipantsResponseData {
    /**
     * Array of participant session objects. If a participant left a meeting and rejoined the same meeting, their information will appear multiple times (as many times as they joined the meeting).
     *  
     *  If the account calling this API is a [business associate (BAA) under HIPAA](https://www.ecfr.gov/cgi-bin/retrieveECFR?gp=1&n=se45.1.160_1103&r=SECTION&ty=HTML), this array returns an empty string value for the `user_name`, `ip_address`, `location`, and `email` responses.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<DashboardMeetingParticipantsResponse>,
}

/// All of the following types:
///
/// - `PaginationToken`
/// - `DashboardMeetingParticipantsResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardMeetingParticipantsResponseAllOf {
    DashboardMeetingParticipantsResponseData(DashboardMeetingParticipantsResponseData),
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
}

/**
 * The meeting types: <br>`past` - Past meetings.<br>`live` - Live Meetings.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardMeetingParticipantQosType {
    #[serde(rename = "live")]
    Live,
    #[serde(rename = "past")]
    Past,
    #[serde(rename = "pastOne")]
    PastOne,
    FallthroughString(String),
}

impl std::fmt::Display for DashboardMeetingParticipantQosType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DashboardMeetingParticipantQosType::Live => "live",
            DashboardMeetingParticipantQosType::Past => "past",
            DashboardMeetingParticipantQosType::PastOne => "pastOne",
            DashboardMeetingParticipantQosType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DashboardMeetingParticipantQosType {
    fn default() -> DashboardMeetingParticipantQosType {
        DashboardMeetingParticipantQosType::Live
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Details {
    /**
     * Type of content shared.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub content: String,
    /**
     * End time of sharing.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub end_time: String,
    /**
     * Start time of sharing.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub start_time: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardMeetingParticipantShareResponseParticipants {
    /**
     * Array of sharing and recording details.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<Details>,
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
    /**
     * Participant display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardMeetingParticipantShareResponse {
    /**
     * Array of participants.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<DashboardMeetingParticipantShareResponseParticipants>,
}

/// All of the following types:
///
/// - `PaginationToken`
/// - `DashboardMeetingParticipantShareResponse`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardMeetingParticipantShareResponseAllOf {
    DashboardMeetingParticipantShareResponse(DashboardMeetingParticipantShareResponse),
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
}

/**
 * The webinar type.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardWebinarsType {
    #[serde(rename = "live")]
    Live,
    #[serde(rename = "past")]
    Past,
    FallthroughString(String),
}

impl std::fmt::Display for DashboardWebinarsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DashboardWebinarsType::Live => "live",
            DashboardWebinarsType::Past => "past",
            DashboardWebinarsType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DashboardWebinarsType {
    fn default() -> DashboardWebinarsType {
        DashboardWebinarsType::Live
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardWebinarsResponse {
    /**
     * Array of webinar objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub webinars: Vec<Webinars>,
}

/// All of the following types:
///
/// - `DashboardMeetingsResponse`
/// - `PaginationToken`
/// - `DashboardWebinarsResponse`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardWebinarsResponseAllOf {
    DashboardMeetingsResponse(DashboardMeetingsResponse),
    DashboardWebinarsResponse(DashboardWebinarsResponse),
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
}

/**
 * Provide 'registrant_id' as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [webinar registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarregistrants).<br>
 *   
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardWebinarParticipantsIncludeFields {
    #[serde(rename = "registrant_id")]
    RegistrantId,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for DashboardWebinarParticipantsIncludeFields {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DashboardWebinarParticipantsIncludeFields::RegistrantId => "registrant_id",
            DashboardWebinarParticipantsIncludeFields::Noop => "",
            DashboardWebinarParticipantsIncludeFields::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DashboardWebinarParticipantsIncludeFields {
    fn default() -> DashboardWebinarParticipantsIncludeFields {
        DashboardWebinarParticipantsIncludeFields::Noop
    }
}
impl DashboardWebinarParticipantsIncludeFields {
    pub fn is_noop(&self) -> bool {
        matches!(self, DashboardWebinarParticipantsIncludeFields::Noop)
    }
}

/**
 * The type of device the participant used to join the webinar:
 *   * `Phone` — Participant joined via PSTN.
 *   * `H.323/SIP` — Participant joined via an H.323 or SIP device.
 *   * `Windows` — Participant joined via VoIP using a Windows device.
 *   * `Mac` — Participant joined via VoIP using a Mac device.
 *   * `iOS` — Participant joined via VoIP using an iOS device.
 *   * `Android` — Participant joined via VoIP using an Android device.
 *   
 *   **Note:** This response returns an empty string (`““`) value for any users who are **not** a part of the host’s account (external users).
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardWebinarParticipantsResponseDevice {
    #[serde(rename = "Android")]
    Android,
    #[serde(rename = "H.323/SIP")]
    H323Sip,
    #[serde(rename = "Mac")]
    Mac,
    #[serde(rename = "Phone")]
    Phone,
    #[serde(rename = "Windows")]
    Windows,
    #[serde(rename = "iOS")]
    IOs,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for DashboardWebinarParticipantsResponseDevice {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DashboardWebinarParticipantsResponseDevice::Android => "Android",
            DashboardWebinarParticipantsResponseDevice::H323Sip => "H.323/SIP",
            DashboardWebinarParticipantsResponseDevice::Mac => "Mac",
            DashboardWebinarParticipantsResponseDevice::Phone => "Phone",
            DashboardWebinarParticipantsResponseDevice::Windows => "Windows",
            DashboardWebinarParticipantsResponseDevice::IOs => "iOS",
            DashboardWebinarParticipantsResponseDevice::Noop => "",
            DashboardWebinarParticipantsResponseDevice::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DashboardWebinarParticipantsResponseDevice {
    fn default() -> DashboardWebinarParticipantsResponseDevice {
        DashboardWebinarParticipantsResponseDevice::Noop
    }
}
impl DashboardWebinarParticipantsResponseDevice {
    pub fn is_noop(&self) -> bool {
        matches!(self, DashboardWebinarParticipantsResponseDevice::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardWebinarParticipantsResponse {
    /**
     * Audio quality of the participant.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audio_quality: Option<AudioQuality>,
    /**
     * Participant connection type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub connection_type: String,
    /**
     * Another identifier for the participant. Can be a number or characters, maximum length of 15 characters.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub customer_key: String,
    /**
     * Participant data center.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub data_center: String,
    /**
     * The type of device the participant used to join the webinar:
     *  \* `Phone` — Participant joined via PSTN.
     *  \* `H.323/SIP` — Participant joined via an H.323 or SIP device.
     *  \* `Windows` — Participant joined via VoIP using a Windows device.
     *  \* `Mac` — Participant joined via VoIP using a Mac device.
     *  \* `iOS` — Participant joined via VoIP using an iOS device.
     *  \* `Android` — Participant joined via VoIP using an Android device.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<DashboardWebinarParticipantsResponseDevice>,
    /**
     * The participant's PC domain.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub domain: String,
    /**
     * Email address of the participant.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The participant's hard disk ID.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub harddisk_id: String,
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Participant IP address.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ip_address: String,
    /**
     * Participant join time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub join_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Possible reasons for why a participant left the Webinar.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub leave_reason: String,
    /**
     * Participant leave time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub leave_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Participant location.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * The participant's MAC address.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_addr: String,
    /**
     * The participant's microphone.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub microphone: String,
    /**
     * The participant's network type:
     *  
     *  \* `Wired`
     *  \* `Wifi`
     *  \* `PPP` — Point-to-Point.
     *  \* `Cellular` — 3G, 4G, and 5G cellular.
     *  \* `Others` — An unknown device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub network_type: String,
    /**
     * Participant PC name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub pc_name: String,
    /**
     * Participant record?
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording: bool,
    /**
     * Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub registrant_id: String,
    /**
     * Screen share quality of the participant.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub screen_share_quality: Option<ScreenShareQuality>,
    /**
     * Did the participant share an application?
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub share_application: bool,
    /**
     * Did the participant share their desktop?
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub share_desktop: bool,
    /**
     * Did the participant share their whiteboard?
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub share_whiteboard: bool,
    /**
     * The participant's speaker.
     *  
     *  \*\*Note:\*\* This response returns an empty string (`““`) value for any users who are \*\*not\*\* a part of the host’s account (external users).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub speaker: String,
    /**
     * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
    /**
     * Participant display name.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * Participant version.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub version: String,
    /**
     * Video quality of the participant.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub video_quality: Option<VideoQuality>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardWebinarParticipantsResponseData {
    /**
     * Array of user objects.
     *  
     *  If the account calling this API is a [business associate (BAA) under HIPAA](https://www.ecfr.gov/cgi-bin/retrieveECFR?gp=1&n=se45.1.160_1103&r=SECTION&ty=HTML), this array returns an empty string value for the `user_name`, `ip_address`, `location`, and `email` responses.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<DashboardWebinarParticipantsResponse>,
}

/// All of the following types:
///
/// - `PaginationToken`
/// - `DashboardWebinarParticipantsResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardWebinarParticipantsResponseAllOf {
    DashboardWebinarParticipantsResponseData(DashboardWebinarParticipantsResponseData),
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardImResponse {
    /**
     * Start date for this report.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * End date for this report.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Users {
    /**
     * Total number of instant meeting calls received by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub calls_receive: i64,
    /**
     * Total number of instant meeting calls made by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub calls_send: i64,
    /**
     * User email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Total number of emojis received by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub emoji_receive: i64,
    /**
     * Total number of emojis sent by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub emoji_send: i64,
    /**
     * Total number of files received by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub files_receive: i64,
    /**
     * Total number of files sent by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub files_send: i64,
    /**
     * Total number of messages received by the user in channels.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub group_receive: i64,
    /**
     * Total number of messages sent by the user in channels.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub group_send: i64,
    /**
     * Total number of images received by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub images_receive: i64,
    /**
     * Total number of images sent by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub images_send: i64,
    /**
     * Total number of messages received by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_receive: i64,
    /**
     * Total number of messages sent by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_send: i64,
    /**
     * User ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
    /**
     * User display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * Total number of video files received by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub videos_receive: i64,
    /**
     * Total number of video files sent by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub videos_send: i64,
    /**
     * Total number of voice files received by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub voice_receive: i64,
    /**
     * Total number of voice files sent by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub voice_send: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardImResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub users: Vec<Users>,
}

/// All of the following types:
///
/// - `DashboardImResponse`
/// - `PaginationToken`
/// - `DashboardImResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardImResponseAllOf {
    DashboardImResponse(DashboardImResponse),
    DashboardImResponseData(DashboardImResponseData),
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardChatResponse {
    /**
     * The report's start date.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * The report's [`next_page_token` value](https://marketplace.zoom.us/docs/api-reference/pagination#next-page-token). The API returns this value when the set of available results exceeds the current page size. This token expires after 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records to return within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The report's end date.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardChatResponseUsers {
    /**
     * The user's total number of audio files sent.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub audio_sent: i64,
    /**
     * The user's total number of code snippets sent.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub code_sippet_sent: i64,
    /**
     * UThe user's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The user's total number of files sent.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub files_sent: i64,
    /**
     * The user's total number of [GIPHY](https://giphy.com/) images sent.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub giphys_sent: i64,
    /**
     * The user's total number of messages sent in Zoom Chat channels.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub group_sent: i64,
    /**
     * The user's total number of images sent.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub images_sent: i64,
    /**
     * The user's total number of peer-to-peer (P2P) chat messages sent.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub p_2p_sent: i64,
    /**
     * The user's total number of text messages sent.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub text_sent: i64,
    /**
     * The user's total number of messages sent.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_sent: i64,
    /**
     * The user's ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
    /**
     * The user's display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * The user's total number of video files sent.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub video_sent: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardChatResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub users: Vec<DashboardChatResponseUsers>,
}

/// All of the following types:
///
/// - `DashboardChatResponse`
/// - `DashboardChatResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardChatResponseAllOf {
    DashboardChatResponse(DashboardChatResponse),
    DashboardChatResponseData(DashboardChatResponseData),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ClientFeedbacks {
    /**
     * Feedback Id
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub feedback_id: String,
    /**
     * Feedback Name
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub feedback_name: String,
    /**
     * The number of participants that upvoted the feedback.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants_count: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardClientFeedbackResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub client_feedbacks: Vec<ClientFeedbacks>,
    /**
     * Start date for this report
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * End date for this report
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
    /**
     * The number of all records available across pages
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardIssueZoomRoomResponse {
    /**
     * Start date for this report
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * End date for this report
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
    /**
     * The number of all records available across pages
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardIssueZoomRoomResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub zoom_rooms: Vec<String>,
}

/// All of the following types:
///
/// - `DashboardIssueZoomRoomResponse`
/// - `DashboardIssueZoomRoomResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardIssueZoomRoomResponseAllOf {
    DashboardIssueZoomRoomResponse(DashboardIssueZoomRoomResponse),
    DashboardIssueZoomRoomResponseData(DashboardIssueZoomRoomResponseData),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportCloudRecordingResponse {
    /**
     * Start date for this report
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * End date for this report
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct IssueDetails {
    /**
     * Zoom Room Issue Detail.<br> The value of the this field could be one of the following:<br>
     *  \* `Room Controller disconnected`<br>
     *  \* `Room Controller connected`
     *  \* `Selected camera has disconnected`
     *  \* `Selected camera is reconnected`
     *  \* `Selected microphone has disconnected`
     *  \* `Selected microphone is reconnected`
     *  \* `Selected speaker has disconnected`
     *  \* `Selected speaker is reconnected`
     *  \* `Zoom room is offline`
     *  \* `Zoom room is online`
     *  \* `High CPU usage is detected`
     *  \* `Low bandwidth network is detected`
     *  \* `{name} battery is low`
     *  \* `{name} battery is normal`
     *  \* `{name} disconnected`
     *  \* `{name} connected`
     *  \* `{name} is not charging`
     *  
     *  Possible values for {name}: <br>
     *  \* Zoom Rooms Computer
     *  \* Controller
     *  \* Scheduling Display
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub issue: String,
    /**
     * Time at which the issue was encountered.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub time: Option<chrono::DateTime<chrono::Utc>>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardIssueDetailZoomRoomResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub issue_details: Vec<IssueDetails>,
}

/// All of the following types:
///
/// - `DashboardIssueDetailZoomRoomResponse`
/// - `PaginationToken`
/// - `DashboardIssueDetailZoomRoomResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardIssueDetailZoomRoomResponseAllOf {
    DashboardIssueDetailZoomRoomResponse(DashboardIssueDetailZoomRoomResponse),
    DashboardIssueDetailZoomRoomResponseData(DashboardIssueDetailZoomRoomResponseData),
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Dates {
    /**
     * Date for this object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<chrono::NaiveDate>,
    /**
     * Number of meeting minutes on this date.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub meeting_minutes: i64,
    /**
     * Number of meetings on this date.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub meetings: i64,
    /**
     * Number of new users on this date.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub new_users: i64,
    /**
     * Number of participants on this date.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportDailyResponse {
    /**
     * Array of date objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dates: Vec<Dates>,
    /**
     * Month for this report.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub month: i64,
    /**
     * Year for this report.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub year: i64,
}

/**
 * Active or inactive hosts.<br>`active` - Active hosts. <br>`inactive` - Inactive hosts.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReportUsersType {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ReportUsersType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ReportUsersType::Active => "active",
            ReportUsersType::Inactive => "inactive",
            ReportUsersType::Noop => "",
            ReportUsersType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ReportUsersType {
    fn default() -> ReportUsersType {
        ReportUsersType::Noop
    }
}
impl ReportUsersType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ReportUsersType::Noop)
    }
}

/**
 * The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReportMeetingsType {
    #[serde(rename = "past")]
    Past,
    #[serde(rename = "pastOne")]
    PastOne,
    FallthroughString(String),
}

impl std::fmt::Display for ReportMeetingsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ReportMeetingsType::Past => "past",
            ReportMeetingsType::PastOne => "pastOne",
            ReportMeetingsType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ReportMeetingsType {
    fn default() -> ReportMeetingsType {
        ReportMeetingsType::Past
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Meetings {
    /**
     * Custom keys and values assigned to the meeting.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_keys: Vec<CustomKeys>,
    /**
     * Meeting duration.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Meeting end time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-):            Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64
     *  data type in JSON), also known as the meeting number.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Number of meeting participants.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants_count: i64,
    /**
     * Indicates whether the meeting was created directly through Zoom or through an API request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub source: String,
    /**
     * Meeting start time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting topic.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Sum of meeting minutes from all participants in the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_minutes: i64,
    /**
     *
     *  Meeting Type:<br> `1` - Instant Meeting<br> `2` - Scheduled Meeting<br> `3` - Recurring Meeting with no fixed time.<br>
     *  `4` - This value is returned if the meeting was started using a Personal Meeting ID. <br>
     *  `8` - Recurring Meeting with a fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * User email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
    /**
     * User display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportMeetingsResponse {
    /**
     * Start date for this report.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * Array of meeting objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub meetings: Vec<Meetings>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * End date for this report.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
}

/// All of the following types:
///
/// - `Pagination`
/// - `ReportMeetingsResponse`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReportMeetingsResponseAllOf {
    /**
     * Pagination Object.
     */
    Pagination(Pagination),
    ReportMeetingsResponse(ReportMeetingsResponse),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportMeetingDetailsResponseTrackingFields {
    /**
     * Tracking fields type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub field: String,
    /**
     * Tracking fields value.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportMeetingDetailsResponse {
    /**
     * Custom keys and values assigned to the meeting.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_keys: Vec<CustomKeys>,
    /**
     * Department of the host.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dept: String,
    /**
     * Meeting duration.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Meeting end time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Number of meeting participants.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants_count: i64,
    /**
     * Meeting start time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting topic.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Number of meeting minutes. This represents the total amount of meeting minutes attended by each participant including the host, for meetings hosted by the user. For instance if there were one host(named A) and one participant(named B) in a meeting, the value of total_minutes would be calculated as below:
     *  
     *  \*\*total_minutes\*\* = Total Meeting Attendance Minutes of A + Total Meeting Attendance Minutes of B
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_minutes: i64,
    /**
     * Tracking fields.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<ReportMeetingDetailsResponseTrackingFields>,
    /**
     * Meeting type.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * User email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
    /**
     * User display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

/**
 * Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingregistrants).<br>
 *   
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReportMeetingParticipantsIncludeFields {
    #[serde(rename = "registrant_id")]
    RegistrantId,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ReportMeetingParticipantsIncludeFields {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ReportMeetingParticipantsIncludeFields::RegistrantId => "registrant_id",
            ReportMeetingParticipantsIncludeFields::Noop => "",
            ReportMeetingParticipantsIncludeFields::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ReportMeetingParticipantsIncludeFields {
    fn default() -> ReportMeetingParticipantsIncludeFields {
        ReportMeetingParticipantsIncludeFields::Noop
    }
}
impl ReportMeetingParticipantsIncludeFields {
    pub fn is_noop(&self) -> bool {
        matches!(self, ReportMeetingParticipantsIncludeFields::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportMeetingParticipantsResponse {
    /**
     * Another identifier for the participant. Can be a number or characters, maximum length of 15 characters.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub customer_key: String,
    /**
     * Participant duration.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Indicates if failover happened during the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub failover: bool,
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank..
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Participant join time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub join_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Participant leave time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub leave_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Participant display name.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub registrant_id: String,
    /**
     * Participant email.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
    /**
     * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportMeetingParticipantsResponseData {
    /**
     * Array of meeting participant objects.
     *  
     *  If the account calling this API is a [business associate (BAA) under HIPAA](https://www.ecfr.gov/cgi-bin/retrieveECFR?gp=1&n=se45.1.160_1103&r=SECTION&ty=HTML), this array returns an empty string value for the `name` and `user_email` responses.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<ReportMeetingParticipantsResponse>,
}

/// All of the following types:
///
/// - `PaginationToken`
/// - `ReportMeetingParticipantsResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReportMeetingParticipantsResponseAllOf {
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
    ReportMeetingParticipantsResponseData(ReportMeetingParticipantsResponseData),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct QuestionDetails {
    /**
     * Given answer.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub answer: String,
    /**
     * Date and time at which the answer to the poll was submitted.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Unique identifier of the poll.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub polling_id: String,
    /**
     * Asked question.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub question: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportMeetingPollsResponseQuestions {
    /**
     * Participant email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Participant display name.<br> If "anonymous" option is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Array of questions from user.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub question_details: Vec<QuestionDetails>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportMeetingPollsResponse {
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Array of meeting question objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<ReportMeetingPollsResponseQuestions>,
    /**
     * Meeting start time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportWebinarDetailsResponse {
    /**
     * Custom keys and values assigned to the meeting.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_keys: Vec<CustomKeys>,
    /**
     * Department of the host.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dept: String,
    /**
     * Meeting duration.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Meeting end time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Number of meeting participants.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub participants_count: i64,
    /**
     * Meeting start time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting topic.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * Number of Webinar minutes. This represents the total amount of Webinar minutes attended by each participant including the host, for a Webinar hosted by the user. For instance if there were one host(named A) and one participant(named B) in a Webinar, the value of total_minutes would be calculated as below:
     *  
     *  \*\*total_minutes\*\* = Total Webinar Attendance Minutes of A + Total Webinar Attendance Minutes of B
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_minutes: i64,
    /**
     * Tracking fields.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_fields: Vec<ReportMeetingDetailsResponseTrackingFields>,
    /**
     * Meeting type.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * User email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
    /**
     * User display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
    /**
     * Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated when the next instance of the webinar starts). Double encode the UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

/**
 * Enter 'registrant_id' as the value for this field if you would like to see the registrant ID attribute included in the response of this API call. A registrant ID is a unique identifier of a [webinar registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarregistrants).<br>
 *   
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReportWebinarParticipantsIncludeFields {
    #[serde(rename = "registrant_id")]
    RegistrantId,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ReportWebinarParticipantsIncludeFields {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ReportWebinarParticipantsIncludeFields::RegistrantId => "registrant_id",
            ReportWebinarParticipantsIncludeFields::Noop => "",
            ReportWebinarParticipantsIncludeFields::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ReportWebinarParticipantsIncludeFields {
    fn default() -> ReportWebinarParticipantsIncludeFields {
        ReportWebinarParticipantsIncludeFields::Noop
    }
}
impl ReportWebinarParticipantsIncludeFields {
    pub fn is_noop(&self) -> bool {
        matches!(self, ReportWebinarParticipantsIncludeFields::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportWebinarParticipantsResponse {
    /**
     * Another identifier for the participant. Can be a number or characters, maximum length of 15 characters.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub customer_key: String,
    /**
     * Participant duration.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Indicates if failover happened during the webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub failover: bool,
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Participant join time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub join_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Participant leave time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub leave_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Participant display name.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Participant email.
     *  
     *  This returns an empty string value if the account calling the API is a BAA account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
    /**
     * Participant ID. This is a unique ID assigned to the participant joining the webinar and is valid for that webinar only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportWebinarParticipantsResponseData {
    /**
     * Array of webinar participant objects.
     *  
     *  If the account calling this API is a [business associate (BAA) under HIPAA](https://www.ecfr.gov/cgi-bin/retrieveECFR?gp=1&n=se45.1.160_1103&r=SECTION&ty=HTML), this array returns an empty string value for the `name` and `user_email` responses.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<ReportWebinarParticipantsResponse>,
}

/// All of the following types:
///
/// - `PaginationToken`
/// - `ReportWebinarParticipantsResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReportWebinarParticipantsResponseAllOf {
    /**
     * Pagination object.
     */
    PaginationToken(PaginationToken),
    ReportWebinarParticipantsResponseData(ReportWebinarParticipantsResponseData),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportWebinarPollsResponseQuestions {
    /**
     * Participant email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Participant display name.<br><br> If the poll was created as an anonymous poll, participant's information will remain anonymous and the value of the `name` field will be "Anonymous Attendee".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Array of questions from user.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub question_details: Vec<QuestionDetails>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportWebinarPollsResponse {
    /**
     * Webinar ID in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the webinar number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Array of webinar question objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<ReportWebinarPollsResponseQuestions>,
    /**
     * Webinar start time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportWebinarQaResponseQuestionsQuestionDetails {
    /**
     * Given answer.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub answer: String,
    /**
     * Asked question.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub question: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportWebinarQaResponseQuestions {
    /**
     * Participant email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Participant display name.<br>
     *  
     *  If anonymous [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) option is enabled and if a participant submits the Q&A without providing their name, the value of the `name` field will be "Anonymous Attendee".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Array of questions from user.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub question_details: Vec<ReportWebinarQaResponseQuestionsQuestionDetails>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportWebinarQaResponse {
    /**
     * Webinar ID in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the webinar number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Array of webinar question objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<ReportWebinarQaResponseQuestions>,
    /**
     * Webinar start time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Webinar UUID. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

/**
 * Date types:<br>`start_time` - Query by call start time.<br>`end_time` - Query by call end time.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum QueryDateType {
    #[serde(rename = "end_time")]
    EndTime,
    #[serde(rename = "start_time")]
    StartTime,
    FallthroughString(String),
}

impl std::fmt::Display for QueryDateType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            QueryDateType::EndTime => "end_time",
            QueryDateType::StartTime => "start_time",
            QueryDateType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for QueryDateType {
    fn default() -> QueryDateType {
        QueryDateType::StartTime
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportCloudRecordingResponseData {
    /**
     * Array of cloud usage objects
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub cloud_recording_storage: Vec<String>,
}

/// All of the following types:
///
/// - `ReportCloudRecordingResponse`
/// - `ReportCloudRecordingResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReportCloudRecordingResponseAllOf {
    ReportCloudRecordingResponse(ReportCloudRecordingResponse),
    ReportCloudRecordingResponseData(ReportCloudRecordingResponseData),
}

/**
 * **Optional**<br>
 *   Filter your response by a category type to see reports for a specific category.
 *   The value for this field can be one of the following:<br> `all`<br>`user`<br>`user_settings`<br>`account`<br>`billing`<br>`im`<br>`recording`<br>`phone_contacts`<br>`webinar`<br>`sub_account`<br>`role`<br>`zoom_rooms`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum CategoryType {
    #[serde(rename = "account")]
    Account,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "billing")]
    Billing,
    #[serde(rename = "im")]
    Im,
    #[serde(rename = "phone_contacts")]
    PhoneContacts,
    #[serde(rename = "recording")]
    Recording,
    #[serde(rename = "role")]
    Role,
    #[serde(rename = "sub_account")]
    SubAccount,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "user_settings")]
    UserSettings,
    #[serde(rename = "webinar")]
    Webinar,
    #[serde(rename = "zoom_rooms")]
    ZoomRooms,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for CategoryType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            CategoryType::Account => "account",
            CategoryType::All => "all",
            CategoryType::Billing => "billing",
            CategoryType::Im => "im",
            CategoryType::PhoneContacts => "phone_contacts",
            CategoryType::Recording => "recording",
            CategoryType::Role => "role",
            CategoryType::SubAccount => "sub_account",
            CategoryType::User => "user",
            CategoryType::UserSettings => "user_settings",
            CategoryType::Webinar => "webinar",
            CategoryType::ZoomRooms => "zoom_rooms",
            CategoryType::Noop => "",
            CategoryType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for CategoryType {
    fn default() -> CategoryType {
        CategoryType::Noop
    }
}
impl CategoryType {
    pub fn is_noop(&self) -> bool {
        matches!(self, CategoryType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct OperationLogs {
    /**
     * Action
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub action: String,
    /**
     * Category type
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub category_type: String,
    /**
     * Operation detail
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub operation_detail: String,
    /**
     * The user who performed the operation.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub operator: String,
    /**
     * The time at which the operation was performed.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub time: Option<chrono::DateTime<chrono::Utc>>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportOperationLogsResponse {
    /**
     * Array of operation log objects
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub operation_logs: Vec<OperationLogs>,
}

/// All of the following types:
///
/// - `PaginationToken4ImChat`
/// - `ReportOperationLogsResponse`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ReportOperationLogsResponseAllOf {
    /**
     * Pagination object.
     */
    PaginationToken4ImChat(PaginationToken4ImChat),
    ReportOperationLogsResponse(ReportOperationLogsResponse),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateRoleRequest {
    /**
     * Description of the role.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Name of the role.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub privileges: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateRoleResponse {
    /**
     * Description of the role.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Role Id
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the role.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * [Privileges](https://marketplace.zoom.us/docs/api-reference/other-references/privileges) provided to the role.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub privileges: Vec<String>,
    /**
     * Total members assigned to the role.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_members: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddRoleMembersRequest {
    /**
     * Email address of the user to whom you would like to assign the role. Provide either the userId in the ID field or the email address in the email field. If both fields are provided, only userId is used.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User ID of the user to whom you would like to assign the role.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddRoleMembersRequestData {
    /**
     * Array of userId/user email of users to whom you would like to assign this role. Upto 30 users can be assigned a role at once.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<AddRoleMembersRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddRoleMembersResponse {
    /**
     * Date and time at which the members are assigned to the role.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub add_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * User ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ids: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspResponseDialInNumbers {
    /**
     * Country Code
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * Dial-in number, length is less than 16
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Dial-in number type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/**
 * Telephony bridge zone
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum TspResponseBridge {
    #[serde(rename = "EU_TSP_TB")]
    EuTspTb,
    #[serde(rename = "US_TSP_TB")]
    UsTspTb,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for TspResponseBridge {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            TspResponseBridge::EuTspTb => "EU_TSP_TB",
            TspResponseBridge::UsTspTb => "US_TSP_TB",
            TspResponseBridge::Noop => "",
            TspResponseBridge::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for TspResponseBridge {
    fn default() -> TspResponseBridge {
        TspResponseBridge::Noop
    }
}
impl TspResponseBridge {
    pub fn is_noop(&self) -> bool {
        matches!(self, TspResponseBridge::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspResponse {
    /**
     * Control restriction on account users adding a TSP number outside of account's dial in numbers.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub dial_in_number_unrestricted: bool,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dial_in_numbers: Vec<TspResponseDialInNumbers>,
    /**
     * Enable Telephony Service Provider for account users.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub master_account_setting_extended: bool,
    /**
     * Control restriction on account users being able to modify their TSP credentials.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub modify_credential_forbidden: bool,
    /**
     * Telephony bridge zone
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp_bridge: Option<TspResponseBridge>,
    /**
     * Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub tsp_enabled: bool,
    /**
     * Telephony Service Provider.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tsp_provider: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspUpdateRequest {
    /**
     * Control restriction on account users adding a TSP number outside of account's dial in numbers.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dial_in_number_unrestricted: Option<bool>,
    /**
     * Enable 3rd party audio conferencing for account users
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /**
     * For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_account_setting_extended: Option<bool>,
    /**
     * Control restriction on account users being able to modify their TSP credentials.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modify_credential_forbidden: Option<bool>,
    /**
     * Telephony bridge
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp_bridge: Option<TspBridge>,
    /**
     * Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp_enabled: Option<bool>,
    /**
     * 3rd party audio conferencing provider
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tsp_provider: String,
}

/**
 * The user's status:
 *   * `active` — An active user.
 *   * `inactive` — A deactivated user.
 *   * `pending` — A pending user.
 *   
 *   This value defaults to `active`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UsersStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "pending")]
    Pending,
    FallthroughString(String),
}

impl std::fmt::Display for UsersStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UsersStatus::Active => "active",
            UsersStatus::Inactive => "inactive",
            UsersStatus::Pending => "pending",
            UsersStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UsersStatus {
    fn default() -> UsersStatus {
        UsersStatus::Active
    }
}

/**
 * Use this parameter to display one of the following attributes in the API call's response:
 *   * `custom_attributes` — Return the user's custom attributes.
 *   * `host_key` — Return the user's [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key).
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UsersIncludeFields {
    #[serde(rename = "custom_attributes")]
    CustomAttributes,
    #[serde(rename = "host_key")]
    HostKey,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UsersIncludeFields {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UsersIncludeFields::CustomAttributes => "custom_attributes",
            UsersIncludeFields::HostKey => "host_key",
            UsersIncludeFields::Noop => "",
            UsersIncludeFields::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UsersIncludeFields {
    fn default() -> UsersIncludeFields {
        UsersIncludeFields::Noop
    }
}
impl UsersIncludeFields {
    pub fn is_noop(&self) -> bool {
        matches!(self, UsersIncludeFields::Noop)
    }
}

/**
 * The user's status:
 *   * `active` — An active user.
 *   * `inactive` — A deactivated user.
 *   * `pending` — A pending user.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UsersResponseStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UsersResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UsersResponseStatus::Active => "active",
            UsersResponseStatus::Inactive => "inactive",
            UsersResponseStatus::Pending => "pending",
            UsersResponseStatus::Noop => "",
            UsersResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UsersResponseStatus {
    fn default() -> UsersResponseStatus {
        UsersResponseStatus::Noop
    }
}
impl UsersResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, UsersResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UsersResponseCustomAttributes {
    /**
     * The custom attribute's unique ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub key: String,
    /**
     * The custom attribute's name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The custom attribute's value.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UsersResponse {
    /**
     * The time at which the user's account was created.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Information about the user's custom attributes.
     *  
     *  This field is \*\*only\*\* returned if users are assigned custom attributes and you provided the `custom_attributes` value for the `include_fields` query parameter in the API request.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_attributes: Vec<UsersResponseCustomAttributes>,
    /**
     * The user's department.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dept: String,
    /**
     * The user's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The user's first name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * The IDs of groups where the user is a member.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub group_ids: Vec<String>,
    /**
     * The user's [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key).
     *  
     *  This field is \*\*only\*\* returned if users are assigned a host key and you provided the `host_key` value for the `include_fields` query parameter in the API request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_key: String,
    /**
     * The user's ID.
     *  
     *  The API does \*\*not\*\* return this value for users with the `pending` status.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The IDs of IM directory groups where the user is a member.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub im_group_ids: Vec<String>,
    /**
     * The last client version that user used to log in.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_client_version: String,
    /**
     * The user's last login time. This field has a three-day buffer period.
     *  
     *  For example, if user first logged in on `2020-01-01` and then logged out and logged in on `2020-01-02`, this value will still reflect the login time of `2020-01-01`. However, if the user logs in on `2020-01-04`, the value of this field will reflect the corresponding login time since it exceeds the three-day buffer period.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub last_login_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The user's last name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * This field is returned if the user is enrolled in the [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub plan_united_type: String,
    /**
     * The user's [PMI (personal meeting ID)](https://support.zoom.us/hc/en-us/articles/201362843-What-is-Personal-Meeting-ID-PMI-and-Personal-Link-).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub pmi: i64,
    /**
     * The unique ID of the user's assigned [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub role_id: String,
    /**
     * The user's status:
     *  \* `active` — An active user.
     *  \* `inactive` — A deactivated user.
     *  \* `pending` — A pending user.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<UsersResponseStatus>,
    /**
     * The user's timezone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * The user's assigned plan type:
     *  \* `1` — Basic.
     *  \* `2` — Licensed.
     *  \* `3` — On-prem.
     *  \* `99` — None (this can only be set with `ssoCreate`).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * Display whether the user's email address for the Zoom account is verified:
     *  \* `1` — A verified user email.
     *  \* `0` — The user's email \*\*not\*\* verified.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub verified: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UsersResponseData {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of pages returned for the request made.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * The page number of the current results.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_number: i64,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The total number of all the records available across pages.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
    /**
     * Information about the users.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub users: Vec<UsersResponse>,
}

/**
 * Specify how to create the new user: <br>`create` - User will get an email sent from Zoom. There is a confirmation link in this email. The user will then need to use the link to activate their Zoom account. The user can then set or change their password.<br>`autoCreate` - This action is provided for the enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain.<br>`custCreate` - Users created via this option do not have passwords and will not have the ability to log into the Zoom Web Portal or the Zoom Client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must contact the ISV Platform Sales team at isv@zoom.us.<br>`ssoCreate` - This action is provided for the enabled “Pre-provisioning SSO User” option. A user created in this way has no password. If not a basic user, a personal vanity URL using the user name (no domain) of the provisioning email will be generated. If the user name or PMI is invalid or occupied, it will use a random number or random personal vanity URL.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserCreateRequestAction {
    #[serde(rename = "autoCreate")]
    AutoCreate,
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "custCreate")]
    CustCreate,
    #[serde(rename = "ssoCreate")]
    SsoCreate,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserCreateRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserCreateRequestAction::AutoCreate => "autoCreate",
            UserCreateRequestAction::Create => "create",
            UserCreateRequestAction::CustCreate => "custCreate",
            UserCreateRequestAction::SsoCreate => "ssoCreate",
            UserCreateRequestAction::Noop => "",
            UserCreateRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserCreateRequestAction {
    fn default() -> UserCreateRequestAction {
        UserCreateRequestAction::Noop
    }
}
impl UserCreateRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserCreateRequestAction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserInfo {
    /**
     * User email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User's first name: cannot contain more than 5 Chinese words.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * User's last name: cannot contain more than 5 Chinese words.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * User password. Only used for the "autoCreate" function. The password has to have a minimum of 8 characters and maximum of 32 characters. By default (basic requirement), password must have at least one letter (a, b, c..), at least one number (1, 2, 3...) and include both uppercase and lowercase letters. It should not contain only one identical character repeatedly ('11111111' or 'aaaaaaaa') and it cannot contain consecutive characters ('12345678' or 'abcdefgh').
     *  
     *  \*\*Note:\*\* If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * User type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserCreateRequest {
    /**
     * Specify how to create the new user: <br>`create` - User will get an email sent from Zoom. There is a confirmation link in this email. The user will then need to use the link to activate their Zoom account. The user can then set or change their password.<br>`autoCreate` - This action is provided for the enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain.<br>`custCreate` - Users created via this option do not have passwords and will not have the ability to log into the Zoom Web Portal or the Zoom Client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must contact the ISV Platform Sales team at isv@zoom.us.<br>`ssoCreate` - This action is provided for the enabled “Pre-provisioning SSO User” option. A user created in this way has no password. If not a basic user, a personal vanity URL using the user name (no domain) of the provisioning email will be generated. If the user name or PMI is invalid or occupied, it will use a random number or random personal vanity URL.
     */
    #[serde(default, skip_serializing_if = "UserCreateRequestAction::is_noop")]
    pub action: UserCreateRequestAction,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_info: Option<UserInfo>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserCreateResponse {
    /**
     * User email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User's first name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * User ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * User's last name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
    /**
     * User type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/**
 * The user's login method:
 *   
 *   `0` — Facebook OAuth</br>`1` — Google OAuth</br>`24` — Apple OAuth</br>`27` — Microsoft OAuth</br>`97` — Mobile device</br>`98` — RingCentral OAuth</br>`99` — API user</br>`100` — Zoom Work email</br>`101` — Single Sign-On (SSO)
 *   
 *   The following login methods are only available in China:
 *   
 *   `11` — Phone number</br>`21` — WeChat</br>`23` — Alipay
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum LoginType {
    #[serde(rename = "0")]
    Zero,
    #[serde(rename = "1")]
    One,
    #[serde(rename = "100")]
    OneHundred,
    #[serde(rename = "101")]
    OneHundredAndOne,
    #[serde(rename = "11")]
    Eleven,
    #[serde(rename = "21")]
    TwentyOne,
    #[serde(rename = "23")]
    TwentyThree,
    #[serde(rename = "24")]
    TwentyFour,
    #[serde(rename = "27")]
    TwentySeven,
    #[serde(rename = "97")]
    NinetySeven,
    #[serde(rename = "98")]
    NinetyEight,
    #[serde(rename = "99")]
    NinetyNine,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for LoginType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            LoginType::Zero => "0",
            LoginType::One => "1",
            LoginType::OneHundred => "100",
            LoginType::OneHundredAndOne => "101",
            LoginType::Eleven => "11",
            LoginType::TwentyOne => "21",
            LoginType::TwentyThree => "23",
            LoginType::TwentyFour => "24",
            LoginType::TwentySeven => "27",
            LoginType::NinetySeven => "97",
            LoginType::NinetyEight => "98",
            LoginType::NinetyNine => "99",
            LoginType::Noop => "",
            LoginType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for LoginType {
    fn default() -> LoginType {
        LoginType::Noop
    }
}
impl LoginType {
    pub fn is_noop(&self) -> bool {
        matches!(self, LoginType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserResponse {
    /**
     * User ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/**
 * The phone number's label:
 *   
 *   * `Mobile`
 *   * `Office`
 *   * `Home`
 *   * `Fax`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserResponsePhoneNumbersLabel {
    #[serde(rename = "Fax")]
    Fax,
    #[serde(rename = "Home")]
    Home,
    #[serde(rename = "Mobile")]
    Mobile,
    #[serde(rename = "Office")]
    Office,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserResponsePhoneNumbersLabel {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserResponsePhoneNumbersLabel::Fax => "Fax",
            UserResponsePhoneNumbersLabel::Home => "Home",
            UserResponsePhoneNumbersLabel::Mobile => "Mobile",
            UserResponsePhoneNumbersLabel::Office => "Office",
            UserResponsePhoneNumbersLabel::Noop => "",
            UserResponsePhoneNumbersLabel::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserResponsePhoneNumbersLabel {
    fn default() -> UserResponsePhoneNumbersLabel {
        UserResponsePhoneNumbersLabel::Noop
    }
}
impl UserResponsePhoneNumbersLabel {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserResponsePhoneNumbersLabel::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserResponsePhoneNumbers {
    /**
     * Country code of the phone number. For example, for United States phone numbers, the value of this field should be "+1".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * [Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `number` field is a Brazil based number, the value of the `country` field should be `BR`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * The phone number's label:
     *  
     *  \* `Mobile`
     *  \* `Office`
     *  \* `Home`
     *  \* `Fax`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<UserResponsePhoneNumbersLabel>,
    /**
     * Phone number of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Indicates whether the phone number has been verified by Zoom or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub verified: bool,
}

/**
 * Status of user's account.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserResponseStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserResponseStatus::Active => "active",
            UserResponseStatus::Inactive => "inactive",
            UserResponseStatus::Pending => "pending",
            UserResponseStatus::Noop => "",
            UserResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserResponseStatus {
    fn default() -> UserResponseStatus {
        UserResponseStatus::Noop
    }
}
impl UserResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserResponseStatus::Noop)
    }
}

/// Custom attribute(s) that have been assigned to the user.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserResponseCustomAttributes {
    /**
     * Custom attribute(s) that have been assigned to the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub key: String,
    /**
     * Custom attribute(s) that have been assigned to the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Custom attribute(s) that have been assigned to the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserResponseData {
    /**
     * User's account ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_id: String,
    /**
     * CMS ID of user, only enabled for Kaltura integration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub cms_user_id: String,
    /**
     * User's company.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub company: String,
    /**
     * The date and time at which this user was created.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Custom attribute(s) that have been assigned to the user.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<UserResponseCustomAttributes>,
    /**
     * IDs of the web groups user belongs to.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub group_ids: Vec<String>,
    /**
     * User's host key.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_key: String,
    /**
     * IM IDs of the groups user belongs to.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub im_group_ids: Vec<String>,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jid: String,
    /**
     * User's job title.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub job_title: String,
    /**
     * Default language for the Zoom Web Portal.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub language: String,
    /**
     * User's location.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * The user's login method:
     *  
     *  `0` — Facebook OAuth</br>`1` — Google OAuth</br>`24` — Apple OAuth</br>`27` — Microsoft OAuth</br>`97` — Mobile device</br>`98` — RingCentral OAuth</br>`99` — API user</br>`100` — Zoom Work email</br>`101` — Single Sign-On (SSO)
     *  
     *  The following login methods are only available in China:
     *  
     *  `11` — Phone number</br>`21` — WeChat</br>`23` — Alipay
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub login_type: i64,
    /**
     * The manager for the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub manager: String,
    /**
     * User's personal meeting url.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub personal_meeting_url: String,
    /**
     * \*\*Note:\*\* This field has been \*\*deprecated\*\* and will not be supported in the future. Use the \*\*phone_numbers\*\* field instead of this field. <br> User's country for Company Phone Number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_country: String,
    /**
     * \*\*Note:\*\* This field has been \*\*deprecated\*\* and will not be supported in the future. Use the \*\*phone_numbers\*\* field instead of this field. <br> User's phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phone_numbers: Option<UserResponsePhoneNumbers>,
    /**
     * The URL for user's profile picture.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub pic_url: String,
    /**
     * United plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans). Only returned if user is enrolled in the Zoom United plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub plan_united_type: String,
    /**
     * Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub role_id: String,
    /**
     * Status of user's account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<UserResponseStatus>,
    /**
     * Displays `true` if user has enabled PMI for instant meetinsgs, `false` otherwise.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi: bool,
    /**
     * Personal meeting room URL, if the user has one.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub vanity_url: String,
    /**
     * Displays whether user is verified or not. <br>
     *  `1` - Account verified.<br>
     *  `0` - Account not verified.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub verified: i64,
}

/// All of the following types:
///
/// - `UserResponse`
/// - `User`
/// - `UserResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserResponseAllOf {
    /**
     * The user object represents a specific user on Zoom.
     */
    User(User),
    UserResponse(UserResponse),
    UserResponseData(UserResponseData),
}

/**
 * Delete action options:<br>`disassociate` - Disassociate a user.<br>`delete`-  Permanently delete a user.<br>Note: To delete pending user in the account, use `disassociate`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserDeleteAction {
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "disassociate")]
    Disassociate,
    FallthroughString(String),
}

impl std::fmt::Display for UserDeleteAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserDeleteAction::Delete => "delete",
            UserDeleteAction::Disassociate => "disassociate",
            UserDeleteAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserDeleteAction {
    fn default() -> UserDeleteAction {
        UserDeleteAction::Disassociate
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserZakResponse {
    /**
     * The user's ZAK.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub token: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserAssistantCreateResponse {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub add_at: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * User ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ids: String,
}

/**
 * `meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the user's account.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the user's account.<br>
 *   `meeting_security`: Use this query parameter to view meeting security settings applied on the user's account.<br>
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserSettingsOption {
    #[serde(rename = "meeting_authentication")]
    MeetingAuthentication,
    #[serde(rename = "recording_authentication")]
    RecordingAuthentication,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserSettingsOption {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserSettingsOption::MeetingAuthentication => "meeting_authentication",
            UserSettingsOption::RecordingAuthentication => "recording_authentication",
            UserSettingsOption::Noop => "",
            UserSettingsOption::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserSettingsOption {
    fn default() -> UserSettingsOption {
        UserSettingsOption::Noop
    }
}
impl UserSettingsOption {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserSettingsOption::Noop)
    }
}

/// One of the following types:
///
/// - `UserSettings`
/// - `Domains`
/// - `MeetingSecuritySettings`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserSettingsResponseOneOf {
    Domains(Domains),
    MeetingSecuritySettings(MeetingSecuritySettings),
    UserSettings(UserSettings),
}

/// One of the following types:
///
/// - `UserSettingsUpdate`
/// - `Domains`
/// - `MeetingSecuritySettings`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserSettingsUpdateRequestOneOf {
    Domains(Domains),
    MeetingSecuritySettings(MeetingSecuritySettings),
    UserSettingsUpdate(UserSettingsUpdate),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserSettingsUpdateOption {
    #[serde(rename = "meeting_authentication")]
    MeetingAuthentication,
    #[serde(rename = "meeting_secuirty")]
    MeetingSecuirty,
    #[serde(rename = "recording_authentication")]
    RecordingAuthentication,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserSettingsUpdateOption {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserSettingsUpdateOption::MeetingAuthentication => "meeting_authentication",
            UserSettingsUpdateOption::MeetingSecuirty => "meeting_secuirty",
            UserSettingsUpdateOption::RecordingAuthentication => "recording_authentication",
            UserSettingsUpdateOption::Noop => "",
            UserSettingsUpdateOption::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserSettingsUpdateOption {
    fn default() -> UserSettingsUpdateOption {
        UserSettingsUpdateOption::Noop
    }
}
impl UserSettingsUpdateOption {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserSettingsUpdateOption::Noop)
    }
}

/**
 * The action types:<br>`activate` - Activate a deactivated user.<br>`deactivate` - Deactivate a user.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserStatusRequestAction {
    #[serde(rename = "activate")]
    Activate,
    #[serde(rename = "deactivate")]
    Deactivate,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserStatusRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserStatusRequestAction::Activate => "activate",
            UserStatusRequestAction::Deactivate => "deactivate",
            UserStatusRequestAction::Noop => "",
            UserStatusRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserStatusRequestAction {
    fn default() -> UserStatusRequestAction {
        UserStatusRequestAction::Noop
    }
}
impl UserStatusRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserStatusRequestAction::Noop)
    }
}

/// The action.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserStatusRequest {
    /**
     * The action types:<br>`activate` - Activate a deactivated user.<br>`deactivate` - Deactivate a user.
     */
    #[serde(default, skip_serializing_if = "UserStatusRequestAction::is_noop")]
    pub action: UserStatusRequestAction,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserPasswordRequest {
    /**
     * User password. Should be less than 32 characters.
     *  
     *  \*\*Note:\*\* If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PacAccounts {
    /**
     * Conference ID.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub conference_id: i64,
    /**
     * List of dedicated dial-in numbers.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dedicated_dial_in_number: Vec<DedicatedDialInNumber>,
    /**
     * List of global dial-in numbers.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub global_dial_in_numbers: Vec<DedicatedDialInNumber>,
    /**
     * Listen-Only password: numeric value - length is less than 6.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub listen_only_password: String,
    /**
     * Participant password: numeric value - length is less than 6.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub participant_password: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserPaCsResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub pac_accounts: Vec<PacAccounts>,
}

/**
 * Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>
 *   `media_link` - Media link
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserTsPsResponseTspAccountsDialInNumbersType {
    #[serde(rename = "media_link")]
    MediaLink,
    #[serde(rename = "toll")]
    Toll,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserTsPsResponseTspAccountsDialInNumbersType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserTsPsResponseTspAccountsDialInNumbersType::MediaLink => "media_link",
            UserTsPsResponseTspAccountsDialInNumbersType::Toll => "toll",
            UserTsPsResponseTspAccountsDialInNumbersType::Tollfree => "tollfree",
            UserTsPsResponseTspAccountsDialInNumbersType::Noop => "",
            UserTsPsResponseTspAccountsDialInNumbersType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserTsPsResponseTspAccountsDialInNumbersType {
    fn default() -> UserTsPsResponseTspAccountsDialInNumbersType {
        UserTsPsResponseTspAccountsDialInNumbersType::Noop
    }
}
impl UserTsPsResponseTspAccountsDialInNumbersType {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserTsPsResponseTspAccountsDialInNumbersType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserTsPsResponseTspAccountsDialInNumbers {
    /**
     * Country code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * Country Label, if passed, will display in place of code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country_label: String,
    /**
     * Dial-in number: length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>
     *  `media_link` - Media link
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<UserTsPsResponseTspAccountsDialInNumbersType>,
}

/**
 * Telephony bridge
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserTsPsResponseTspAccountsBridge {
    #[serde(rename = "EU_TSP_TB")]
    EuTspTb,
    #[serde(rename = "US_TSP_TB")]
    UsTspTb,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserTsPsResponseTspAccountsBridge {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserTsPsResponseTspAccountsBridge::EuTspTb => "EU_TSP_TB",
            UserTsPsResponseTspAccountsBridge::UsTspTb => "US_TSP_TB",
            UserTsPsResponseTspAccountsBridge::Noop => "",
            UserTsPsResponseTspAccountsBridge::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserTsPsResponseTspAccountsBridge {
    fn default() -> UserTsPsResponseTspAccountsBridge {
        UserTsPsResponseTspAccountsBridge::Noop
    }
}
impl UserTsPsResponseTspAccountsBridge {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserTsPsResponseTspAccountsBridge::Noop)
    }
}

/// List of TSP accounts.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspAccounts {
    /**
     * Conference code: numeric value, length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub conference_code: String,
    /**
     * List of TSP accounts.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dial_in_numbers: Vec<UserTsPsResponseTspAccountsDialInNumbers>,
    /**
     * List of TSP accounts.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Leader PIN: numeric value, length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub leader_pin: String,
    /**
     * List of TSP accounts.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp_bridge: Option<UserTsPsResponseTspAccountsBridge>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserTsPsResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tsp_accounts: Vec<TspAccounts>,
}

/**
 * Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number. <br> `media_link` - Media link phone number. This is used for PSTN integration instead of a paid bridge number.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum TspAccountDialInNumbersType {
    #[serde(rename = "media_link")]
    MediaLink,
    #[serde(rename = "toll")]
    Toll,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for TspAccountDialInNumbersType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            TspAccountDialInNumbersType::MediaLink => "media_link",
            TspAccountDialInNumbersType::Toll => "toll",
            TspAccountDialInNumbersType::Tollfree => "tollfree",
            TspAccountDialInNumbersType::Noop => "",
            TspAccountDialInNumbersType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for TspAccountDialInNumbersType {
    fn default() -> TspAccountDialInNumbersType {
        TspAccountDialInNumbersType::Noop
    }
}
impl TspAccountDialInNumbersType {
    pub fn is_noop(&self) -> bool {
        matches!(self, TspAccountDialInNumbersType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspAccountDialInNumbers {
    /**
     * Country code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * Country Label, if passed, will display in place of code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country_label: String,
    /**
     * Dial-in number: length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number. <br> `media_link` - Media link phone number. This is used for PSTN integration instead of a paid bridge number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<TspAccountDialInNumbersType>,
}

/// TSP account of the user.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspAccount {
    /**
     * Conference code: numeric value, length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub conference_code: String,
    /**
     * TSP account of the user.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dial_in_numbers: Vec<TspAccountDialInNumbers>,
    /**
     * TSP account of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Leader PIN: numeric value, length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub leader_pin: String,
    /**
     * TSP account of the user.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp_bridge: Option<TspBridge>,
}

/**
 * Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>`media_link` - Media Link Phone Number. It is used for PSTN integration instead of paid bridge number.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum TspAccountDialInNumbersTypeData {
    #[serde(rename = "media_link")]
    MediaLink,
    #[serde(rename = "toll")]
    Toll,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for TspAccountDialInNumbersTypeData {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            TspAccountDialInNumbersTypeData::MediaLink => "media_link",
            TspAccountDialInNumbersTypeData::Toll => "toll",
            TspAccountDialInNumbersTypeData::Tollfree => "tollfree",
            TspAccountDialInNumbersTypeData::Noop => "",
            TspAccountDialInNumbersTypeData::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for TspAccountDialInNumbersTypeData {
    fn default() -> TspAccountDialInNumbersTypeData {
        TspAccountDialInNumbersTypeData::Noop
    }
}
impl TspAccountDialInNumbersTypeData {
    pub fn is_noop(&self) -> bool {
        matches!(self, TspAccountDialInNumbersTypeData::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspAccountDialInNumbersData {
    /**
     * Country code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * Country Label, if passed, will display in place of code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country_label: String,
    /**
     * Dial-in number: length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number.<br>`media_link` - Media Link Phone Number. It is used for PSTN integration instead of paid bridge number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<TspAccountDialInNumbersTypeData>,
}

/// TSP account.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TspAccountData {
    /**
     * Conference code: numeric value, length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub conference_code: String,
    /**
     * TSP account.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dial_in_numbers: Vec<TspAccountDialInNumbersData>,
    /**
     * Leader PIN: numeric value, length is less than 16.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub leader_pin: String,
    /**
     * TSP account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tsp_bridge: Option<TspBridge>,
}

/**
 * User token types:<br>`token` - Used for starting meetings with the client SDK. This token expires in 14 days and a new token will be returned after the expiry.<br>`zak` - Used for generating the start meeting URL. The token expiration time is two hours. For API users, the expiration time is 90 days.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UserTokenType {
    #[serde(rename = "token")]
    Token,
    #[serde(rename = "zak")]
    Zak,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UserTokenType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UserTokenType::Token => "token",
            UserTokenType::Zak => "zak",
            UserTokenType::Noop => "",
            UserTokenType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UserTokenType {
    fn default() -> UserTokenType {
        UserTokenType::Noop
    }
}
impl UserTokenType {
    pub fn is_noop(&self) -> bool {
        matches!(self, UserTokenType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserTokenResponse {
    /**
     * User token.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub token: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserEmailResponse {
    /**
     * Indicates whether or not the email already exists in Zoom.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub existed_email: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserEmailUpdateRequest {
    /**
     * User’s email. The length should be less than 128 characters.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UserVanityNameResponse {
    /**
     * If `true`, it indicates that the personal meeting room with the given name exists.<br> `false` - The room name does not exist.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub existed: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarCreateResponse {
    /**
     * Email address of the meeting host.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_email: String,
    /**
     * ID of the user set as host of the webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_id: String,
    /**
     * Webinar ID in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the webinar number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Specify whether or not registrants of this Webinar should receieve confirmation emails.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub registrants_confirmation_email: bool,
    /**
     * Unique identifier of the Webinar template. Use this field only if you would like to [schedule the webinar using an existing template](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates#schedule). The value of this field can be retrieved from [List Webinar Templates](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/listwebinartemplates) API.
     *  You must provide the user ID of the host instead of the email address in the `userId` path parameter in order to use a template for scheduling a Webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub template_id: String,
    /**
     * Unique identifier of a Webinar. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Once a Webinar ends, the value of uuid for the same webinar will be different from when it was scheduled.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

/// All of the following types:
///
/// - `WebinarCreateResponse`
/// - `WebinarInfo`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarCreateResponseAllOf {
    WebinarCreateResponse(WebinarCreateResponse),
    /**
     * Webinar object.
     */
    WebinarInfo(WebinarInfo),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarResponse {
    /**
     * Email address of the meeting host.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_email: String,
    /**
     * ID of the user set as host of webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_id: String,
    /**
     * Webinar ID in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the webinar number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * Unique Webinar ID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). You can retrieve a list of UUIDs from past Webinar instances using [this API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/pastwebinars). Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

/// All of the following types:
///
/// - `WebinarResponse`
/// - `WebinarInfo`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarResponseAllOf {
    /**
     * Webinar object.
     */
    WebinarInfo(WebinarInfo),
    WebinarResponse(WebinarResponse),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListWebinarParticipantsResponse {
    /**
     * Unique identifier of the participant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the participant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Email address of the participant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_email: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListWebinarParticipantsResponseData {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of pages returned for this request.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * The total number of records returned from a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<ListWebinarParticipantsResponse>,
    /**
     * The total number of records available across all pages.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarStatusRequestAction {
    #[serde(rename = "end")]
    End,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for WebinarStatusRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            WebinarStatusRequestAction::End => "end",
            WebinarStatusRequestAction::Noop => "",
            WebinarStatusRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for WebinarStatusRequestAction {
    fn default() -> WebinarStatusRequestAction {
        WebinarStatusRequestAction::Noop
    }
}
impl WebinarStatusRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, WebinarStatusRequestAction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarStatusRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<WebinarStatusRequestAction>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarPanelistCreateResponse {
    /**
     * Webinar Id.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The time at which the panelist was added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub updated_at: Option<chrono::DateTime<chrono::Utc>>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarRegistrantCreateResponse {
    /**
     * Webinar ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Unique URL for this registrant to join the Webinar. This URL should only be shared with the registrant for whom the API request was made.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub join_url: String,
    /**
     * Registrant ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub registrant_id: String,
    /**
     * Start time
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Topic
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddBatchWebinarRegistrantsRequest {
    /**
     * Email address of the registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * First name of the registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub first_name: String,
    /**
     * Last name of the registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub last_name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddBatchRegistrantsRequest {
    /**
     * If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`.
     *  
     *  You \*\*cannot\*\* use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_approve: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub registrants: Vec<AddBatchWebinarRegistrantsRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddBatchWebinarRegistrantsResponse {
    /**
     * Email address of the registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Unique URL using which registrant can join the webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub join_url: String,
    /**
     * Unique identifier of the registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub registrant_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddBatchWebinarRegistrantsResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub registrants: Vec<AddBatchWebinarRegistrantsResponse>,
}

/**
 * Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarRegistrantStatusRequestAction {
    #[serde(rename = "approve")]
    Approve,
    #[serde(rename = "cancel")]
    Cancel,
    #[serde(rename = "deny")]
    Deny,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for WebinarRegistrantStatusRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            WebinarRegistrantStatusRequestAction::Approve => "approve",
            WebinarRegistrantStatusRequestAction::Cancel => "cancel",
            WebinarRegistrantStatusRequestAction::Deny => "deny",
            WebinarRegistrantStatusRequestAction::Noop => "",
            WebinarRegistrantStatusRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for WebinarRegistrantStatusRequestAction {
    fn default() -> WebinarRegistrantStatusRequestAction {
        WebinarRegistrantStatusRequestAction::Noop
    }
}
impl WebinarRegistrantStatusRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, WebinarRegistrantStatusRequestAction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarRegistrantStatusRequestRegistrants {
    /**
     * Registrant's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Registrant ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarRegistrantStatusRequest {
    /**
     * Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "WebinarRegistrantStatusRequestAction::is_noop"
    )]
    pub action: WebinarRegistrantStatusRequestAction,
    /**
     * List of registrants.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub registrants: Vec<WebinarRegistrantStatusRequestRegistrants>,
}

/**
 * Status of the Webinar Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarPollCreateResponseStatus {
    #[serde(rename = "ended")]
    Ended,
    #[serde(rename = "notstart")]
    Notstart,
    #[serde(rename = "sharing")]
    Sharing,
    #[serde(rename = "started")]
    Started,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for WebinarPollCreateResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            WebinarPollCreateResponseStatus::Ended => "ended",
            WebinarPollCreateResponseStatus::Notstart => "notstart",
            WebinarPollCreateResponseStatus::Sharing => "sharing",
            WebinarPollCreateResponseStatus::Started => "started",
            WebinarPollCreateResponseStatus::Noop => "",
            WebinarPollCreateResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for WebinarPollCreateResponseStatus {
    fn default() -> WebinarPollCreateResponseStatus {
        WebinarPollCreateResponseStatus::Noop
    }
}
impl WebinarPollCreateResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, WebinarPollCreateResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct WebinarPollGetResponse {
    /**
     * Webinar Poll ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Status of the Webinar Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<WebinarPollCreateResponseStatus>,
}

/// All of the following types:
///
/// - `WebinarPollCreateResponse`
/// - `Poll`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarPollCreateResponseAllOf {
    /**
     * Poll
     */
    Poll(Poll),
    WebinarPollCreateResponse(WebinarPollCreateResponse),
}

/// All of the following types:
///
/// - `WebinarPollGetResponse`
/// - `Poll`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarPollGetResponseAllOf {
    /**
     * Poll
     */
    Poll(Poll),
    WebinarPollGetResponse(WebinarPollGetResponse),
}

/// All of the following types:
///
/// - `WebinarRegistrantQuestions`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarRegistrantsQuestionsGetResponseAllOf {
    /**
     * Webinar Registrant Questions
     */
    WebinarRegistrantQuestions(WebinarRegistrantQuestions),
}

/// JSON template describing how the message should be displayed for the user. For more information please see our ["Send Message" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Content {}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SendchatbotRequest {
    /**
     * Account ID of the authorized account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_id: String,
    /**
     * JSON template describing how the message should be displayed for the user. For more information please see our ["Send Message" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
     */
    #[serde()]
    pub content: Content,
    /**
     * \*\*Optional\*\*<br>
     *  Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_markdown_support: Option<bool>,
    /**
     * Robot JID created when enabling chatbot features on your marketplace app.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub robot_jid: String,
    /**
     * Unique JID of reciever. Can be a group or user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_jid: String,
    /**
     * \*\*Optional\*\*<br>
     *  The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_jid: String,
    /**
     * \*\*Optional\*\*<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub visible_to_user: String,
}

/// JSON template describing how the edited message should be displayed for the user. For more information please see our ["Send Message" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct EditChatbotMessageRequestContent {}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct EditChatbotMessageRequest {
    /**
     * The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_id: String,
    /**
     * JSON template describing how the edited message should be displayed for the user. For more information please see our ["Send Message" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
     */
    #[serde()]
    pub content: EditChatbotMessageRequestContent,
    /**
     * \*\*Optional\*\*<br>
     *  Enable or disable markdown parser to your chatbot message. Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_markdown_support: Option<bool>,
    /**
     * Robot JID created when enabling chatbot features on your marketplace app.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub robot_jid: String,
    /**
     * \*\*Optional\*\*<br>
     *  The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_jid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct EditChatbotMessageResponse {
    /**
     * Unique Identifier of the updated message,
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message_id: String,
    /**
     * The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub robot_jid: String,
    /**
     * The date and time at which the message was sent.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub sent_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The JID of the Channel or User to whom the message was sent.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_jid: String,
    /**
     * The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_jid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DeleteChatbotMessageRequest {
    /**
     * The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_id: String,
    /**
     * The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub robot_jid: String,
    /**
     * The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_jid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DeleteChatbotMessageResponse {
    /**
     * Unique identifier of the message that was deleted.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message_id: String,
    /**
     * The BotJID of the Chatbot app. It can be found in the Chat Subscription Section on the Features page of your App Dashboard
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub robot_jid: String,
    /**
     * The date and time at which the message was deleted.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sent_time: String,
    /**
     * The JID of the Channel or User to whom the message was sent.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to_jid: String,
    /**
     *  The UserJID of the user on whose behalf the message was sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_jid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetLiveStreamDetailsResponse {
    /**
     * Live streaming page URL. This is the URL using which anyone can view the live stream of the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub page_url: String,
    /**
     * Stream Key.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub stream_key: String,
    /**
     * Stream URL.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub stream_url: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ClientFeedbackDetails {
    /**
     * Email address of the participant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Meeting ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub meeting_id: String,
    /**
     * Participant Name
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub participant_name: String,
    /**
     * Time at which the feedback was submitted by the participant.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub time: Option<chrono::DateTime<chrono::Utc>>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DashboardClientFeedbackDetailResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub client_feedback_details: Vec<ClientFeedbackDetails>,
}

/// All of the following types:
///
/// - `ReportCloudRecordingResponse`
/// - `PaginationToken4ImChat`
/// - `DashboardClientFeedbackDetailResponse`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DashboardClientFeedbackDetailResponseAllOf {
    DashboardClientFeedbackDetailResponse(DashboardClientFeedbackDetailResponse),
    /**
     * Pagination object.
     */
    PaginationToken4ImChat(PaginationToken4ImChat),
    ReportCloudRecordingResponse(ReportCloudRecordingResponse),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListimmessagesResponseMessages {
    /**
     * IM message send time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * IM message UUID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * IM message content.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
    /**
     * IM message sender.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sender: String,
    /**
     * IM message send timestamp.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub timstamp: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListimmessagesResponse {
    /**
     * Query date time, format as yyyy-mm-dd.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Array of im messages.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub messages: Vec<ListimmessagesResponseMessages>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SendimmessagesRequest {
    /**
     * IM message content.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SendimmessagesResponse {
    /**
     * IM message UUID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CallingPlan {
    /**
     * The [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) of calling plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneUserResponseNumbers {
    /**
     * Phone Number Id
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

/**
 * The status of the user.<br>
 *   `activate`: An active user. <br>
 *   `deactivate`: User has been deactivated from the ZoomPhone system.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PhoneUserResponseStatus {
    #[serde(rename = "activate")]
    Activate,
    #[serde(rename = "deactivate")]
    Deactivate,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for PhoneUserResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            PhoneUserResponseStatus::Activate => "activate",
            PhoneUserResponseStatus::Deactivate => "deactivate",
            PhoneUserResponseStatus::Noop => "",
            PhoneUserResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for PhoneUserResponseStatus {
    fn default() -> PhoneUserResponseStatus {
        PhoneUserResponseStatus::Noop
    }
}
impl PhoneUserResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, PhoneUserResponseStatus::Noop)
    }
}

/// A list of the user's policies. Policies are exceptions to the user's calling plan restrictions.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Policy {
    /**
     * A list of the user's policies. Policies are exceptions to the user's calling plan restrictions.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub international_calling: bool,
}

/// Zoom User Profile
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneUserResponse {
    /**
     * Zoom User Profile
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub calling_plan: Vec<CallingPlan>,
    /**
     * Zoom User Profile
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Zoom User Profile
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Zoom User Profile
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Zoom User Profile
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<PhoneUserResponseNumbers>,
    /**
     * Zoom User Profile
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_user_id: String,
    /**
     * Zoom User Profile
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<Policy>,
    /**
     * Zoom User Profile
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub site_admin: bool,
    /**
     * Zoom User Profile
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
    /**
     * Zoom User Profile
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<PhoneUserResponseStatus>,
}

/// A list of the user's policies.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateUserProfileRequestPolicy {
    /**
     * A list of the user's policies.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub international_calling: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateUserProfileRequest {
    /**
     * The extension number of the user. The number must be complete (i.e. site number + short extension).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * A list of the user's policies.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UpdateUserProfileRequestPolicy>,
    /**
     * Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672) where the user should be moved or assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneSettingResponseCountry {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct MultipleSites {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enabled: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_code: String,
}

/// BYOC setting
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Byoc {
    /**
     * BYOC setting
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ShowDeviceIpCallLog {
    /**
     * If the value of this field is `true`, then to allow `/phone/call_logs` and `/phone/call_logs/{callLogId}` APIs show `device_public_ip` and `device_private_ip` in response.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

/// Zoom Account Setting
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneSettingResponse {
    /**
     * Zoom Account Setting
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub byoc: Option<Byoc>,
    /**
     * Zoom Account Setting
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub country: Option<PhoneSettingResponseCountry>,
    /**
     * Zoom Account Setting
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiple_sites: Option<MultipleSites>,
    /**
     * Zoom Account Setting
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub show_device_ip_for_call_log: Option<ShowDeviceIpCallLog>,
}

/// Only [master account owners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) can use this MA API to enable BYOC(Bring your own carrier) option for a sub account.<br>
///
/// **Scope**:<br>
/// * `phone:master` <br>
///
/// **Prerequisites**: <br>
/// * Business or enterprise Account.<br>
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdatePhoneSettingsRequestByoc {
    /**
     * Only [master account owners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) can use this MA API to enable BYOC(Bring your own carrier) option for a sub account.<br>
     *  
     *  \*\*Scope\*\*:<br>
     *  \* `phone:master` <br>
     *  
     *  \*\*Prerequisites\*\*: <br>
     *  \* Business or enterprise Account.<br>
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdatePhoneSettingsRequestShowDeviceIpCallLog {
    /**
     * Set the value of this field to `true` to allow `/phone/call_logs` and `/phone/call_logs/{callLogId}` APIs show `device_public_ip` and `device_private_ip` in response.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdatePhoneSettingsRequest {
    /**
     * Only [master account owners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) can use this MA API to enable BYOC(Bring your own carrier) option for a sub account.<br>
     *  
     *  \*\*Scope\*\*:<br>
     *  \* `phone:master` <br>
     *  
     *  \*\*Prerequisites\*\*: <br>
     *  \* Business or enterprise Account.<br>
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub byoc: Option<UpdatePhoneSettingsRequestByoc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub show_device_ip_for_call_log: Option<UpdatePhoneSettingsRequestShowDeviceIpCallLog>,
}

/// Outbound Caller Info
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct OutboundCaller {
    /**
     * Outbound Caller Info
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct KeysPositions {
    /**
     * Primary number of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub primary_number: String,
}

/// Contains information on phones or devices provisioned for the user.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct DeskPhone {
    /**
     * Contains information on phones or devices provisioned for the user.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys_positions: Option<KeysPositions>,
}

/// [Shared voicemail access](https://support.zoom.us/hc/en-us/articles/360033863991-Sharing-and-controlling-access-to-a-voicemail-inbox) assigned to user.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct VoiceMail {
    /**
     * [Shared voicemail access](https://support.zoom.us/hc/en-us/articles/360033863991-Sharing-and-controlling-access-to-a-voicemail-inbox) assigned to user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub access_user_id: String,
    /**
     * [Shared voicemail access](https://support.zoom.us/hc/en-us/articles/360033863991-Sharing-and-controlling-access-to-a-voicemail-inbox) assigned to user.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub delete: bool,
    /**
     * [Shared voicemail access](https://support.zoom.us/hc/en-us/articles/360033863991-Sharing-and-controlling-access-to-a-voicemail-inbox) assigned to user.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub download: bool,
    /**
     * [Shared voicemail access](https://support.zoom.us/hc/en-us/articles/360033863991-Sharing-and-controlling-access-to-a-voicemail-inbox) assigned to user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct OutboundCallerIds {
    /**
     * Whether the outbound caller ID is the default or not. If `true`, the outbound caller ID is the default caller ID.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub is_default: bool,
    /**
     * Outbound caller name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Outbound caller number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

/// The site's country.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneUserSettingsResponseCountry {
    /**
     * The site's country.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * The site's country.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country_code: String,
    /**
     * The site's country.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// Phone User Setting
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneUserSettingsResponse {
    /**
     * Phone User Setting
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub area_code: String,
    /**
     * Phone User Setting
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub company_number: String,
    /**
     * Phone User Setting
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub country: Option<PhoneUserSettingsResponseCountry>,
    /**
     * Phone User Setting
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desk_phone: Option<DeskPhone>,
    /**
     * Phone User Setting
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Phone User Setting
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outbound_caller: Option<OutboundCaller>,
    /**
     * Phone User Setting
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outbound_caller_ids: Option<OutboundCallerIds>,
    /**
     * Phone User Setting
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub voice_mail: Option<VoiceMail>,
}

/**
 * Template type.<br>
 *   The value of this field can be one of the following:<br>
 *   * `user`<br>
 *   * `group`<br>
 *   * `autReceptionist`<br>
 *   * `commonArea`<br>
 *   * `zr`<br>
 *   * `interop`<br>
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListSettingTemplatesResponseType {
    #[serde(rename = "autReceptionist")]
    AutReceptionist,
    #[serde(rename = "commonArea")]
    CommonArea,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "interop")]
    Interop,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "zr")]
    Zr,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListSettingTemplatesResponseType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListSettingTemplatesResponseType::AutReceptionist => "autReceptionist",
            ListSettingTemplatesResponseType::CommonArea => "commonArea",
            ListSettingTemplatesResponseType::Group => "group",
            ListSettingTemplatesResponseType::Interop => "interop",
            ListSettingTemplatesResponseType::User => "user",
            ListSettingTemplatesResponseType::Zr => "zr",
            ListSettingTemplatesResponseType::Noop => "",
            ListSettingTemplatesResponseType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListSettingTemplatesResponseType {
    fn default() -> ListSettingTemplatesResponseType {
        ListSettingTemplatesResponseType::Noop
    }
}
impl ListSettingTemplatesResponseType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListSettingTemplatesResponseType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Templates {
    /**
     * Template description.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Unique identifier of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Template name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Template type.<br>
     *  The value of this field can be one of the following:<br>
     *  \* `user`<br>
     *  \* `group`<br>
     *  \* `autReceptionist`<br>
     *  \* `commonArea`<br>
     *  \* `zr`<br>
     *  \* `interop`<br>
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<ListSettingTemplatesResponseType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSettingTemplatesResponse {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call. The default is \*\*30\*\* and the maximum is \*\*300\*\*.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub templates: Vec<Templates>,
    /**
     * The total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/**
 * The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AddSettingTemplateRequestType {
    #[serde(rename = "autoReceptionist")]
    AutoReceptionist,
    #[serde(rename = "commonarea")]
    Commonarea,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "interop")]
    Interop,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AddSettingTemplateRequestType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AddSettingTemplateRequestType::AutoReceptionist => "autoReceptionist",
            AddSettingTemplateRequestType::Commonarea => "commonarea",
            AddSettingTemplateRequestType::Group => "group",
            AddSettingTemplateRequestType::Interop => "interop",
            AddSettingTemplateRequestType::User => "user",
            AddSettingTemplateRequestType::Noop => "",
            AddSettingTemplateRequestType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AddSettingTemplateRequestType {
    fn default() -> AddSettingTemplateRequestType {
        AddSettingTemplateRequestType::Noop
    }
}
impl AddSettingTemplateRequestType {
    pub fn is_noop(&self) -> bool {
        matches!(self, AddSettingTemplateRequestType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddSettingTemplateRequest {
    /**
     * A description of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * The name of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Unique identifier of the site. Required only when multiple sites are enabled. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
    /**
     * The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`.
     */
    #[serde(
        default,
        skip_serializing_if = "AddSettingTemplateRequestType::is_noop",
        rename = "type"
    )]
    pub type_: AddSettingTemplateRequestType,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddSettingTemplateResponse {
    /**
     * Template description.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Template ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Template name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The type of template. Values include: `user`, `group`, `autoReceptionist`, `commonArea`, `zr`, or `interop`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct BatchAddLocationsRequestEmergencyAddress {
    /**
     * The location's physical address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address_line_1: String,
    /**
     * The location's optional physical address information. For example, a suite number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address_line_2: String,
    /**
     * The location's city.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * The location's country.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * The location's state/province/territory.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub state_code: String,
    /**
     * The location's VAT/NIF/CIF number. This number is used to get a new phone number online.
     *  
     *  \*\*Note:\*\* For Belgium, Netherlands, Portugal, Spain, and Switzerland, this field is required.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub vat_number: String,
    /**
     * The location's zip or postal code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zip: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct NetworkSwitches {
    /**
     * The location's assigned MAC address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    /**
     * The location's port label. You \*\*cannot\*\* pass this parameter with the `port_prefix` and `port_range` parameter.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port: String,
    /**
     * The location's port prefix. The prefix value \*\*cannot\*\* end with a digit.
     *  
     *  This parameter passes with the `port_range_from` and `port_range_to` parameters.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_prefix: String,
    /**
     * The location's port starting range number. This can be a non-negative integer value.
     *  
     *  This value \*\*must\*\* be less than or equal to the `port_range_to` value.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_range_from: String,
    /**
     * The location's port ending range number. This can be a non-negative integer value.
     *  
     *  This value \*\*cannot\*\* be less than the `port_range_from` value.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_range_to: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Locations {
    /**
     * The location's BSSID (Basic Service Set Identifier).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bssid: String,
    /**
     * The location's display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * The location's ELIN (Emergency Location Identification Number). This value can be a BYOC number. If you use a BYOC number, you will need to manually update the BYOC address with your carrier.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub elin: String,
    #[serde()]
    pub emergency_address: BatchAddLocationsRequestEmergencyAddress,
    /**
     * The location's ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub identifier: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub network_switches: Vec<NetworkSwitches>,
    /**
     * The location's parent location ID. Leave this value empty if the current location is a top location.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub parent_identifier: String,
    /**
     * The location's subnet or private IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub private_ip: String,
    /**
     * The location's public IP address. This field is required for top locations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub public_ip: String,
    /**
     * The location's assigned SIP routing group for outgoing calls. The system routes the call to the defined [SIP trunk](https://en.wikipedia.org/wiki/SIP_trunking) in the SIP groups when location-based routing is enabled.
     *  
     *  This only affects top locations and ignores all other locations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_group_name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct BatchAddLocationsRequest {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub locations: Vec<Locations>,
    /**
     * The site's ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct BatchAddLocationsResponse {
    /**
     * The location's display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * The location ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location_id: String,
}

/// The emergency service location's ELIN (Emergency Location Identification Number).
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Elin {
    /**
     * The emergency service location's ELIN (Emergency Location Identification Number).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * The emergency service location's ELIN (Emergency Location Identification Number).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListLocationsResponseNetworkSwitches {
    /**
     * The MAC address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    /**
     * The port's label.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port: String,
    /**
     * The port's prefix.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_prefix: String,
    /**
     * The port's range from value.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_range_from: String,
    /**
     * The port's range to value.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_range_to: String,
}

/// The emergency service location's SIP group information.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListLocationsResponseSipGroup {
    /**
     * The emergency service location's SIP group information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * The emergency service location's SIP group information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// The emergency service location's site information.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListLocationsResponseSite {
    /**
     * The emergency service location's site information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The emergency service location's site information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListLocationsResponse {
    /**
     * The emergency service location's BSSID (Basic Service Set Identifier).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bssid: String,
    /**
     * The emergency service location's ELIN (Emergency Location Identification Number).
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elin: Option<Elin>,
    /**
     * The emergency service location's ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The emergency service location's unique ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub identifier: String,
    /**
     * The emergency service location's name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub network_switches: Vec<ListLocationsResponseNetworkSwitches>,
    /**
     * The parent location's ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub parent_location_id: String,
    /**
     * The emergency service location's subnet or private IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub private_ip: String,
    /**
     * The emergency service location's public IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub public_ip: String,
    /**
     * The emergency service location's SIP group information.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sip_group: Option<ListLocationsResponseSipGroup>,
    /**
     * The emergency service location's site information.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<ListLocationsResponseSite>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListLocationsResponseData {
    /**
     * Information about emergency service locations.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub locations: Vec<ListLocationsResponse>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned with a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddLocationRequest {
    /**
     * A comma-separated list of the emergency service location's BSSIDs (Basic Service Set Identifiers).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bssid: String,
    /**
     * The ELIN (Emergency Location Identification Number). This value must be a phone number ID or phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub elin_phone_number_id: String,
    /**
     * The emergency location address ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub emergency_address_id: String,
    /**
     * The emergency service location's name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The parent location's ID to assign to the emergency service location.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub parent_location_id: String,
    /**
     * A comma-separated list of the emergency service location's subnet or private IP addresses.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub private_ip: String,
    /**
     * A comma-separated list of the emergency service location's public IP addresses. This parameter is required for top locations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub public_ip: String,
    /**
     * The SIP group ID to assign to the emergency service location. This value is not required for non-top locations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_group_id: String,
    /**
     * The site ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddLocationResponse {
    /**
     * The phone's location ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The phone's location name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// The ELIN (Emergency Location Identification Number).
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetLocationResponseElin {
    /**
     * The ELIN (Emergency Location Identification Number).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * The ELIN (Emergency Location Identification Number).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number_id: String,
}

/// The emergency location's address information.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetLocationResponseEmergencyAddress {
    /**
     * The emergency location's address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address_line_1: String,
    /**
     * The emergency location's address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address_line_2: String,
    /**
     * The emergency location's address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * The emergency location's address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * The emergency location's address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The emergency location's address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub state_code: String,
    /**
     * The emergency location's address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub zip: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetLocationResponseNetworkSwitches {
    /**
     * The emergency location's assigned MAC address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    /**
     * The port label.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port: String,
    /**
     * The port prefix.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_prefix: String,
    /**
     * The port starting range number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_range_from: String,
    /**
     * The port ending range number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_range_to: String,
}

/// The emergency location's SIP group information.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetLocationResponseSipGroup {
    /**
     * The emergency location's SIP group information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * The emergency location's SIP group information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// The emergency location's site information.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetLocationResponseSite {
    /**
     * The emergency location's site information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The emergency location's site information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetLocationResponse {
    /**
     * The emergency service location's BSSIDs (Basic Service Set Identifiers).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bssid: String,
    /**
     * The ELIN (Emergency Location Identification Number).
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elin: Option<GetLocationResponseElin>,
    /**
     * The emergency location's address information.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emergency_address: Option<GetLocationResponseEmergencyAddress>,
    /**
     * The emergency location's ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The emergency location's name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub network_switches: Vec<GetLocationResponseNetworkSwitches>,
    /**
     * The emergency location's parent location ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub parent_location_id: String,
    /**
     * The emergency location's subnet or private IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub private_ip: String,
    /**
     * The emergency location's public IP address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub public_ip: String,
    /**
     * The emergency location's SIP group information.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sip_group: Option<GetLocationResponseSipGroup>,
    /**
     * The emergency location's site information.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<GetLocationResponseSite>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateLocationRequestNetworkSwitches {
    /**
     * The emergency location's assigned MAC address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    /**
     * The emergency location's port label. You \*\*cannot\*\* pass this parameter with the `port_prefix` and `port_range` parameter.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port: String,
    /**
     * The emergency location's port prefix. The prefix value \*\*cannot\*\* end with a digit.
     *  
     *  This parameter passes with the `port_range_from` and `port_range_to` parameters.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_prefix: String,
    /**
     * The emergency location's port starting range number. This can be a non-negative integer value.
     *  
     *  This value \*\*must\*\* be less than or equal to the `port_range_to` value.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_range_from: String,
    /**
     * The emergency location's port ending range number. This can be a non-negative integer value.
     *  
     *  This value \*\*cannot\*\* be less than the `port_range_from` value.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub port_range_to: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateLocationRequest {
    /**
     * A comma-separated list of the emergency service location's BSSIDs (Basic Service Set Identifiers).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bssid: String,
    /**
     * The ELIN (Emergency Location Identification Number). This value must be a phone number ID or phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub elin_phone_number_id: String,
    /**
     * The emergency location's address ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub emergency_address_id: String,
    /**
     * The emergency location's name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub network_switches: Vec<UpdateLocationRequestNetworkSwitches>,
    /**
     * A comma-separated list of the emergency service location's subnet or private IP addresses.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub private_ip: String,
    /**
     * A comma-separated list of the emergency service location's public IP addresses. This parameter is \*\*required\*\* for top locations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub public_ip: String,
    /**
     * The SIP group ID to assign to the emergency service location. This value is not required for non-top locations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_group_id: String,
}

/// The SIP trunk group.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SipTrunk {
    /**
     * The SIP trunk group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The SIP trunk group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SipGroups {
    /**
     * The SIP group's description.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * The SIP group's display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * The SIP group's ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Whether the SIP group's name is sent in the SIP header.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub send_sip_group_name: bool,
    /**
     * The SIP trunk group.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sip_trunk: Option<SipTrunk>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSipGroupsResponse {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned with a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * SIP group information.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sip_groups: Vec<SipGroups>,
}

/**
 * The type of template being queried. Values: `user`, `group`, `auto receptionist` `common area`,`zr`, `interop`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetSettingTemplateResponseType {
    #[serde(rename = "autoReceptionist")]
    AutoReceptionist,
    #[serde(rename = "commonArea")]
    CommonArea,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "interop")]
    Interop,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "zr")]
    Zr,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetSettingTemplateResponseType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetSettingTemplateResponseType::AutoReceptionist => "autoReceptionist",
            GetSettingTemplateResponseType::CommonArea => "commonArea",
            GetSettingTemplateResponseType::Group => "group",
            GetSettingTemplateResponseType::Interop => "interop",
            GetSettingTemplateResponseType::User => "user",
            GetSettingTemplateResponseType::Zr => "zr",
            GetSettingTemplateResponseType::Noop => "",
            GetSettingTemplateResponseType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetSettingTemplateResponseType {
    fn default() -> GetSettingTemplateResponseType {
        GetSettingTemplateResponseType::Noop
    }
}
impl GetSettingTemplateResponseType {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetSettingTemplateResponseType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSettingTemplateResponseProfile {
    /**
     * The area code from which the phone account was created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub area_code: String,
    /**
     * Name of the country where the template was created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AutoCallRecording {
    /**
     * Enable automatic call recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Values: inbound, outbound, both.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_calls: String,
    /**
     * Play a prompt to call participants when the recording has started.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_start_prompt: bool,
    /**
     * Allow call recording transcription.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_transcription: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AdHocCallRecording {
    /**
     * Allow current extension to record and save calls in the cloud.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Play a prompt to call participants when the recording has started.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_start_prompt: bool,
    /**
     * Allow call recording transcription.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_transcription: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Sms {
    /**
     * Allow user to send and receive messages.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub international_sms: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Voicemail {
    /**
     * Allow voicemail transcription.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_transcription: bool,
    /**
     * Allow current extension to access, receive, or share voicemail.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSettingTemplateResponsePolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ad_hoc_call_recording: Option<AdHocCallRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_call_recording: Option<AutoCallRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sms: Option<Sms>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub voicemail: Option<Voicemail>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CustomHours {
    /**
     * Values:<br>
     *  hh:mm
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveTime>,
    /**
     * Values:<br>
     *  hh:mm
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveTime>,
    /**
     * Values:<br>
     *  1-24 Hours,<br>
     *  2-customized hours
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * Values: 1-7 sun-sat
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub weekday: i64,
}

/**
 * Values:<br>
 *   1-user,<br>
 *   2-callQueue, <br>
 *   3-autoReceptionist,<br>
 *   4-commonAreaPhone,<br>
 *   5-zoomRoom, <br>
 *   7-sharedLineGroup
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType {
    #[serde(rename = "autoReceptionist")]
    AutoReceptionist,
    #[serde(rename = "callQueue")]
    CallQueue,
    #[serde(rename = "commonAreaPhone")]
    CommonAreaPhone,
    #[serde(rename = "sharedLineGroup")]
    SharedLineGroup,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "zoomRoom")]
    ZoomRoom,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display
    for GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::AutoReceptionist => "autoReceptionist",
GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::CallQueue => "callQueue",
GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::CommonAreaPhone => "commonAreaPhone",
GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::SharedLineGroup => "sharedLineGroup",
GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::User => "user",
GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::ZoomRoom => "zoomRoom",
GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::Noop => "",
GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::FallthroughString(s) => s,
}
.fmt(f)
    }
}

impl Default
    for GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType
{
    fn default(
    ) -> GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType {
        GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::Noop
    }
}
impl GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType::Noop)
    }
}

/// Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ConnectOperator {
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_:
        Option<GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct BusinessHours {
    /**
     * When a call is not answered:<br>
     *  0-Forward to voicemail;<br>
     *  1-Play a message, then disconnect; <br>
     *  9-Disconnect; <br>
     *  26-Forward to External Contacts; <br>
     *  50-Forward to another extension
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub business_hour_action: i64,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect_to_operator: Option<ConnectOperator>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_hours: Vec<CustomHours>,
    /**
     * Call Handling Ring Mode:<br>
     *  0-Simultaneous,<br>
     *  1-Sequential
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ring_type: Option<serde_json::Value>,
    /**
     * Ringing Duration for Each Device in seconds. Values:<br>
     *  15,20,25,30,35,40,45,50,55,60
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ringing_duration: Option<serde_json::Value>,
    /**
     * Values:<br>
     *  1-24 Hours, 7 Days a Week;<br>
     *  2-Custom Hours
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

/// Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSettingTemplateResponseUserSettingsCallHandlingCloseHoursConnectOperator {
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_:
        Option<GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CloseHours {
    /**
     * Action to take when a call is not answered:<br>
     *  0-Forward to voicemail; <br>
     *  1-Play a message, then disconnect; <br>
     *  9-Disconnect; <br>
     *  26-Forward to External Contacts; <br>
     *  50-Forward to another extension
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub close_hour_action: i64,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect_to_operator:
        Option<GetSettingTemplateResponseUserSettingsCallHandlingCloseHoursConnectOperator>,
    /**
     * Max Wait Time in seconds. Values:<br>
     *  15,20,25,30,35,40,45,50,55,60
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_wait_time: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CallHandling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub business_hours: Option<BusinessHours>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_hours: Option<CloseHours>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSettingTemplateResponseUserSettingsDeskPhone {
    /**
     * Pin code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub pin_code: String,
}

/**
 * The value of this field can be either `default` or `disable`.
 *   
 *   * `default`: This means that the hold music can be set using the [audio library](https://support.zoom.us/hc/en-us/articles/360028212652-Using-the-audio-library-to-customize-greetings-and-hold-music).
 *   
 *   * `disable`: This means that the hold music is disabled.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum HoldMusic {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "disable")]
    Disable,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for HoldMusic {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            HoldMusic::Default => "default",
            HoldMusic::Disable => "disable",
            HoldMusic::Noop => "",
            HoldMusic::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for HoldMusic {
    fn default() -> HoldMusic {
        HoldMusic::Noop
    }
}
impl HoldMusic {
    pub fn is_noop(&self) -> bool {
        matches!(self, HoldMusic::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSettingTemplateResponseUserSettings {
    /**
     * Audio prompt language code.<br> American English: `en-US`<br>
     *  British English: `en-GB`<br>
     *  Español americano: `es-US`<br>
     *  Français canadien: `fr-CA`<br>
     *  Dansk: `da-DK`<br>
     *  Deutsch: `de-DE`<br>
     *  Español: `es-ES`<br>
     *  Français: `fr-FR`<br>
     *  Italiano: `it-IT`<br>
     *  Nederlands: `nl-NL`<br>
     *  Portugues portugal: `pt-PT`<br>
     *  Japanese: `ja-JP`<br>
     *  Korean: `ko-KO`<br>
     *  Portugues brasil: `pt-BR`<br>
     *  Chinese: `zh-CN`<br>
     *  Taiwanese: `zh-TW`<br>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_prompt_language: String,
    /**
     * Block Calls without Caller ID.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub block_calls_without_caller_id: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub call_handling: Option<CallHandling>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desk_phone: Option<GetSettingTemplateResponseUserSettingsDeskPhone>,
    /**
     * The value of this field can be either `default` or `disable`.
     *  
     *  \* `default`: This means that the hold music can be set using the [audio library](https://support.zoom.us/hc/en-us/articles/360028212652-Using-the-audio-library-to-customize-greetings-and-hold-music).
     *  
     *  \* `disable`: This means that the hold music is disabled.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hold_music: Option<HoldMusic>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSettingTemplateResponse {
    /**
     * The description of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Specify the template ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Specify the name of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GetSettingTemplateResponsePolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<GetSettingTemplateResponseProfile>,
    /**
     * The type of template being queried. Values: `user`, `group`, `auto receptionist` `common area`,`zr`, `interop`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<GetSettingTemplateResponseType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_settings: Option<GetSettingTemplateResponseUserSettings>,
}

/**
 * Values: inbound, outbound, both.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum RecordingCalls {
    #[serde(rename = "both")]
    Both,
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for RecordingCalls {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            RecordingCalls::Both => "both",
            RecordingCalls::Inbound => "inbound",
            RecordingCalls::Outbound => "outbound",
            RecordingCalls::Noop => "",
            RecordingCalls::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for RecordingCalls {
    fn default() -> RecordingCalls {
        RecordingCalls::Noop
    }
}
impl RecordingCalls {
    pub fn is_noop(&self) -> bool {
        matches!(self, RecordingCalls::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSettingTemplateRequestPolicyAutoCallRecording {
    /**
     * Automatic call recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Values: inbound, outbound, both.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording_calls: Option<RecordingCalls>,
    /**
     * Play a prompt to call participants when the recording has started.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_start_prompt: bool,
    /**
     * Allow call recording transcription.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_transcription: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSettingTemplateRequestPolicySms {
    /**
     * Allow user to send and receive messages.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Whether or not SMS is international.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub international_sms: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSettingTemplateRequestPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ad_hoc_call_recording: Option<AdHocCallRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_call_recording: Option<UpdateSettingTemplateRequestPolicyAutoCallRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sms: Option<UpdateSettingTemplateRequestPolicySms>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub voicemail: Option<Voicemail>,
}

/// Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSettingTemplateRequestUserSettingsCallHandlingBusinessHoursConnectOperator {
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_:
        Option<GetSettingTemplateResponseUserSettingsCallHandlingBusinessHoursConnectOperatorType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSettingTemplateRequestUserSettingsCallHandlingBusinessHours {
    /**
     * When a call is not answered:<br>
     *  0-Forward to voicemail;<br>
     *  1-Play a message, then disconnect; <br>
     *  9-Disconnect; <br>
     *  26-Forward to External Contacts; <br>
     *  50-Forward to another extension
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub business_hour_action: i64,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect_to_operator:
        Option<UpdateSettingTemplateRequestUserSettingsCallHandlingBusinessHoursConnectOperator>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub custom_hours: Vec<CustomHours>,
    /**
     * Call Handling Ring Mode:<br>
     *  0-Simultaneous,<br>
     *  1-Sequential
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ring_type: Option<serde_json::Value>,
    /**
     * Ringing Duration for Each Device, in seconds. Values:<br>
     *  15,20,25,30,35,40,45,50,55,60
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ringing_duration: Option<serde_json::Value>,
    /**
     * Values:<br>
     *  1-24 Hours, 7 Days a Week;<br>
     *  2-Custom Hours
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSettingTemplateRequestUserSettingsCallHandlingCloseHours {
    /**
     * Action to take when a call is not answered:<br>
     *  0-Forward to voicemail; <br>
     *  1-Play a message, then disconnect; <br>
     *  9-Disconnect; <br>
     *  26-Forward to External Contacts; <br>
     *  50-Forward to another extension
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub close_hour_action: i64,
    /**
     * Allow callers to press Zero to reach an operator or press One to leave a message, or allow neither of these options.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect_to_operator:
        Option<UpdateSettingTemplateRequestUserSettingsCallHandlingBusinessHoursConnectOperator>,
    /**
     * Maximum wait time, in seconds. Values:<br>
     *  15,20,25,30,35,40,45,50,55,60
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_wait_time: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSettingTemplateRequestUserSettingsCallHandling {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub business_hours: Option<UpdateSettingTemplateRequestUserSettingsCallHandlingBusinessHours>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_hours: Option<UpdateSettingTemplateRequestUserSettingsCallHandlingCloseHours>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSettingTemplateRequestUserSettings {
    /**
     * Audio prompt language code.<br> American English: `en-US`<br>
     *  British English: `en-GB`<br>
     *  Español americano: `es-US`<br>
     *  Français canadien: `fr-CA`<br>
     *  Dansk: `da-DK`<br>
     *  Deutsch: `de-DE`<br>
     *  Español: `es-ES`<br>
     *  Français: `fr-FR`<br>
     *  Italiano: `it-IT`<br>
     *  Nederlands: `nl-NL`<br>
     *  Portugues portugal: `pt-PT`<br>
     *  Japanese: `ja-JP`<br>
     *  Korean: `ko-KO`<br>
     *  Portugues brasil: `pt-BR`<br>
     *  Chinese: `zh-CN`<br>
     *  Taiwanese: `zh-TW`<br>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_prompt_language: String,
    /**
     * Block Calls without Caller ID.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub block_calls_without_caller_id: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub call_handling: Option<UpdateSettingTemplateRequestUserSettingsCallHandling>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desk_phone: Option<GetSettingTemplateResponseUserSettingsDeskPhone>,
    /**
     * The value of this field can be either `default` or `disable`.
     *  
     *  \* `default`: This means that the hold music can be set using the [audio library](https://support.zoom.us/hc/en-us/articles/360028212652-Using-the-audio-library-to-customize-greetings-and-hold-music).
     *  
     *  \* `disable`: This means that the hold music is disabled.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hold_music: Option<HoldMusic>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSettingTemplateRequest {
    /**
     * The description of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Specify the name of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UpdateSettingTemplateRequestPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<GetSettingTemplateResponseProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_settings: Option<UpdateSettingTemplateRequestUserSettings>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PhoneUserCallLogsType {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "missed")]
    Missed,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for PhoneUserCallLogsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            PhoneUserCallLogsType::All => "all",
            PhoneUserCallLogsType::Missed => "missed",
            PhoneUserCallLogsType::Noop => "",
            PhoneUserCallLogsType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for PhoneUserCallLogsType {
    fn default() -> PhoneUserCallLogsType {
        PhoneUserCallLogsType::Noop
    }
}
impl PhoneUserCallLogsType {
    pub fn is_noop(&self) -> bool {
        matches!(self, PhoneUserCallLogsType::Noop)
    }
}

/**
 * Enables you to sort call logs by start or end time. Choose the sort time value. Values include `startTime` or `endTime`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum TimeType {
    #[serde(rename = "endTime")]
    EndTime,
    #[serde(rename = "startTime")]
    StartTime,
    FallthroughString(String),
}

impl std::fmt::Display for TimeType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            TimeType::EndTime => "endTime",
            TimeType::StartTime => "startTime",
            TimeType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for TimeType {
    fn default() -> TimeType {
        TimeType::StartTime
    }
}

/// Indicates who the call was forwarded to.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ForwardedTo {
    /**
     * Indicates who the call was forwarded to.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * Indicates who the call was forwarded to.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Indicates who the call was forwarded to.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Indicates who the call was forwarded to.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number_type: String,
    /**
     * Indicates who the call was forwarded to.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PhoneUserCallLogsResponseForwardedByExtensionType {
    #[serde(rename = "autoReceptionist")]
    AutoReceptionist,
    #[serde(rename = "callQueue")]
    CallQueue,
    #[serde(rename = "commonAreaPhone")]
    CommonAreaPhone,
    #[serde(rename = "sharedLineGroup")]
    SharedLineGroup,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for PhoneUserCallLogsResponseForwardedByExtensionType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            PhoneUserCallLogsResponseForwardedByExtensionType::AutoReceptionist => {
                "autoReceptionist"
            }
            PhoneUserCallLogsResponseForwardedByExtensionType::CallQueue => "callQueue",
            PhoneUserCallLogsResponseForwardedByExtensionType::CommonAreaPhone => "commonAreaPhone",
            PhoneUserCallLogsResponseForwardedByExtensionType::SharedLineGroup => "sharedLineGroup",
            PhoneUserCallLogsResponseForwardedByExtensionType::User => "user",
            PhoneUserCallLogsResponseForwardedByExtensionType::Noop => "",
            PhoneUserCallLogsResponseForwardedByExtensionType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for PhoneUserCallLogsResponseForwardedByExtensionType {
    fn default() -> PhoneUserCallLogsResponseForwardedByExtensionType {
        PhoneUserCallLogsResponseForwardedByExtensionType::Noop
    }
}
impl PhoneUserCallLogsResponseForwardedByExtensionType {
    pub fn is_noop(&self) -> bool {
        matches!(
            self,
            PhoneUserCallLogsResponseForwardedByExtensionType::Noop
        )
    }
}

/// Indicates where the call was forwarded from.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ForwardedBy {
    /**
     * Indicates where the call was forwarded from.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * Indicates where the call was forwarded from.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension_type: Option<PhoneUserCallLogsResponseForwardedByExtensionType>,
    /**
     * Indicates where the call was forwarded from.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Indicates where the call was forwarded from.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Indicates where the call was forwarded from.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number_type: String,
    /**
     * Indicates where the call was forwarded from.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
}

/// Indicates who accepted the call.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AcceptedBy {
    /**
     * Indicates who accepted the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * Indicates who accepted the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Indicates who accepted the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Indicates who accepted the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number_type: String,
    /**
     * Indicates who accepted the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct OutgoingBy {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number_type: String,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CallLogs {
    /**
     * Indicates who accepted the call.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accepted_by: Option<AcceptedBy>,
    /**
     * The call's answer time, in GMT `date-time` format. The API only displays this response if the `direction` value is `inbound`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub answer_start_time: String,
    /**
     * The call end time, in GMT `date-time` format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_end_time: String,
    /**
     * Unique identifier of the phone call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_id: String,
    /**
     * Contact name of callee
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_name: String,
    /**
     * Number of callee
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number: String,
    /**
     * The callee's phone number type:
     *  \* `1` — Internal number.
     *  \* `2` — External number.
     *  \* `3` — Customized emergency number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub callee_number_type: Option<serde_json::Value>,
    /**
     * Contact name of caller
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_name: String,
    /**
     * Number of caller
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number: String,
    /**
     * Type of caller's number. 1 - internal | 2 - external
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number_type: String,
    /**
     * Billing charge for the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub charge: String,
    /**
     * Client code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub client_code: String,
    /**
     * Start time of the call
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * Direction of the call. "inbound" | "outbound"
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub direction: String,
    /**
     * Duration of the call in seconds.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Indicates where the call was forwarded from.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forwarded_by: Option<ForwardedBy>,
    /**
     * Indicates who the call was forwarded to.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forwarded_to: Option<ForwardedTo>,
    /**
     * Whether the call has a recording or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_recording: bool,
    /**
     * Whether the call has voicemail or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_voicemail: bool,
    /**
     * Call Log ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outgoing_by: Option<OutgoingBy>,
    /**
     * Path of the call log.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub path: String,
    /**
     * Billing rate for the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rate: String,
    /**
     * Recording type. <br>
     *  \* `1` - On-demand recording.<br>
     *  \* `2` - Automatic recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_type: String,
    /**
     * Result of the call. "call_connected" | "recorded" | "no_answer"
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub result: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<Site>,
    /**
     * User ID or user email.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
    /**
     * Waiting time for the call, in seconds.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub waiting_time: i64,
}

/// Phone User Call Logs
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneUserCallLogsResponse {
    /**
     * Phone User Call Logs
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub call_logs: Vec<CallLogs>,
    /**
     * Phone User Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub from: String,
    /**
     * Phone User Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Phone User Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * Phone User Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * Phone User Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to: String,
    /**
     * Phone User Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Recordings {
    /**
     * The phone call's unique ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_id: String,
    /**
     * The phone call log's unique ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_log_id: String,
    /**
     * Contact name of callee
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_name: String,
    /**
     * Number of callee
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number: String,
    /**
     * Type of callee's number. 1 - internal | 2 - external
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number_type: String,
    /**
     * Contact name of caller
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_name: String,
    /**
     * Number of caller
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number: String,
    /**
     * Type of caller's number. 1 - internal | 2 - external
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number_type: String,
    /**
     * Date and time at which the record is received
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * Direction of the call. "inbound" | "outbound"
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub direction: String,
    /**
     * Download url for the recording. For security purposes, you must provide an OAuth access token in the auth header to download the recording file using this url. <br>
     *  
     *  Example request:<br>
     *  ```
     *  curl --request GET \
     *    --url {download_url} \
     *    --header 'authorization: Bearer {access_token} \
     *    --header 'content-type: application/json'
     *  ```
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * Duration of the call formatted as hh:mm:ss, for example: `05:01` for five minutes and one second.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub duration: String,
    /**
     * ID of recording
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// Phone User Recordings
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneUserRecordingsResponse {
    /**
     * Phone User Recordings
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * Phone User Recordings
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Phone User Recordings
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * Phone User Recordings
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * Phone User Recordings
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub recordings: Vec<Recordings>,
    /**
     * Phone User Recordings
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
    /**
     * Phone User Recordings
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/**
 * Status of the voice mail
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PhoneUserVoiceMailsStatus {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "unread")]
    Unread,
    FallthroughString(String),
}

impl std::fmt::Display for PhoneUserVoiceMailsStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            PhoneUserVoiceMailsStatus::All => "all",
            PhoneUserVoiceMailsStatus::Read => "read",
            PhoneUserVoiceMailsStatus::Unread => "unread",
            PhoneUserVoiceMailsStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for PhoneUserVoiceMailsStatus {
    fn default() -> PhoneUserVoiceMailsStatus {
        PhoneUserVoiceMailsStatus::All
    }
}

/**
 * Status of the voice mail. Can be either 'read' or 'unread'
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum PhoneUserVoiceMailsResponseStatus {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "unread")]
    Unread,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for PhoneUserVoiceMailsResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            PhoneUserVoiceMailsResponseStatus::Read => "read",
            PhoneUserVoiceMailsResponseStatus::Unread => "unread",
            PhoneUserVoiceMailsResponseStatus::Noop => "",
            PhoneUserVoiceMailsResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for PhoneUserVoiceMailsResponseStatus {
    fn default() -> PhoneUserVoiceMailsResponseStatus {
        PhoneUserVoiceMailsResponseStatus::Noop
    }
}
impl PhoneUserVoiceMailsResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, PhoneUserVoiceMailsResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct VoiceMails {
    /**
     * Contact name of callee
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_name: String,
    /**
     * Number of callee
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number: String,
    /**
     * Type of callee's number. 1 - internal | 2 - external
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number_type: String,
    /**
     * Contact name of caller
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_name: String,
    /**
     * Number of caller
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number: String,
    /**
     * Type of caller's number. 1 - internal | 2 - external
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number_type: String,
    /**
     * Date the voice mail started
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * Download url of attachment
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * Duration of the voice mail, formatted as hh:mm:ss, for example: `06:30` for six minutes and thirty seconds.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub duration: String,
    /**
     * Id of voice mail
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Status of the voice mail. Can be either 'read' or 'unread'
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<PhoneUserVoiceMailsResponseStatus>,
}

/// Phone User Voice Mails
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PhoneUserVoiceMailsResponse {
    /**
     * Phone User Voice Mails
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * Phone User Voice Mails
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Phone User Voice Mails
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * Phone User Voice Mails
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * Phone User Voice Mails
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
    /**
     * Phone User Voice Mails
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
    /**
     * Phone User Voice Mails
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub voice_mails: Vec<VoiceMails>,
}

/// Update the voicemail setting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddUserSettingRequestVoiceMail {
    /**
     * Update the voicemail setting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub access_user_id: String,
    /**
     * Update the voicemail setting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub delete: bool,
    /**
     * Update the voicemail setting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub download: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddUserSettingRequest {
    /**
     * Update the voicemail setting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub voice_mail: Option<AddUserSettingRequestVoiceMail>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddUserSettingResponseVoiceMail {
    /**
     * The user that is allowed to access voicemail messages for the extension.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub access_user_id: String,
    /**
     * Specifies whether the user has delete permissions. The default is \*\*false\*\*.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub delete: bool,
    /**
     * Specifies whether the user has download permissions. The default is \*\*false\*\*.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub download: bool,
    /**
     * Unique identifier of the voicemail that the user can access.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddUserSettingResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub voice_mail: Option<AddUserSettingResponseVoiceMail>,
}

/// Update the voicemail setting.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateUserSettingRequestVoiceMail {
    /**
     * Update the voicemail setting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub access_user_id: String,
    /**
     * Update the voicemail setting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub delete: bool,
    /**
     * Update the voicemail setting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub download: bool,
    /**
     * Update the voicemail setting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateUserSettingRequest {
    /**
     * Update the voicemail setting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub voice_mail: Option<UpdateUserSettingRequestVoiceMail>,
}

/**
 * The type of call:
 *   *`voip` (Voice over IP)
 *   *`pstn` (Public Switched Telephone Network)
 *   *`tollfree`
 *   *`international`
 *   *`contactCenter`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum CallType {
    #[serde(rename = "contactCenter")]
    ContactCenter,
    #[serde(rename = "international")]
    International,
    #[serde(rename = "pstn")]
    Pstn,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "voip")]
    Voip,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for CallType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            CallType::ContactCenter => "contactCenter",
            CallType::International => "international",
            CallType::Pstn => "pstn",
            CallType::Tollfree => "tollfree",
            CallType::Voip => "voip",
            CallType::Noop => "",
            CallType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for CallType {
    fn default() -> CallType {
        CallType::Noop
    }
}
impl CallType {
    pub fn is_noop(&self) -> bool {
        matches!(self, CallType::Noop)
    }
}

/**
 * The owner type:
 *   *`user`
 *   *`callQueue`
 *   *`autoReceptionist`
 *   *`commonAreaPhone`
 *   *`sharedLineGroup`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountCallLogsResponseOwnerType {
    #[serde(rename = "autoReceptionist")]
    AutoReceptionist,
    #[serde(rename = "callQueue")]
    CallQueue,
    #[serde(rename = "commonAreaPhone")]
    CommonAreaPhone,
    #[serde(rename = "sharedLineGroup")]
    SharedLineGroup,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AccountCallLogsResponseOwnerType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AccountCallLogsResponseOwnerType::AutoReceptionist => "autoReceptionist",
            AccountCallLogsResponseOwnerType::CallQueue => "callQueue",
            AccountCallLogsResponseOwnerType::CommonAreaPhone => "commonAreaPhone",
            AccountCallLogsResponseOwnerType::SharedLineGroup => "sharedLineGroup",
            AccountCallLogsResponseOwnerType::User => "user",
            AccountCallLogsResponseOwnerType::Noop => "",
            AccountCallLogsResponseOwnerType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AccountCallLogsResponseOwnerType {
    fn default() -> AccountCallLogsResponseOwnerType {
        AccountCallLogsResponseOwnerType::Noop
    }
}
impl AccountCallLogsResponseOwnerType {
    pub fn is_noop(&self) -> bool {
        matches!(self, AccountCallLogsResponseOwnerType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Owner {
    /**
     * The owner's extension number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * The owner ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The owner name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The owner type:
     *  \*`user`
     *  \*`callQueue`
     *  \*`autoReceptionist`
     *  \*`commonAreaPhone`
     *  \*`sharedLineGroup`
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<AccountCallLogsResponseOwnerType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountCallLogsResponse {
    /**
     * GMT date and time at which the inbound call was answered. The value of this field is in `yyyy-MM-dd'T'HH:mm:ss'Z'` format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub answer_start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Unique identifier of the phone call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_id: String,
    /**
     * The type of call:
     *  \*`voip` (Voice over IP)
     *  \*`pstn` (Public Switched Telephone Network)
     *  \*`tollfree`
     *  \*`international`
     *  \*`contactCenter`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub call_type: Option<CallType>,
    /**
     * Contact name of callee
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_name: String,
    /**
     * Number of callee
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number: String,
    /**
     * The callee's phone number type:
     *  \* `1` — Internal number.
     *  \* `2` — External number.
     *  \* `3` — Customized emergency number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub callee_number_type: Option<serde_json::Value>,
    /**
     * Contact name of caller
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_name: String,
    /**
     * Number of caller
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number: String,
    /**
     * Type of caller's number. 1 - internal | 2 - external
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number_type: String,
    /**
     * Billing charge for the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub charge: String,
    /**
     * Client code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub client_code: String,
    /**
     * Start time of the call
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * Display the device's private IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_private_ip: String,
    /**
     * Display the device's public IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_public_ip: String,
    /**
     * Direction of the call. "inbound" | "outbound"
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub direction: String,
    /**
     * Duration of the call in seconds.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Call Log ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<Owner>,
    /**
     * Path of the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub path: String,
    /**
     * Billing rate for the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rate: String,
    /**
     * Unique identifier of the call recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_id: String,
    /**
     * Type of call recording:<br>
     *  `1` OnDemand<br>
     *  `2` Automatic
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording_type: Option<serde_json::Value>,
    /**
     * Result of the call. "call_connected" | "recorded" | "no_answer"
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub result: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<Site>,
    /**
     * User ID of the call log owner.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
    /**
     * Duration that a  \*\*call queue member\*\* takes to answer a call from the time it started ringing. The value of the duration is in seconds.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub waiting_time: String,
}

/// Account Call Logs
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountCallLogsResponseData {
    /**
     * Account Call Logs
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub call_logs: Vec<AccountCallLogsResponse>,
    /**
     * Account Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub from: String,
    /**
     * Account Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Account Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_count: i64,
    /**
     * Account Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * Account Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to: String,
    /**
     * Account Call Logs
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumberRequestNumbers {
    /**
     * ID for phone number
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number in E164 format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumberRequest {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<AssignPhoneNumberRequestNumbers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumberResponseNumbers {
    /**
     * ID of the phone number
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The phone number that is assigned to the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumberResponse {
    /**
     * Assigned phone number
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<AssignPhoneNumberResponseNumbers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CallingPlans {
    /**
     * [Type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) of the calling plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignCallingPlanRequest {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub calling_plans: Vec<CallingPlans>,
}

/**
 * The query's date type:
 *   * `start_time`
 *   * `end_time`
 *   
 *   This value defaults to `start_time`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetPhoneRecordingsQueryDateType {
    #[serde(rename = "end_time")]
    EndTime,
    #[serde(rename = "start_time")]
    StartTime,
    FallthroughString(String),
}

impl std::fmt::Display for GetPhoneRecordingsQueryDateType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetPhoneRecordingsQueryDateType::EndTime => "end_time",
            GetPhoneRecordingsQueryDateType::StartTime => "start_time",
            GetPhoneRecordingsQueryDateType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetPhoneRecordingsQueryDateType {
    fn default() -> GetPhoneRecordingsQueryDateType {
        GetPhoneRecordingsQueryDateType::StartTime
    }
}

/**
 * The owner type: `user` or `call queue`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetPhoneRecordingsResponseOwnerType {
    #[serde(rename = "call queue")]
    CallQueue,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetPhoneRecordingsResponseOwnerType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetPhoneRecordingsResponseOwnerType::CallQueue => "call queue",
            GetPhoneRecordingsResponseOwnerType::User => "user",
            GetPhoneRecordingsResponseOwnerType::Noop => "",
            GetPhoneRecordingsResponseOwnerType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetPhoneRecordingsResponseOwnerType {
    fn default() -> GetPhoneRecordingsResponseOwnerType {
        GetPhoneRecordingsResponseOwnerType::Noop
    }
}
impl GetPhoneRecordingsResponseOwnerType {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetPhoneRecordingsResponseOwnerType::Noop)
    }
}

/// The owner of the recording.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPhoneRecordingsResponseOwner {
    /**
     * The owner of the recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * The owner of the recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The owner of the recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The owner of the recording.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<GetPhoneRecordingsResponseOwnerType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPhoneRecordingsResponseSite {
    /**
     * The site ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The site name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/**
 * The direction of the call. Values: `inbound` or `outbound`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Direction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Direction::Inbound => "inbound",
            Direction::Outbound => "outbound",
            Direction::Noop => "",
            Direction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Direction {
    fn default() -> Direction {
        Direction::Noop
    }
}
impl Direction {
    pub fn is_noop(&self) -> bool {
        matches!(self, Direction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPhoneRecordingsResponse {
    /**
     * The phone call's unique ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_id: String,
    /**
     * The phone call log's unique ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_log_id: String,
    /**
     * The contact name of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_name: String,
    /**
     * The phone number of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number: String,
    /**
     * Specifies the callee' number type.<br>
     *  `1` - internal<br>
     *  `2` - external<br>
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub callee_number_type: Option<serde_json::Value>,
    /**
     * The contact name of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_name: String,
    /**
     * The phone number associated to the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number: String,
    /**
     * Specifies the type of the caller number.<br>
     *  
     *  `1` - internal<br>
     *  `2` - external<br>
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub caller_number_type: Option<serde_json::Value>,
    /**
     * The date and time when the recording was received.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The direction of the call. Values: `inbound` or `outbound`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /**
     * The download URL for the recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * The duration of the recording.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * The recording's end time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub end_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Unique identifier of the recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The owner of the recording.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<GetPhoneRecordingsResponseOwner>,
    /**
     * The recording type. The allowed values are `OnDemand` or `Automatic`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_type: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<GetPhoneRecordingsResponseSite>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPhoneRecordingsResponseData {
    /**
     * The current page number of returned records.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call. The default is \*\*30\*\*, and the maximum is \*\*100\*\*.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub recordings: Vec<GetPhoneRecordingsResponse>,
    /**
     * Total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ByocSipTrunk {
    /**
     * Name of the carrier.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub carrier: String,
    /**
     * The account associated to the carrier.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub carrier_account: String,
    /**
     * The unique SIP Trunk ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The display name of the SIP Trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The region of the carrier.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub region: String,
    /**
     * The Session Border Controller (SBC) routing label.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sbc_label: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListByocsipTrunkResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub byoc_sip_trunk: Vec<ByocSipTrunk>,
    /**
     * Used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is \*\*15 minutes\*\*.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call. The default is \*\*30\*\*, and the maximum is \*\*100\*\*.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SipTrunks {
    /**
     * The account associated to the carrier.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub carrier_account: String,
    /**
     * Unique identifier of the master account's SIP trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The name of the SIP Trunk. If this is not used, the master SIP Trunk name will be the default.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PostPhoneSipTrunkRequest {
    /**
     * SIP trunk configurations.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sip_trunks: Vec<SipTrunks>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PostPhoneSipTrunkResponseTrunks {
    /**
     * Carrier account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub carrier_account: String,
    /**
     * Unique identifier of the SIP trunk of the sub account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the SIP trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PostPhoneSipTrunkResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sip_trunks: Vec<PostPhoneSipTrunkResponseTrunks>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdatePhoneSipTrunkRequest {
    /**
     * Account associated with the carrier.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub carrier_account: String,
    /**
     * Name of the SIP Trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlanBaseDeleteRequest {
    /**
     * The action that needs to be taken for this sub account. Value must be set to "cancel".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub action: String,
    /**
     * Additional comments about the cancellation decision.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub comment: String,
    /**
     * The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub reason: i64,
}

/**
 * The action that needs to be taken for this sub account. Value must be set to "cancel".
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AccountPlanAddonCancelRequestAction {
    #[serde(rename = "cancel")]
    Cancel,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AccountPlanAddonCancelRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AccountPlanAddonCancelRequestAction::Cancel => "cancel",
            AccountPlanAddonCancelRequestAction::Noop => "",
            AccountPlanAddonCancelRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AccountPlanAddonCancelRequestAction {
    fn default() -> AccountPlanAddonCancelRequestAction {
        AccountPlanAddonCancelRequestAction::Noop
    }
}
impl AccountPlanAddonCancelRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, AccountPlanAddonCancelRequestAction::Noop)
    }
}

/// Account plan object
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountPlanAddonCancelRequest {
    /**
     * Account plan object
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<AccountPlanAddonCancelRequestAction>,
    /**
     * Account plan object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub comment: String,
    /**
     * Account plan object
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub reason: i64,
    /**
     * Account plan object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ActivityLogs {
    /**
     * The client interface type using which the activity was performed.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub client_type: String,
    /**
     * Email address of the user used for the activity.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The IP address of the user's device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub ip_address: String,
    /**
     * Time during which the activity occurred.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The type of activity: <br>`Sign in`: Sign in activity by user.<br>`Sign out`: Sign out activity by user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * Zoom client version of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub version: String,
}

/// Report object
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ReportSignInOutActivitiesResponse {
    /**
     * Report object
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub activity_logs: Vec<ActivityLogs>,
    /**
     * Report object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub from: String,
    /**
     * Report object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Report object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub page_size: String,
    /**
     * Report object
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to: String,
}

/**
 * `meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the group.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the group.<br>
 *   `meeting_security`: Use this query parameter to view meeting security settings applied on the group.<br>
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetGroupSettingsOption {
    #[serde(rename = "meeting_authentication")]
    MeetingAuthentication,
    #[serde(rename = "recording_authentication")]
    RecordingAuthentication,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetGroupSettingsOption {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetGroupSettingsOption::MeetingAuthentication => "meeting_authentication",
            GetGroupSettingsOption::RecordingAuthentication => "recording_authentication",
            GetGroupSettingsOption::Noop => "",
            GetGroupSettingsOption::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetGroupSettingsOption {
    fn default() -> GetGroupSettingsOption {
        GetGroupSettingsOption::Noop
    }
}
impl GetGroupSettingsOption {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetGroupSettingsOption::Noop)
    }
}

/**
 * Indicates whether a password is required for [PMI](https://support.zoom.us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not. The value can be one of the following:<br>
 *   `none`: Do not require password for PMI meetings.<br>
 *   `all`: Require participants to enter password for all PMI enabled meetings.<br> `jbh_only`: Require password only for meetings where the **"join before host"** setting is enabled.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "jbh_only")]
    JbhOnly,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings::All => "all",
GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings::JbhOnly => "jbh_only",
GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings::None => "none",
GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings::Noop => "",
GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings::FallthroughString(s) => s,
}
.fmt(f)
    }
}

impl Default for GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings {
    fn default() -> GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings {
        GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings::Noop
    }
}
impl GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings {
    pub fn is_noop(&self) -> bool {
        matches!(
            self,
            GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings::Noop
        )
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupSettingsResponseScheduleMeeting {
    /**
     * Determine how participants can join the audio portion of the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_type: String,
    /**
     * If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub embed_password_in_join_link: bool,
    /**
     * If join before host option is enabled for a personal meeting, then enforce password requirement.
     *  
     *  
     *  \*\*This field will be deprecated in near future.\*\* If you would like to enable this setting, we highly encourage you to use the `require_password_for_pmi_meetings` field.
     *  
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub force_pmi_jbh_password: bool,
    /**
     * Start meetings with host video on.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     * Allow participants to join the meeting before the host arrives
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_before_host: bool,
    /**
     * Automatically mute all participants when they join the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub mute_upon_entry: bool,
    /**
     * Start meetings with participant video on.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub participant_video: bool,
    /**
     * Personal Meeting Setting.<br><br>
     *  `true`: Indicates that the \*\*"Enable Personal Meeting ID"\*\* setting is turned on. Users can choose to use personal meeting ID for their meetings. <br><br>
     *  `false`: Indicates that the \*\*"Enable Personal Meeting ID"\*\* setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
     *  For Zoom Phone only:If a user has been assigned a desk phone, \*\*"Elevate to Zoom Meeting"\*\* on desk phone will be disabled.
     *  
     *  
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub personal_meeting: bool,
    /**
     * Generate and send new passwords for newly scheduled or edited meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pstn_password_protected: bool,
    /**
     * If enabled, a random password will be generated on the user's end who starts the instant meeting. Other participants will have to enter the password to join the meeting. If you use PMI for your instant meetings, this option will be disabled.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_instant_meetings: bool,
    /**
     * Indicates whether a password is required for [PMI](https://support.zoom.us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not. The value can be one of the following:<br>
     *  `none`: Do not require password for PMI meetings.<br>
     *  `all`: Require participants to enter password for all PMI enabled meetings.<br> `jbh_only`: Require password only for meetings where the \*\*"join before host"\*\* setting is enabled.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_password_for_pmi_meetings:
        Option<GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings>,
    /**
     * Require a password for meetings which have already been scheduled
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduled_meetings: bool,
    /**
     * This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduling_new_meetings: bool,
    /**
     * Receive desktop notification for upcoming meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub upcoming_meeting_reminder: bool,
    /**
     * Indicates whether PMI is enabled for all instant meetings or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi_for_instant_meetings: bool,
    /**
     * Indicates whether PMI is enabled for all scheduled meetings or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_pmi_for_schedule_meetings: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupSettingsResponseInMeeting {
    /**
     * Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alert_guest_join: bool,
    /**
     * Show Zoom windows during screen share.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_show_zoom_windows: bool,
    /**
     * Allow participants to use annotation tools to add information to shared screens.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub annotation: bool,
    /**
     * Allow host to put attendee on hold.
     *  
     *  \*\*This field has been deprecated and is no longer supported.\*\*
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub attendee_on_hold: bool,
    /**
     * Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_answer: bool,
    /**
     * Automatically save all in-meeting chats.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_saving_chat: bool,
    /**
     * Allow host to split meeting participants into separate, smaller rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub breakout_room: bool,
    /**
     * Allow meeting participants to send chat message visible to all participants.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub chat: bool,
    /**
     * Allow host to type closed captions or assign a participant/third party device to add closed captions.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub closed_caption: bool,
    /**
     * Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub co_host: bool,
    /**
     * If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to be used by this group for hosting their real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub custom_data_center_regions: bool,
    /**
     * If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
     *
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub data_center_regions: Vec<String>,
    /**
     * Require that all meetings are encrypted using AES.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub e_2e_encryption: bool,
    /**
     * Play sound when participants join or leave.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub entry_exit_chime: String,
    /**
     * Allow another user to take control of the camera during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub far_end_camera_control: bool,
    /**
     * Enable users to provide feedback to Zoom at the end of the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub feedback: bool,
    /**
     * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub file_transfer: bool,
    /**
     * Enable higher quality video for host and participants. This will require more bandwidth.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub group_hd: bool,
    /**
     * Whether to allow participants to join a meeting directly from their desktop browser. Note that the meeting experience from the desktop browser is limited.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_from_desktop: bool,
    /**
     * Whether to allow participants to join a meeting directly from their mobile browser. Note that the meeting experience from the mobile browser is limited.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_from_mobile: bool,
    /**
     * Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub non_verbal_feedback: bool,
    /**
     * Show the list of H.323/SIP devices only to the host.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub only_host_view_device_list: bool,
    /**
     * Allow users to select original sound during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub original_audio: bool,
    /**
     * Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub polling: bool,
    /**
     * Display end-of-meeting experience feedback survey.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub post_meeting_feedback: bool,
    /**
     * Allow meeting participants to send a private 1:1 message to another participant.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub private_chat: bool,
    /**
     * When each participant joins by telephone, allow the option to record and play their own voice as entry and exit chimes.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_play_own_voice: bool,
    /**
     * During screen sharing, allow the person who is sharing to let others control the shared content.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_control: bool,
    /**
     * Allow meeting host to provide 1:1 remote support to another participant.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_support: bool,
    /**
     * Indicates whether the [\*\*Request permission to unmute participants\*\*](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the group or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub request_permission_to_unmute: bool,
    /**
     * Allow host and participants to share their screen or content during meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub screen_sharing: bool,
    /**
     * Allow users to invite participants by email only by default.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub sending_default_email_invites: bool,
    /**
     * Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_a_join_from_your_browser_link: bool,
    /**
     * Allow participants to join a meeting directly from their browser.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_browser_join_link: bool,
    /**
     * Show the list of H.323/SIP devices.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_device_list: bool,
    /**
     * Always show meeting controls during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_meeting_control_toolbar: bool,
    /**
     * Allow users to select stereo audio during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub stereo_audio: bool,
    /**
     * Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_html_format_email: bool,
    /**
     * Enable virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub virtual_background: bool,
    /**
     * Settings to manage virtual background.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virtual_background_settings: Option<VirtualBackgroundSettings>,
    /**
     * Attendees cannot join a meeting until a host admits them individually from the waiting room.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub waiting_room: bool,
    /**
     * Allow participants to share a whiteboard that includes annotation tools.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub whiteboard: bool,
    /**
     * Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
     *  `host`: Only host can share the screen.<br>
     *  `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub who_can_share_screen: Option<WhoCanShareScreen>,
    /**
     * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
     *  `host`: Only a host can share the screen when someone else is sharing.<br>
     *  `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub who_can_share_screen_when_someone_is_sharing: Option<WhoCanShareScreenWhenSomeoneSharing>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupSettingsResponseEmailNotification {
    /**
     * Notify the alternative host who is set or removed.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alternative_host_reminder: bool,
    /**
     * Notify host and participants when the meeting is cancelled.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cancel_meeting_reminder: bool,
    /**
     * Notify host when cloud recording is available.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_available_reminder: bool,
    /**
     * Notify host when participants join the meeting before them.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub jbh_reminder: bool,
    /**
     * Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub schedule_for_host_reminder: bool,
}

/// [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupSettingsResponseRecordingArchive {
    /**
     * [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
    /**
     * [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<Settings>,
    /**
     * [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupSettingsResponseRecording {
    /**
     * Make cloud recordings accessible to account members only.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub account_user_access_recording: bool,
    /**
     * [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archive: Option<GetGroupSettingsResponseRecordingArchive>,
    /**
     * Record meetings automatically as they start.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub auto_recording: String,
    /**
     * Allow hosts to record and save the meeting / webinar in the cloud.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording: bool,
    /**
     * Allow anyone with a link to the cloud recording to download.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_download: bool,
    /**
     * Allow only the host with a link to the cloud recording to download.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_download_host: bool,
    /**
     * Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_delete_cloud_recording: bool,
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_address_access_control: Option<IpAddressAccessControl>,
    /**
     * Allow hosts and participants to record the meeting to a local file.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub local_recording: bool,
    /**
     * If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
     *  
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub prevent_host_access_recording: bool,
    /**
     * Whether to record one audio file for all participants.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_audio_file: bool,
    /**
     * Record separate audio files for each participant.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_audio_file_each_participant: bool,
    /**
     * When someone is sharing their screen, active speaker will show on the top right corner of the shared screen.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_gallery_view: bool,
    /**
     * Record active speaker with shared screen.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_speaker_view: bool,
    /**
     * Automatically transcribe the audio of a meeting or webinar for cloud recordings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_audio_transcript: bool,
    /**
     * Save chat messages from the meeting / webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub save_chat_text: bool,
    /**
     * Add a timestamp to the recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_timestamp: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupSettingsResponseTelephony {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_conference_info: String,
    /**
     * Indicates where most of the participants call into or call from duriing a meeting.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony_regions: Option<UpdateAccountSettingsTelephonyRegions>,
    /**
     * Allow users to join the meeting using the existing 3rd party audio configuration.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub third_party_audio: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupSettingsResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email_notification: Option<GetGroupSettingsResponseEmailNotification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_meeting: Option<GetGroupSettingsResponseInMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<Profile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording: Option<GetGroupSettingsResponseRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule_meeting: Option<GetGroupSettingsResponseScheduleMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony: Option<GetGroupSettingsResponseTelephony>,
}

/// One of the following types:
///
/// - `GetGroupSettingsResponse`
/// - `Domains`
/// - `MeetingSecuritySettings`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetGroupSettingsResponseOneOf {
    Domains(Domains),
    GetGroupSettingsResponse(GetGroupSettingsResponse),
    MeetingSecuritySettings(MeetingSecuritySettings),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateGroupSettingsRequestScheduleMeeting {
    /**
     * Determine how participants can join the audio portion of the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_type: String,
    /**
     * If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub embed_password_in_join_link: bool,
    /**
     * If join before host option is enabled for a personal meeting, then enforce password requirement.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub force_pmi_jbh_password: bool,
    /**
     * Start meetings with host video on.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     * Allow participants to join the meeting before the host arrives
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_before_host: bool,
    /**
     * Automatically mute all participants when they join the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub mute_upon_entry: bool,
    /**
     * Start meetings with participant video on.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub participant_video: bool,
    /**
     * Generate and send new passwords for newly scheduled or edited meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pstn_password_protected: bool,
    /**
     * Require password from all participants before joining a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_all_meetings: bool,
    /**
     * If enabled, a random password will be generated on the user's end who starts the instant meeting. Other participants will have to enter the password to join the meeting. If you use PMI for your instant meetings, this option will be disabled.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_instant_meetings: bool,
    /**
     * Indicates whether a password is required for [PMI](https://support.zoom.us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not. The value can be one of the following:<br>
     *  `none`: Do not require password for PMI meetings.<br>
     *  `all`: Require participants to enter password for all PMI enabled meetings.<br> `jbh_only`: Require password only for meetings where the \*\*"join before host"\*\* setting is enabled.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_password_for_pmi_meetings:
        Option<GetGroupSettingsResponseScheduleMeetingRequirePasswordPmiMeetings>,
    /**
     * Require a password for meetings which have already been scheduled
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduled_meetings: bool,
    /**
     * This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduling_new_meetings: bool,
    /**
     * Receive desktop notification for upcoming meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub upcoming_meeting_reminder: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateGroupSettingsRequestInMeeting {
    /**
     * Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alert_guest_join: bool,
    /**
     * Show Zoom windows during screen share.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_show_zoom_windows: bool,
    /**
     * Allow participants to use annotation tools to add information to shared screens.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub annotation: bool,
    /**
     * Allow host to put attendee on hold.
     *  
     *  \*\*This field has been deprecated and is no longer supported.\*\*
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub attendee_on_hold: bool,
    /**
     * Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_answer: bool,
    /**
     * Automatically save all in-meeting chats.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_saving_chat: bool,
    /**
     * Allow host to split meeting participants into separate, smaller rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub breakout_room: bool,
    /**
     * Allow meeting participants to send chat message visible to all participants.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub chat: bool,
    /**
     * Allow host to type closed captions or assign a participant/third party device to add closed captions.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub closed_caption: bool,
    /**
     * Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub co_host: bool,
    /**
     * If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to be used by this group for hosting their real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub custom_data_center_regions: bool,
    /**
     * If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
     *
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub data_center_regions: Vec<String>,
    /**
     * Require that all meetings are encrypted using AES.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub e_2e_encryption: bool,
    /**
     * Play sound when participants join or leave.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub entry_exit_chime: String,
    /**
     * Allow another user to take control of the camera during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub far_end_camera_control: bool,
    /**
     * Enable users to provide feedback to Zoom at the end of the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub feedback: bool,
    /**
     * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub file_transfer: bool,
    /**
     * Enable higher quality video for host and participants. This will require more bandwidth.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub group_hd: bool,
    /**
     * Whether to allow participants to join a meeting directly from their desktop browser. Note that the meeting experience from the desktop browser is limited.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_from_desktop: bool,
    /**
     * Whether to allow participants to join a meeting directly from their mobile browser. Note that the meeting experience from the mobile browser is limited.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_from_mobile: bool,
    /**
     * Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub non_verbal_feedback: bool,
    /**
     * Show the list of H.323/SIP devices only to the host.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub only_host_view_device_list: bool,
    /**
     * Allow users to select original sound during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub original_audio: bool,
    /**
     * Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub polling: bool,
    /**
     * Display end-of-meeting experience feedback survey.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub post_meeting_feedback: bool,
    /**
     * Allow meeting participants to send a private 1:1 message to another participant.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub private_chat: bool,
    /**
     * When each participant joins by telephone, allow the option to record and play their own voice as entry and exit chimes.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_play_own_voice: bool,
    /**
     * During screen sharing, allow the person who is sharing to let others control the shared content.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_control: bool,
    /**
     * Allow meeting host to provide 1:1 remote support to another participant.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_support: bool,
    /**
     * Indicate whether the [\*\*Request permission to unmute participants\*\*](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option should be enabled for the group or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub request_permission_to_unmute: bool,
    /**
     * Allow host and participants to share their screen or content during meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub screen_sharing: bool,
    /**
     * Allow users to invite participants by email only by default.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub sending_default_email_invites: bool,
    /**
     * Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_a_join_from_your_browser_link: bool,
    /**
     * Allow participants to join a meeting directly from their browser.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_browser_join_link: bool,
    /**
     * Show the list of H.323/SIP devices.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_device_list: bool,
    /**
     * Always show meeting controls during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_meeting_control_toolbar: bool,
    /**
     * Allow users to select stereo audio during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub stereo_audio: bool,
    /**
     * Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_html_format_email: bool,
    /**
     * Enable virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub virtual_background: bool,
    /**
     * Attendees cannot join a meeting until a host admits them individually from the waiting room.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub waiting_room: bool,
    /**
     * Allow participants to share a whiteboard that includes annotation tools.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub whiteboard: bool,
    /**
     * Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
     *  `host`: Only host can share the screen.<br>
     *  `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub who_can_share_screen: Option<WhoCanShareScreen>,
    /**
     * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
     *  `host`: Only a host can share the screen when someone else is sharing.<br>
     *  `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub who_can_share_screen_when_someone_is_sharing: Option<WhoCanShareScreenWhenSomeoneSharing>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateGroupSettingsRequestRecording {
    /**
     * Make cloud recordings accessible to account members only.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub account_user_access_recording: bool,
    /**
     * [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted archiving solution access by the Zoom Support team.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archive: Option<GetGroupSettingsResponseRecordingArchive>,
    /**
     * Record meetings automatically as they start.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub auto_recording: String,
    /**
     * Allow hosts to record and save the meeting / webinar in the cloud.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording: bool,
    /**
     * Allow anyone with a link to the cloud recording to download.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_download: bool,
    /**
     * Allow only the host with a link to the cloud recording to download.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_download_host: bool,
    /**
     * Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_delete_cloud_recording: bool,
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_address_access_control: Option<IpAddressAccessControl>,
    /**
     * Allow hosts and participants to record the meeting to a local file.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub local_recording: bool,
    /**
     * If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
     *  
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub prevent_host_access_recording: bool,
    /**
     * Whether to record one audio file for all participants.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_audio_file: bool,
    /**
     * Whether to record a separate audio file for each participant. This only supports a maximum of 200 participants' audio files.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_audio_file_each_participant: bool,
    /**
     * When someone is sharing their screen, active speaker will show on the top right corner of the shared screen.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_gallery_view: bool,
    /**
     * Record active speaker with shared screen.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub record_speaker_view: bool,
    /**
     * Automatically transcribe the audio of a meeting or webinar for cloud recordings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_audio_transcript: bool,
    /**
     * Save chat messages from the meeting / webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub save_chat_text: bool,
    /**
     * Add a timestamp to the recording.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_timestamp: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateGroupSettingsRequestTelephony {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub audio_conference_info: String,
    /**
     * Allow users to join the meeting using the existing 3rd party audio configuration.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub third_party_audio: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateGroupSettingsRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email_notification: Option<GetGroupSettingsResponseEmailNotification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_meeting: Option<UpdateGroupSettingsRequestInMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<Profile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording: Option<UpdateGroupSettingsRequestRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule_meeting: Option<UpdateGroupSettingsRequestScheduleMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony: Option<UpdateGroupSettingsRequestTelephony>,
}

/// One of the following types:
///
/// - `UpdateGroupSettingsRequest`
/// - `Domains`
/// - `MeetingSecuritySettings`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UpdateGroupSettingsRequestOneOf {
    Domains(Domains),
    MeetingSecuritySettings(MeetingSecuritySettings),
    UpdateGroupSettingsRequest(UpdateGroupSettingsRequest),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UpdateGroupSettingsOption {
    #[serde(rename = "meeting_authentication")]
    MeetingAuthentication,
    #[serde(rename = "meeting_security")]
    MeetingSecurity,
    #[serde(rename = "recording_authentication")]
    RecordingAuthentication,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UpdateGroupSettingsOption {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UpdateGroupSettingsOption::MeetingAuthentication => "meeting_authentication",
            UpdateGroupSettingsOption::MeetingSecurity => "meeting_security",
            UpdateGroupSettingsOption::RecordingAuthentication => "recording_authentication",
            UpdateGroupSettingsOption::Noop => "",
            UpdateGroupSettingsOption::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UpdateGroupSettingsOption {
    fn default() -> UpdateGroupSettingsOption {
        UpdateGroupSettingsOption::Noop
    }
}
impl UpdateGroupSettingsOption {
    pub fn is_noop(&self) -> bool {
        matches!(self, UpdateGroupSettingsOption::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupLockSettingsResponseScheduleMeeting {
    /**
     * Determine how participants can join the audio portion of the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub audio_type: bool,
    /**
     * If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub embed_password_in_join_link: bool,
    /**
     * If join before host option is enabled for a personal meeting, then enforce password requirement.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub force_pmi_jbh_password: bool,
    /**
     * Start meetings with host video on.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     * Allow participants to join the meeting before the host arrives
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_before_host: bool,
    /**
     * Only authenticated users can join meetings
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub meeting_authentication: bool,
    /**
     * Automatically mute all participants when they join the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub mute_upon_entry: bool,
    /**
     * Start meetings with participant video on.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub participant_video: bool,
    /**
     * Generate and send new passwords for newly scheduled or edited meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pstn_password_protected: bool,
    /**
     * Require password for instant meetings. If you use PMI for your instant meetings, this option will be disabled.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_instant_meetings: bool,
    /**
     * Require participants to enter password for PMI meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_pmi_meetings: bool,
    /**
     * This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduling_new_meetings: bool,
    /**
     * Receive desktop notification for upcoming meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub upcoming_meeting_reminder: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupLockSettingsResponseInMeeting {
    /**
     * Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alert_guest_join: bool,
    /**
     * Show Zoom windows during screen share.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_show_zoom_windows: bool,
    /**
     * Allow participants to use annotation tools to add information to shared screens.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub annotation: bool,
    /**
     * Allow host to put attendee on hold.
     *  
     *  \*\*This field has been deprecated and is no longer supported.\*\*
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub attendee_on_hold: bool,
    /**
     * Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_answer: bool,
    /**
     * Automatically save all in-meeting chats.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_saving_chat: bool,
    /**
     * Allow host to split meeting participants into separate, smaller rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub breakout_room: bool,
    /**
     * Allow meeting participants to send chat message visible to all participants.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub chat: bool,
    /**
     * Allow host to type closed captions or assign a participant/third party device to add closed captions.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub closed_caption: bool,
    /**
     * Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub co_host: bool,
    /**
     * Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by this group.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub custom_data_center_regions: bool,
    /**
     * Require that all meetings are encrypted using AES.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub e_2e_encryption: bool,
    /**
     * Play sound when participants join or leave.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub entry_exit_chime: String,
    /**
     * Allow another user to take control of the camera during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub far_end_camera_control: bool,
    /**
     * Enable users to provide feedback to Zoom at the end of the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub feedback: bool,
    /**
     * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub file_transfer: bool,
    /**
     * Enable higher quality video for host and participants. This will require more bandwidth.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub group_hd: bool,
    /**
     * Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub non_verbal_feedback: bool,
    /**
     * Allow users to select original sound during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub original_audio: bool,
    /**
     * Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub polling: bool,
    /**
     * Display end-of-meeting experience feedback survey.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub post_meeting_feedback: bool,
    /**
     * Allow meeting participants to send a private 1:1 message to another participant.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub private_chat: bool,
    /**
     * During screen sharing, allow the person who is sharing to let others control the shared content.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_control: bool,
    /**
     * Allow meeting host to provide 1:1 remote support to another participant.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_support: bool,
    /**
     * Indicates whether the [\*\*Request permission to unmute participants\*\*](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled and locked for the group or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub request_permission_to_unmute: bool,
    /**
     * Allow host and participants to share their screen or content during meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub screen_sharing: bool,
    /**
     * Allow users to invite participants by email only by default.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub sending_default_email_invites: bool,
    /**
     * Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_a_join_from_your_browser_link: bool,
    /**
     * Allow participants to join a meeting directly from their browser.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_browser_join_link: bool,
    /**
     * Always show meeting controls during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_meeting_control_toolbar: bool,
    /**
     * Allow users to select stereo audio during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub stereo_audio: bool,
    /**
     * Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_html_format_email: bool,
    /**
     * Enable virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub virtual_background: bool,
    /**
     * Attendees cannot join a meeting until a host admits them individually from the waiting room.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub waiting_room: bool,
    /**
     * Allow participants to share a whiteboard that includes annotation tools.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub whiteboard: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupLockSettingsResponseRecording {
    /**
     * Make cloud recordings accessible to account members only.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub account_user_access_recording: bool,
    /**
     * Allow Zoom to automatically delete recordings permanently after a specified number of days.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_delete_cmr: bool,
    /**
     * Record meetings automatically as they start.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub auto_recording: String,
    /**
     * Allow hosts to record and save the meeting / webinar in the cloud.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording: bool,
    /**
     * Allow anyone with a link to the cloud recording to download.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_download: bool,
    /**
     * Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_delete_cloud_recording: bool,
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_address_access_control: Option<IpAddressAccessControl>,
    /**
     * Allow hosts and participants to record the meeting to a local file.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub local_recording: bool,
    /**
     * If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
     *  
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub prevent_host_access_recording: bool,
    /**
     * Only authenticated users can view cloud recordings
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub recording_authentication: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupLockSettingsResponseTelephony {
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub telephony_regions: bool,
    /**
     * Allow users to join the meeting using the existing 3rd party audio configuration.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub third_party_audio: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetGroupLockSettingsResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email_notification: Option<GetGroupSettingsResponseEmailNotification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_meeting: Option<GetGroupLockSettingsResponseInMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording: Option<GetGroupLockSettingsResponseRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule_meeting: Option<GetGroupLockSettingsResponseScheduleMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony: Option<GetGroupLockSettingsResponseTelephony>,
}

/// One of the following types:
///
/// - `GetGroupLockSettingsResponse`
/// - `MeetingSecuritySettings`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetGroupLockSettingsResponseOneOf {
    GetGroupLockSettingsResponse(GetGroupLockSettingsResponse),
    MeetingSecuritySettings(MeetingSecuritySettings),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupLockedSettingsRequestScheduleMeeting {
    /**
     * Determine how participants can join the audio portion of the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub audio_type: bool,
    /**
     * If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub embed_password_in_join_link: bool,
    /**
     * If join before host option is enabled for a personal meeting, then enforce password requirement.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub force_pmi_jbh_password: bool,
    /**
     * Start meetings with host video on.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_video: bool,
    /**
     * Allow participants to join the meeting before the host arrives
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub join_before_host: bool,
    /**
     * Only authenticated users can join meetings
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub meeting_authentication: bool,
    /**
     * Automatically mute all participants when they join the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub mute_upon_entry: bool,
    /**
     * Start meetings with participant video on.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub participant_video: bool,
    /**
     * Turn the lock setting on or off for the \*\*Enable Personal Meeting ID\*\* setting for a group.<br><br>
     *  `true`: Turn the \*\*"Enable Personal Meeting ID"\*\* setting \*\*on\*\* for all users in the group. Users can choose to use personal meeting ID for their meetings. <br><br>
     *  `false`: Turn \*\*off\*\* the \*\*"Enable Personal Meeting ID"\*\* setting. \*\*If this setting is [disabled](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link?flash_digest=eb7ac62d8c7fb4daf285916e3e15d87537806133#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a), meetings that were scheduled with PMI by this group members will be invalid. Users will have to update previously scheduled PMI meetings.\*\*<br><br>
     *  For Zoom Phone only:If a user has been assigned a desk phone, \*\*"Elevate to Zoom Meeting"\*\* on desk phone will be disabled.
     *  
     *  
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub personal_meeting: bool,
    /**
     * Generate and send new passwords for newly scheduled or edited meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub pstn_password_protected: bool,
    /**
     * Require password for instant meetings. If you use PMI for your instant meetings, this option will be disabled.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_instant_meetings: bool,
    /**
     * Require participants to enter password for PMI meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_pmi_meetings: bool,
    /**
     * This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub require_password_for_scheduling_new_meetings: bool,
    /**
     * Receive desktop notification for upcoming meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub upcoming_meeting_reminder: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupLockedSettingsRequestInMeeting {
    /**
     * Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub alert_guest_join: bool,
    /**
     * Show Zoom windows during screen share.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_show_zoom_windows: bool,
    /**
     * Allow participants to use annotation tools to add information to shared screens.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub annotation: bool,
    /**
     * Allow host to put attendee on hold.
     *  
     *  \*\*This field has been deprecated and is no longer supported.\*\*
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub attendee_on_hold: bool,
    /**
     * Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_answer: bool,
    /**
     * Automatically save all in-meeting chats.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_saving_chat: bool,
    /**
     * Allow host to split meeting participants into separate, smaller rooms.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub breakout_room: bool,
    /**
     * Allow meeting participants to send chat message visible to all participants.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub chat: bool,
    /**
     * Allow host to type closed captions or assign a participant/third party device to add closed captions.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub closed_caption: bool,
    /**
     * Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub co_host: bool,
    /**
     * Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by this group.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub custom_data_center_regions: bool,
    /**
     * Require that all meetings are encrypted using AES.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub e_2e_encryption: bool,
    /**
     * Play sound when participants join or leave.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub entry_exit_chime: String,
    /**
     * Allow another user to take control of the camera during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub far_end_camera_control: bool,
    /**
     * Enable users to provide feedback to Zoom at the end of the meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub feedback: bool,
    /**
     * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub file_transfer: bool,
    /**
     * Enable higher quality video for host and participants. This will require more bandwidth.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub group_hd: bool,
    /**
     * Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub non_verbal_feedback: bool,
    /**
     * Allow users to select original sound during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub original_audio: bool,
    /**
     * Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub polling: bool,
    /**
     * Display end-of-meeting experience feedback survey.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub post_meeting_feedback: bool,
    /**
     * Allow meeting participants to send a private 1:1 message to another participant.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub private_chat: bool,
    /**
     * During screen sharing, allow the person who is sharing to let others control the shared content.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_control: bool,
    /**
     * Allow meeting host to provide 1:1 remote support to another participant.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub remote_support: bool,
    /**
     * Indicate whether the [\*\*Request permission to unmute participants\*\*](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option should be enabled and locked for the group or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub request_permission_to_unmute: bool,
    /**
     * Allow host and participants to share their screen or content during meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub screen_sharing: bool,
    /**
     * Allow users to invite participants by email only by default.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub sending_default_email_invites: bool,
    /**
     * Whether to allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is useful for participants who cannot download, install, or run applications. Note that the meeting experience from the browser is limited.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_a_join_from_your_browser_link: bool,
    /**
     * Allow participants to join a meeting directly from their browser.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_browser_join_link: bool,
    /**
     * Always show meeting controls during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub show_meeting_control_toolbar: bool,
    /**
     * Allow users to select stereo audio during a meeting.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub stereo_audio: bool,
    /**
     * Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub use_html_format_email: bool,
    /**
     * Enable virtual background.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub virtual_background: bool,
    /**
     * Attendees cannot join a meeting until a host admits them individually from the waiting room.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub waiting_room: bool,
    /**
     * Allow participants to share a whiteboard that includes annotation tools.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub whiteboard: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupLockedSettingsRequestRecording {
    /**
     * Make cloud recordings accessible to account members only.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub account_user_access_recording: bool,
    /**
     * Allow Zoom to automatically delete recordings permanently after a specified number of days.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub auto_delete_cmr: bool,
    /**
     * Record meetings automatically as they start.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub auto_recording: String,
    /**
     * Allow hosts to record and save the meeting / webinar in the cloud.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording: bool,
    /**
     * Allow anyone with a link to the cloud recording to download.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub cloud_recording_download: bool,
    /**
     * Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub host_delete_cloud_recording: bool,
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_address_access_control: Option<IpAddressAccessControl>,
    /**
     * Allow hosts and participants to record the meeting to a local file.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub local_recording: bool,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_authentication: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GroupLockedSettingsRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email_notification: Option<GetGroupSettingsResponseEmailNotification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_meeting: Option<GroupLockedSettingsRequestInMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording: Option<GroupLockedSettingsRequestRecording>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule_meeting: Option<GroupLockedSettingsRequestScheduleMeeting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telephony: Option<GetGroupLockSettingsResponseTelephony>,
}

/// One of the following types:
///
/// - `GroupLockedSettingsRequest`
/// - `MeetingSecuritySettings`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GroupLockedSettingsRequestOneOf {
    GroupLockedSettingsRequest(GroupLockedSettingsRequest),
    MeetingSecuritySettings(MeetingSecuritySettings),
}

/// This field will only be displayed to accounts that are enrolled in a partner plan and follow the master accounts and sub accounts structure.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SubAccountPrivileges {
    /**
     * This field will only be displayed to accounts that are enrolled in a partner plan and follow the master accounts and sub accounts structure.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub second_level: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetRoleInformationResponse {
    /**
     * Description of the role.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Role Id.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the role.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).
     *
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub privileges: Vec<String>,
    /**
     * This field will only be displayed to accounts that are enrolled in a partner plan and follow the master accounts and sub accounts structure.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sub_account_privileges: Option<SubAccountPrivileges>,
    /**
     * Total members assigned to that role.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_members: i64,
}

/// This field will only be displayed to accounts that are enrolled in the partner plan and follow master accounts and sub accounts structure.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateRoleRequestSubAccountPrivileges {
    /**
     * This field will only be displayed to accounts that are enrolled in the partner plan and follow master accounts and sub accounts structure.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub second_level: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateRoleRequest {
    /**
     * Description of the role.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Role Id.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the role.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).
     *
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub privileges: Vec<String>,
    /**
     * This field will only be displayed to accounts that are enrolled in the partner plan and follow master accounts and sub accounts structure.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sub_account_privileges: Option<UpdateRoleRequestSubAccountPrivileges>,
    /**
     * Total members assigned to that role.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_members: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPlanUsageResponseBase {
    /**
     * Number of hosts under the base plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Type of the base plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * Total number of usage of this plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub usage: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPlanUsageResponseWebinar {
    /**
     * The number of hosts in this plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * The type of Webinar plan for the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * The total number of plan usage.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub usage: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPlanUsageResponseLargeMeeting {
    /**
     * Number of hosts in this plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * Large meeting Plan Type
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * Number of usages for this account plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub usage: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPlanUsageResponseZoomRooms {
    /**
     * The number of hosts in this plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * THe plan type for Zoom room plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * The total number of usage for this plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub usage: i64,
}

/// Recording Plan
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PlanRecording {
    /**
     * Recording Plan
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub free_storage: String,
    /**
     * Recording Plan
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub free_storage_usage: String,
    /**
     * Recording Plan
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub plan_storage: String,
    /**
     * Recording Plan
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub plan_storage_exceed: String,
    /**
     * Recording Plan
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub plan_storage_usage: String,
    /**
     * Recording Plan
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PlanUnited {
    /**
     * [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub hosts: i64,
    /**
     * [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub usage: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPlanUsageResponse {
    /**
     * The base plan subscribed for the sub account.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_base: Vec<GetPlanUsageResponseBase>,
    /**
     * Large Meeting Plan
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_large_meeting: Vec<GetPlanUsageResponseLargeMeeting>,
    /**
     * Recording Plan
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_recording: Option<PlanRecording>,
    /**
     * [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan_united: Option<PlanUnited>,
    /**
     * Webinar Plan
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_webinar: Vec<GetPlanUsageResponseWebinar>,
    /**
     * Zoom Rooms Plan
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plan_zoom_rooms: Vec<GetPlanUsageResponseZoomRooms>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateAccountOwnerRequest {
    /**
     * The email address of the account's new owner.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SwitchUserAccountRequest {
    /**
     * The Account ID of the account to which you would like move the user to.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub account_id: String,
}

/**
 * The recording file type. The value of this field could be one of the following:<br>
 *   * `MP4`: Video file of the recording.<br>
 *   * `M4A` Audio-only file of the recording.<br>
 *   * `TB`: Timestamp file of the recording in JSON format.<br>
 *   * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br>
 *   * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
 *   * `CC`: File containing closed captions of the recording in VTT file format.<br>
 *   * `CSV`: File containing polling data in csv format.
 *   
 *   A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
 *   	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetAccountCloudRecordingResponseMeetingsFilesFileType {
    #[serde(rename = "CC")]
    Cc,
    #[serde(rename = "CHAT")]
    Chat,
    #[serde(rename = "CSV")]
    Csv,
    #[serde(rename = "M4A")]
    M4A,
    #[serde(rename = "MP4")]
    Mp4,
    #[serde(rename = "TB")]
    Tb,
    #[serde(rename = "TRANSCRIPT")]
    Transcript,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetAccountCloudRecordingResponseMeetingsFilesFileType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetAccountCloudRecordingResponseMeetingsFilesFileType::Cc => "CC",
            GetAccountCloudRecordingResponseMeetingsFilesFileType::Chat => "CHAT",
            GetAccountCloudRecordingResponseMeetingsFilesFileType::Csv => "CSV",
            GetAccountCloudRecordingResponseMeetingsFilesFileType::M4A => "M4A",
            GetAccountCloudRecordingResponseMeetingsFilesFileType::Mp4 => "MP4",
            GetAccountCloudRecordingResponseMeetingsFilesFileType::Tb => "TB",
            GetAccountCloudRecordingResponseMeetingsFilesFileType::Transcript => "TRANSCRIPT",
            GetAccountCloudRecordingResponseMeetingsFilesFileType::Noop => "",
            GetAccountCloudRecordingResponseMeetingsFilesFileType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetAccountCloudRecordingResponseMeetingsFilesFileType {
    fn default() -> GetAccountCloudRecordingResponseMeetingsFilesFileType {
        GetAccountCloudRecordingResponseMeetingsFilesFileType::Noop
    }
}
impl GetAccountCloudRecordingResponseMeetingsFilesFileType {
    pub fn is_noop(&self) -> bool {
        matches!(
            self,
            GetAccountCloudRecordingResponseMeetingsFilesFileType::Noop
        )
    }
}

/**
 * The status of the recording, either `completed` or `processing`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetAccountCloudRecordingResponseMeetingsFilesStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetAccountCloudRecordingResponseMeetingsFilesStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetAccountCloudRecordingResponseMeetingsFilesStatus::Completed => "completed",
            GetAccountCloudRecordingResponseMeetingsFilesStatus::Processing => "processing",
            GetAccountCloudRecordingResponseMeetingsFilesStatus::Noop => "",
            GetAccountCloudRecordingResponseMeetingsFilesStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetAccountCloudRecordingResponseMeetingsFilesStatus {
    fn default() -> GetAccountCloudRecordingResponseMeetingsFilesStatus {
        GetAccountCloudRecordingResponseMeetingsFilesStatus::Noop
    }
}
impl GetAccountCloudRecordingResponseMeetingsFilesStatus {
    pub fn is_noop(&self) -> bool {
        matches!(
            self,
            GetAccountCloudRecordingResponseMeetingsFilesStatus::Noop
        )
    }
}

/**
 * The recording type. The value of this field can be one of the following:<br>
 *   * `shared_screen_with_speaker_view(CC)`
 *   * `shared_screen_with_speaker_view`
 *   * `shared_screen_with_gallery_view`
 *   * `shared_screen`
 *   * `active_speaker`
 *   * `gallery_view`
 *   * `audio_only`
 *   * `audio_transcript`
 *   * `chat_file`
 *   * `host_video`
 *   * `closed_caption`
 *   * `poll`
 *   * `timeline`
 *   * `thumbnail`
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetAccountCloudRecordingResponseMeetingsFilesType {
    #[serde(rename = "active_speaker")]
    ActiveSpeaker,
    #[serde(rename = "audio_only")]
    AudioOnly,
    #[serde(rename = "audio_transcript")]
    AudioTranscript,
    #[serde(rename = "chat_file")]
    ChatFile,
    #[serde(rename = "closed_caption")]
    ClosedCaption,
    #[serde(rename = "gallery_view")]
    GalleryView,
    #[serde(rename = "host_video")]
    HostVideo,
    #[serde(rename = "poll")]
    Poll,
    #[serde(rename = "shared_screen")]
    SharedScreen,
    #[serde(rename = "shared_screen_with_gallery_view")]
    SharedScreenWithGalleryView,
    #[serde(rename = "shared_screen_with_speaker_view")]
    SharedScreenWithSpeakerView,
    #[serde(rename = "shared_screen_with_speaker_view(CC)")]
    SharedScreenWithSpeakerViewCc,
    #[serde(rename = "thumbnail")]
    Thumbnail,
    #[serde(rename = "timeline")]
    Timeline,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetAccountCloudRecordingResponseMeetingsFilesType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetAccountCloudRecordingResponseMeetingsFilesType::ActiveSpeaker => "active_speaker",
            GetAccountCloudRecordingResponseMeetingsFilesType::AudioOnly => "audio_only",
            GetAccountCloudRecordingResponseMeetingsFilesType::AudioTranscript => {
                "audio_transcript"
            }
            GetAccountCloudRecordingResponseMeetingsFilesType::ChatFile => "chat_file",
            GetAccountCloudRecordingResponseMeetingsFilesType::ClosedCaption => "closed_caption",
            GetAccountCloudRecordingResponseMeetingsFilesType::GalleryView => "gallery_view",
            GetAccountCloudRecordingResponseMeetingsFilesType::HostVideo => "host_video",
            GetAccountCloudRecordingResponseMeetingsFilesType::Poll => "poll",
            GetAccountCloudRecordingResponseMeetingsFilesType::SharedScreen => "shared_screen",
            GetAccountCloudRecordingResponseMeetingsFilesType::SharedScreenWithGalleryView => {
                "shared_screen_with_gallery_view"
            }
            GetAccountCloudRecordingResponseMeetingsFilesType::SharedScreenWithSpeakerView => {
                "shared_screen_with_speaker_view"
            }
            GetAccountCloudRecordingResponseMeetingsFilesType::SharedScreenWithSpeakerViewCc => {
                "shared_screen_with_speaker_view(CC)"
            }
            GetAccountCloudRecordingResponseMeetingsFilesType::Thumbnail => "thumbnail",
            GetAccountCloudRecordingResponseMeetingsFilesType::Timeline => "timeline",
            GetAccountCloudRecordingResponseMeetingsFilesType::Noop => "",
            GetAccountCloudRecordingResponseMeetingsFilesType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetAccountCloudRecordingResponseMeetingsFilesType {
    fn default() -> GetAccountCloudRecordingResponseMeetingsFilesType {
        GetAccountCloudRecordingResponseMeetingsFilesType::Noop
    }
}
impl GetAccountCloudRecordingResponseMeetingsFilesType {
    pub fn is_noop(&self) -> bool {
        matches!(
            self,
            GetAccountCloudRecordingResponseMeetingsFilesType::Noop
        )
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct RecordingFiles {
    /**
     * The URL using which the recording can be downloaded
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * The size of the recording file in bytes.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub file_size: f64,
    /**
     * The recording file type. The value of this field could be one of the following:<br>
     *  \* `MP4`: Video file of the recording.<br>
     *  \* `M4A` Audio-only file of the recording.<br>
     *  \* `TB`: Timestamp file of the recording in JSON format.<br>
     *  \* `TRANSCRIPT`: Transcription file of the recording in VTT format.<br>
     *  \* `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
     *  \* `CC`: File containing closed captions of the recording in VTT file format.<br>
     *  \* `CSV`: File containing polling data in csv format.
     *  
     *  A recording file object with file type of either `CC` or `TB` \*\*does not have\*\* the following properties:<br>
     *  	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file_type: Option<GetAccountCloudRecordingResponseMeetingsFilesFileType>,
    /**
     * Recording ID. Identifier for the recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Universally unique identifier of the meeting instance that was being recorded.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub meeting_id: String,
    /**
     * The URL using which recording can be played.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub play_url: String,
    /**
     * The date and time at which the recording ended.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_end: String,
    /**
     * The date and time at which the recording started.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recording_start: String,
    /**
     * The recording type. The value of this field can be one of the following:<br>
     *  \* `shared_screen_with_speaker_view(CC)`
     *  \* `shared_screen_with_speaker_view`
     *  \* `shared_screen_with_gallery_view`
     *  \* `shared_screen`
     *  \* `active_speaker`
     *  \* `gallery_view`
     *  \* `audio_only`
     *  \* `audio_transcript`
     *  \* `chat_file`
     *  \* `host_video`
     *  \* `closed_caption`
     *  \* `poll`
     *  \* `timeline`
     *  \* `thumbnail`
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording_type: Option<GetAccountCloudRecordingResponseMeetingsFilesType>,
    /**
     * The status of the recording, either `completed` or `processing`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<GetAccountCloudRecordingResponseMeetingsFilesStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetAccountCloudRecordingResponseMeetings {
    /**
     * The scheduled duration of the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * User ID of the user who is set as the host of the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_id: String,
    /**
     * Meeting ID - Unique Identifier of a meeting, also known as Meeting Number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The total number of recordings retrieved from the account.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub recording_count: i64,
    /**
     * Recording files object
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub recording_files: Vec<RecordingFiles>,
    /**
     * The date and time at which the meeting started.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting topic.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * The total size of the meeting in bytes.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_size: i64,
    /**
     * Universally Unique Identifier of a meeting instance. Each meeting instance will have its own meeting UUID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetAccountCloudRecordingResponse {
    /**
     * The start date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub from: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meetings Object
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub meetings: Vec<GetAccountCloudRecordingResponseMeetings>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub to: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Total number of records found for this request across all pages.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct TrackingSources {
    /**
     * Unique Identifier of the tracking source.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Number of registrations made from this source.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub registration_count: i64,
    /**
     * Name of the source (platform) where the registration URL was shared.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub source_name: String,
    /**
     * Tracking URL. The URL that was shared for the registration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tracking_url: String,
    /**
     * Number of visitors who visited the registration page from this source.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub visitor_count: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetTrackingSourcesResponse {
    /**
     * The total number of registration records for this Webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
    /**
     * Tracking Sources object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tracking_sources: Vec<TrackingSources>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Basic {
    /**
     * Require code to exit out of the Zoom Rooms application to switch between other apps.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required_code_to_ext: bool,
    /**
     * 1-16 digit number or characters used to secure your Zoom Rooms application. This code must be entered on your Zoom Room Controller to change settings or to sign out.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub room_passcode: String,
    /**
     * The email address used for reporting Zoom Room issues.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_email: String,
    /**
     * The phone number used for reporting Zoom room issues.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_phone: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateZrAccProfileRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub basic: Option<Basic>,
}

/**
 * The type of setting that you would like to retrieve.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>
 *   `meeting`: Meeting settings of the Zoom Rooms Account. <br>
 *   `signage`: View digital signage settings of the Zoom Rooms Account.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum SettingType {
    #[serde(rename = "alert")]
    Alert,
    #[serde(rename = "meeting")]
    Meeting,
    FallthroughString(String),
}

impl std::fmt::Display for SettingType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            SettingType::Alert => "alert",
            SettingType::Meeting => "meeting",
            SettingType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for SettingType {
    fn default() -> SettingType {
        SettingType::Meeting
    }
}

/**
 * The type of location. The value can be one of the following:
 *   `country`, `states`, `city`, `campus`, `building`, `floor`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListZrLocationsResponseType {
    #[serde(rename = "building")]
    Building,
    #[serde(rename = "campus")]
    Campus,
    #[serde(rename = "city")]
    City,
    #[serde(rename = "country")]
    Country,
    #[serde(rename = "floor")]
    Floor,
    #[serde(rename = "states")]
    States,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListZrLocationsResponseType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListZrLocationsResponseType::Building => "building",
            ListZrLocationsResponseType::Campus => "campus",
            ListZrLocationsResponseType::City => "city",
            ListZrLocationsResponseType::Country => "country",
            ListZrLocationsResponseType::Floor => "floor",
            ListZrLocationsResponseType::States => "states",
            ListZrLocationsResponseType::Noop => "",
            ListZrLocationsResponseType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListZrLocationsResponseType {
    fn default() -> ListZrLocationsResponseType {
        ListZrLocationsResponseType::Noop
    }
}
impl ListZrLocationsResponseType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListZrLocationsResponseType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListZrLocationsResponse {
    /**
     * Unique Identifier of the location.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the location.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * ID (Unique Identifier) of the parent location. For instance, if a Zoom Room is located in Floor 1 of Building A, the location of Building A will be the parent location of Floor 1 and the parent_location_id of Floor 1 will be the ID of Building A.<br>
     *  The value of parent_location_id of the top-level location (country) is the Account ID of the Zoom account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub parent_location_id: String,
    /**
     * The type of location. The value can be one of the following:
     *  `country`, `states`, `city`, `campus`, `building`, `floor`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<ListZrLocationsResponseType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListZrLocationsResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub locations: Vec<ListZrLocationsResponse>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddAzrLocationRequest {
    /**
     * Name of the location. The name must be unique and shouldn't have already been used in the same account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The location ID of the location that is a level higher from the location that is being added.<br><br> For example, to add a City named "City 1" as the child location under a State named "State 1", you must provide the location ID of "State 1". This can be retrieved using the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub parent_location_id: String,
}

/**
 * Type of location. The value should be one of the following:<br>
 *   `country`, `states`, `city`, `campus`, `building`, `floor`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AddAzrLocationResponseType {
    #[serde(rename = "building")]
    Building,
    #[serde(rename = "campus")]
    Campus,
    #[serde(rename = "city")]
    City,
    #[serde(rename = "country")]
    Country,
    #[serde(rename = "floor")]
    Floor,
    #[serde(rename = "states")]
    States,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AddAzrLocationResponseType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AddAzrLocationResponseType::Building => "building",
            AddAzrLocationResponseType::Campus => "campus",
            AddAzrLocationResponseType::City => "city",
            AddAzrLocationResponseType::Country => "country",
            AddAzrLocationResponseType::Floor => "floor",
            AddAzrLocationResponseType::States => "states",
            AddAzrLocationResponseType::Noop => "",
            AddAzrLocationResponseType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AddAzrLocationResponseType {
    fn default() -> AddAzrLocationResponseType {
        AddAzrLocationResponseType::Noop
    }
}
impl AddAzrLocationResponseType {
    pub fn is_noop(&self) -> bool {
        matches!(self, AddAzrLocationResponseType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddAzrLocationResponse {
    /**
     * Location ID: Unique Identifier of the location that was added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the location.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Unique Identifier of the parent location.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub parent_location_id: String,
    /**
     * Type of location. The value should be one of the following:<br>
     *  `country`, `states`, `city`, `campus`, `building`, `floor`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<AddAzrLocationResponseType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetZrLocationProfileResponseBasic {
    /**
     * Address
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address: String,
    /**
     * Description about the location.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Name of the location type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Require code to exit out of your Zoom Rooms application to switch between other apps.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required_code_to_ext: bool,
    /**
     * 1-16 digit number or characters that is used to secure your Zoom Rooms application.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub room_passcode: String,
    /**
     * The email address to be used for reporting Zoom Room issues.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_email: String,
    /**
     * The phone number to be used for reporting Zoom Room issues.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_phone: String,
    /**
     * Timezone (only returned for location type - city).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetZrLocationProfileResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub basic: Option<GetZrLocationProfileResponseBasic>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateZrLocationProfileRequestBasic {
    /**
     * Address. Can only be updated for Campus and Building.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address: String,
    /**
     * Description about the location.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Name of the location type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Require code to exit out of your Zoom Rooms application to switch between other apps.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required_code_to_ext: bool,
    /**
     * 1-16 digit number or characters that is used to secure your Zoom Rooms application.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub room_passcode: String,
    /**
     * The email address to be used for reporting Zoom Room issues.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_email: String,
    /**
     * The phone number to be used for reporting Zoom Room issues.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_phone: String,
    /**
     * Timezone (can only be updated for location type - city).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateZrLocationProfileRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub basic: Option<UpdateZrLocationProfileRequestBasic>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetZrLocationStructureResponse {
    /**
     * Hierarchial structure array of the Zoom Rooms location.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub structures: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateZoomRoomsLocationStructureRequest {
    /**
     * Location Structure. The value can be either one or a combination of the following strings separated by comma:
     *  `country`, `state`, `city`, `campus`, `building`, `floor`
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub structures: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetZrProfileResponseBasic {
    /**
     * Activation Code is the code that is used to complete the setup of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub activation_code: String,
    /**
     * Hide this Zoom Room from your Contact List.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub hide_room_in_contacts: bool,
    /**
     * Name of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Require code to exit out of Zoom Rooms application to switch between other apps.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required_code_to_ext: bool,
    /**
     * 1-16 digit number or characters that is used to secure your Zoom Rooms application. This code must be entered on your Zoom Room Controller to change settings or sign out.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub room_passcode: String,
    /**
     * The email address to be used for reporting Zoom Room issues.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_email: String,
    /**
     * The phone number to be used for reporting Zoom Room issues.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_phone: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetZrProfileResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub basic: Option<GetZrProfileResponseBasic>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateRoomProfileRequestBasic {
    /**
     * Hide this Zoom Room from your Contact List.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub hide_room_in_contacts: bool,
    /**
     * Name of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Require code to exit out of Zoom Rooms application to switch between other apps.
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub required_code_to_ext: bool,
    /**
     * 1-16 digit number or characters that is used to secure your Zoom Rooms application. This code must be entered on your Zoom Room Controller to change settings or sign out.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub room_passcode: String,
    /**
     * The email address to be used for reporting Zoom Room issues.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_email: String,
    /**
     * The phone number to be used for reporting Zoom Room issues.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub support_phone: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateRoomProfileRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub basic: Option<UpdateRoomProfileRequestBasic>,
}

/**
 * Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum DeviceType {
    #[serde(rename = "Companion Whiteboard")]
    CompanionWhiteboard,
    #[serde(rename = "Controller")]
    Controller,
    #[serde(rename = "Scheduling Display")]
    SchedulingDisplay,
    #[serde(rename = "Zoom Rooms Computer")]
    ZoomRoomsComputer,
    #[serde(rename = "Zoom Rooms Control System")]
    ZoomRoomsControlSystem,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for DeviceType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            DeviceType::CompanionWhiteboard => "Companion Whiteboard",
            DeviceType::Controller => "Controller",
            DeviceType::SchedulingDisplay => "Scheduling Display",
            DeviceType::ZoomRoomsComputer => "Zoom Rooms Computer",
            DeviceType::ZoomRoomsControlSystem => "Zoom Rooms Control System",
            DeviceType::Noop => "",
            DeviceType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for DeviceType {
    fn default() -> DeviceType {
        DeviceType::Noop
    }
}
impl DeviceType {
    pub fn is_noop(&self) -> bool {
        matches!(self, DeviceType::Noop)
    }
}

/**
 * Status of the device. The value can be either `Online` or `Offline`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListZrDevicesResponseStatus {
    #[serde(rename = "Offline")]
    Offline,
    #[serde(rename = "Online")]
    Online,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListZrDevicesResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListZrDevicesResponseStatus::Offline => "Offline",
            ListZrDevicesResponseStatus::Online => "Online",
            ListZrDevicesResponseStatus::Noop => "",
            ListZrDevicesResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListZrDevicesResponseStatus {
    fn default() -> ListZrDevicesResponseStatus {
        ListZrDevicesResponseStatus::Noop
    }
}
impl ListZrDevicesResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListZrDevicesResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Devices {
    /**
     * App version of Zoom Rooms.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub app_version: String,
    /**
     * Operating system of the device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_system: String,
    /**
     * Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_type: Option<DeviceType>,
    /**
     * Unique identifier of the device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the Zoom Room.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub room_name: String,
    /**
     * Status of the device. The value can be either `Online` or `Offline`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListZrDevicesResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListZrDevicesResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub devices: Vec<Devices>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSipTrunkNumbersResponsePhone {
    /**
     * Country ID (example: US)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Phone number
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSipTrunkNumbersResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<ListSipTrunkNumbersResponsePhone>,
    /**
     * Total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignSipConfigRequest {
    /**
     * Assign or delete the SIP configuration:
     *  
     *  \* `true` — Assign the Master account's SIP configuration information to the subaccount.
     *  \* `false` — Delete the subaccount's assigned SIP configuration.
     *  
     *  If you do \*\*not\*\* query this parameter, the API will \*\*not\*\* modify the subaccount's configuration.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /**
     * If the value of this option is set to `true`, the call-out numbers provided by the Zoom carrier partners will be displayed in the account's list of available call-out numbers in the Zoom Web Portal and Zoom Client.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub show_callout_internal_number: Option<bool>,
    /**
     * If the value of this option is set to `0`, the call-out countries list provided by Zoom will be [displayed](https://support.zoom.us/hc/en-us/articles/200942859-Using-telephone-call-out) in the account's list of available call-out countries.
     *  
     *  If the value of this option is set to `1`, the Zoom provided call-out countries will be hidden from the user's account.<br>
     *  
     *  If the value of this option is set to `2`, all Zoom provided countries will be deleted and only internal countries (provided by carrier partners) will be used.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub show_zoom_provided_callout_countries: i64,
    /**
     * If the value of this option is set to `0`, the numbers provided by Zoom will be displayed in the account's list of available call-out and call-in numbers in the Zoom Web Portal and Zoom Client.
     *  
     *  If the value of this option is set to `1`, the Zoom provided numbers will be shown in the Zoom Web Portal but will not be used unless specified by the user.<br>
     *  
     *  If the value of this option is set to `2`, all Zoom provided numbers will be deleted and only internal numbers (provided by carrier partners) will be used.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub show_zoom_provided_numbers: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignSipTrunkNumbersRequest {
    /**
     * Phone number(s) to be assigned to the sub account.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPastMeetingPollsResponseQuestionsQuestionDetails {
    /**
     * Answer submitted by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub answer: String,
    /**
     * Date and time at which the answer to the poll was submitted.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Unique identifier of the poll.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub polling_id: String,
    /**
     * Question asked during the poll.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub question: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPastMeetingPollsResponseQuestions {
    /**
     * Email address of the user who submitted answers to the poll.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Name of the user who submitted answers to the poll. If "anonymous" option is enabled for a poll, the participant's polling information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub question_details: Vec<ListPastMeetingPollsResponseQuestionsQuestionDetails>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPastMeetingPollsResponse {
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<ListPastMeetingPollsResponseQuestions>,
    /**
     * The start time of the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Meeting UUID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InMeetingFiles {
    /**
     * URL to download the file.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * Name of the file.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_name: String,
    /**
     * Size of the file in bytes.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub file_size: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPastMeetingFilesResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub in_meeting_files: Vec<InMeetingFiles>,
    /**
     * The total number of files found.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPastWebinarPollResultsResponse {
    /**
     * Webinar ID in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the webinar number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<ListPastMeetingPollsResponseQuestions>,
    /**
     * The start time of the Webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Webinar UUID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPastWebinarQaResponseQuestionsQuestionDetails {
    /**
     * Answer submitted for the question.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub answer: String,
    /**
     * Question asked during the Q&A.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub question: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPastWebinarQaResponseQuestions {
    /**
     * Email address of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Name of the user. If "anonymous" option is enabled for the Q&A, the participant's  information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub question_details: Vec<ListPastWebinarQaResponseQuestionsQuestionDetails>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPastWebinarQaResponse {
    /**
     * Webinar ID in "\*\*long\*\*" format(represented as int64 data type in JSON), also known as the webinar number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<ListPastWebinarQaResponseQuestions>,
    /**
     * The start time of the Webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Webinar UUID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ClientSatisfaction {
    /**
     * Date of the report.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<chrono::NaiveDate>,
    /**
     * The total number of "thumbs up" received for this meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub good_count: i64,
    /**
     * The total number of attendees who didn't submit any response (neither thumbs up nor thumbs down).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub none_count: i64,
    /**
     * The total number of "thumbs down" received for this meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub not_good_count: i64,
    /**
     * Satisfaction Percentage.
     *  The satisfaction percentage is calculated as `(good_count + none_count)` / `total_count`.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub satisfaction_percent: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListMeetingSatisfactionResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub client_satisfaction: Vec<ClientSatisfaction>,
    /**
     * Start date for this report in 'yyyy-mm-dd' format.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<chrono::NaiveDate>,
    /**
     * End date for this report in 'yyyy-mm-dd' format.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<chrono::NaiveDate>,
    /**
     * The total number of records available across all pages.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/**
 * State of the device. The value should be either `assigned` to list devices that have been assigned to user(s) or `unassigned` to list devices that have not yet been assigned to any user in the Zoom account.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListPhoneDevicesType {
    #[serde(rename = "assigned")]
    Assigned,
    #[serde(rename = "unassigned")]
    Unassigned,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListPhoneDevicesType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListPhoneDevicesType::Assigned => "assigned",
            ListPhoneDevicesType::Unassigned => "unassigned",
            ListPhoneDevicesType::Noop => "",
            ListPhoneDevicesType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListPhoneDevicesType {
    fn default() -> ListPhoneDevicesType {
        ListPhoneDevicesType::Noop
    }
}
impl ListPhoneDevicesType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListPhoneDevicesType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPhoneDevicesResponseAssignee {
    /**
     * Extension number of the Zoom Phone used by the user.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * User ID of the user to whom the device has been assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/**
 * Status of the device. The value is either `online` or `offline`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListPhoneDevicesResponseStatus {
    #[serde(rename = "offline")]
    Offline,
    #[serde(rename = "online")]
    Online,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListPhoneDevicesResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListPhoneDevicesResponseStatus::Offline => "offline",
            ListPhoneDevicesResponseStatus::Online => "online",
            ListPhoneDevicesResponseStatus::Noop => "",
            ListPhoneDevicesResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListPhoneDevicesResponseStatus {
    fn default() -> ListPhoneDevicesResponseStatus {
        ListPhoneDevicesResponseStatus::Noop
    }
}
impl ListPhoneDevicesResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListPhoneDevicesResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPhoneDevicesResponseSite {
    /**
     * The [site](https://support.zoom.us/hc/en-us/articles/360020809672) of the phone user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPhoneDevicesResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<ListPhoneDevicesResponseAssignee>,
    /**
     * Includes manufacturer name and the model name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_type: String,
    /**
     * Display name of the device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Device ID - Unique Identifier of the Device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * MAC address or serial number of the device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<ListPhoneDevicesResponseSite>,
    /**
     * Status of the device. The value is either `online` or `offline`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListPhoneDevicesResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPhoneDevicesResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub devices: Vec<ListPhoneDevicesResponse>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned with a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The total number of records found for the query across all pages.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub total_records: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddPhoneDeviceRequest {
    /**
     * User ID or email address of the user to whom this device is to be assigned. The User ID and the email of the user can be retrieved using the [List Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub assigned_to: String,
    /**
     * Display name of the desk phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * The MAC address of the desk phone.<br>
     *  Note: If you're using a wireless phone, enter the wired MAC address, not the wireless MAC address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    /**
     * Model name of the device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub model: String,
    /**
     * Manufacturer (brand) name of the device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// User to whom the device has been assigned.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetDeviceResponseAssignee {
    /**
     * User to whom the device has been assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * User to whom the device has been assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * User to whom the device has been assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/**
 * [Provisioning type](https://support.zoom.us/hc/en-us/articles/360033223411). The value can be one of the following:
 *   
 *   * `ztp` : Zero touch provisioning.
 *   * `assisted`: Assisted provisioning.
 *   * `manual`: Manual provisioning.
 *   
 *   
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetDeviceResponseProvisionType {
    #[serde(rename = "assisted")]
    Assisted,
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "ztp")]
    Ztp,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetDeviceResponseProvisionType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetDeviceResponseProvisionType::Assisted => "assisted",
            GetDeviceResponseProvisionType::Manual => "manual",
            GetDeviceResponseProvisionType::Ztp => "ztp",
            GetDeviceResponseProvisionType::Noop => "",
            GetDeviceResponseProvisionType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetDeviceResponseProvisionType {
    fn default() -> GetDeviceResponseProvisionType {
        GetDeviceResponseProvisionType::Noop
    }
}
impl GetDeviceResponseProvisionType {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetDeviceResponseProvisionType::Noop)
    }
}

/// Line subscription.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct LineSubscription {
    /**
     * Line subscription.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Line subscription.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Line subscription.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
}

/// Return additional provisioning information with generic device SIP credentials.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SharedLine {
    /**
     * Return additional provisioning information with generic device SIP credentials.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub alias: String,
    /**
     * Return additional provisioning information with generic device SIP credentials.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub line_subscription: Option<LineSubscription>,
    /**
     * Return additional provisioning information with generic device SIP credentials.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub outbound_caller_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SipAccounts {
    /**
     * Authorization ID of the SIP account provided in the provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authorization_id: String,
    /**
     * Outbound proxy provided in the provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub outbound_proxy: String,
    /**
     * Password entered during the  provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * The secondary outbound proxy provided in the provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub secondary_outbound_proxy: String,
    /**
     * Return additional provisioning information with generic device SIP credentials.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared_line: Option<SharedLine>,
    /**
     * SIP Domain provided in the provisioning process.<br>
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_domain: String,
    /**
     * User name of the SIP account provided in the provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
}

/// Provisioning information of a device.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Provision {
    /**
     * Provisioning information of a device.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sip_accounts: Vec<SipAccounts>,
    /**
     * Provisioning information of a device.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<GetDeviceResponseProvisionType>,
    /**
     * Provisioning information of a device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub url: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetDeviceResponse {
    /**
     * User to whom the device has been assigned.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<GetDeviceResponseAssignee>,
    /**
     * Includes manufacturer name and the model name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_type: String,
    /**
     * Display name of the device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Device ID - Unique Identifier of the Device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * MAC address or serial number of the device.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    /**
     * Provisioning information of a device.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provision: Option<Provision>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<ListPhoneDevicesResponseSite>,
    /**
     * Status of the device. The value is either `online` or `offline`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListPhoneDevicesResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateDeviceRequest {
    /**
     * User ID or email address of the user to whom this device is to be assigned. The User ID and the email of the user can be retrieved using the [List Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub assigned_to: String,
    /**
     * Display name of the desk phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * The MAC address of the desk phone.<br>
     *  Note: If you're using a wireless phone, enter the wired MAC address, not the wireless MAC address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ExternalContacts {
    /**
     * The external contact's description.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * The external contact's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The external contact's extension number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * The external contact's ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub external_contact_id: String,
    /**
     * The external contact's unique ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The external contact's username or extension display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The external contact's phone numbers.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListExternalContactsResponse {
    /**
     * External contacts information.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub external_contacts: Vec<ExternalContacts>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned with a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddExternalContactRequest {
    /**
     * The external contact's description.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * The external contact's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The external contact's extension number in the original phone system. Make certain that this extension number is \*\*not\*\* duplicated with an existing extension number in the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * The external contact's custom unique ID. It is recommended that you use a primary key from the original phone system.
     *  
     *  If you do \*\*not\*\* use this parameter, the API automatically generates a contact ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The external contact's username or extension display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A comma-separated list of the external contact's phone numbers. This value \*\*must\*\* be in [E.164](https://en.wikipedia.org/wiki/E.164) format. If you do not provide an extension number, you \*\*must\*\* provide this value.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<String>,
    /**
     * The external contact's SIP group, to define the call routing path. This is for customers that use SIP trunking.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub routing_path: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateExternalContactRequest {
    /**
     * The external contact's description.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * The external contact's email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The external contact's extension number in the original phone system. Make certain that this extension number is \*\*not\*\* duplicated with an existing extension number in the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * The external contact's custom unique ID. It is recommended that you use a primary key from the original phone system.
     *  
     *  If you do \*\*not\*\* use this parameter, the API automatically generates a contact ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The external contact's username or extension display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A comma-separated list of the external contact's phone numbers. This value \*\*must\*\* be in [E.164](https://en.wikipedia.org/wiki/E.164) format. If you do not provide an extension number, you \*\*must\*\* provide this value.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<String>,
    /**
     * The external contact's SIP group, to define the call routing path. This is for customers that use SIP trunking.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub routing_path: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ChangeZrLocationRequest {
    /**
     * Location ID of the location where Zoom Room is to be assigned. This can be retrieved from the `id` property in the response of [List Zoom Rooms Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ChangeParentLocationRequest {
    /**
     * Location ID of the new Parent Location under which you the child location will be positioned. This can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub parent_location_id: String,
}

/**
 * Source
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListCallQueuesResponsePhoneNumbersSource {
    #[serde(rename = "external")]
    External,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListCallQueuesResponsePhoneNumbersSource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListCallQueuesResponsePhoneNumbersSource::External => "external",
            ListCallQueuesResponsePhoneNumbersSource::Internal => "internal",
            ListCallQueuesResponsePhoneNumbersSource::Noop => "",
            ListCallQueuesResponsePhoneNumbersSource::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListCallQueuesResponsePhoneNumbersSource {
    fn default() -> ListCallQueuesResponsePhoneNumbersSource {
        ListCallQueuesResponsePhoneNumbersSource::Noop
    }
}
impl ListCallQueuesResponsePhoneNumbersSource {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListCallQueuesResponsePhoneNumbersSource::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCallQueuesResponsePhoneNumbers {
    /**
     * Unique Identifier of the Phone number assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Source
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ListCallQueuesResponsePhoneNumbersSource>,
}

/**
 * Status of the Call Queue.<br>`active`: Call queue is enabled and active.<br>`inactive`: Call queue is inactive. Inactive call queues cannot be called but will retain its settings and appear in the [Call Queues](https://zoom.us/pbx/page/telephone/groups#/groups) page.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListCallQueuesResponseStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListCallQueuesResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListCallQueuesResponseStatus::Active => "active",
            ListCallQueuesResponseStatus::Inactive => "inactive",
            ListCallQueuesResponseStatus::Noop => "",
            ListCallQueuesResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListCallQueuesResponseStatus {
    fn default() -> ListCallQueuesResponseStatus {
        ListCallQueuesResponseStatus::Noop
    }
}
impl ListCallQueuesResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListCallQueuesResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCallQueuesResponseSite {
    /**
     * Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) where the Call Queue is assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CallQueues {
    /**
     * Extension number assigned to the queue.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Unique Identifier of the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Phone number(s) assigned to the call queue.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<ListCallQueuesResponsePhoneNumbers>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<ListCallQueuesResponseSite>,
    /**
     * Status of the Call Queue.<br>`active`: Call queue is enabled and active.<br>`inactive`: Call queue is inactive. Inactive call queues cannot be called but will retain its settings and appear in the [Call Queues](https://zoom.us/pbx/page/telephone/groups#/groups) page.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListCallQueuesResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCallQueuesResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub call_queues: Vec<CallQueues>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned from a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The total number of records found for this query.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateCallQueueRequestMembersUsers {
    /**
     * Email address of the user. This can be retrieved from the [List Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User Id of the user. This can be retrieved from the [List Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// A list of one or more phone users to be included in the call queue. Provide either users or common area phone(s). Provide at least one user in the users object.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateCallQueueRequestMembers {
    /**
     * A list of one or more phone users to be included in the call queue. Provide either users or common area phone(s). Provide at least one user in the users object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub common_area_phone_ids: Vec<String>,
    /**
     * A list of one or more phone users to be included in the call queue. Provide either users or common area phone(s). Provide at least one user in the users object.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub users: Vec<CreateCallQueueRequestMembersUsers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateCallQueueRequest {
    /**
     * Description for the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Phone extension number for the site.<br>
     *  
     *  If a site code has been [assigned](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b) to the site, provide the short extension number instead of the original extension number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * A list of one or more phone users to be included in the call queue. Provide either users or common area phone(s). Provide at least one user in the users object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members: Option<CreateCallQueueRequestMembers>,
    /**
     * Name of the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Unique identifier of the site. Required only if [multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) have been enabled. This can be retrieved from the [List Phone Sites](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateCallQueueResponse {
    /**
     * Extension number assigned for the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Unique Identifier of the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Status of the Call Queue.<br>
     *  `active`: Call queue is enabled and active.<br>
     *  `inactive`: Call queue is inactive. Inactive call queues cannot be called but will retain its settings and appear in the [Call Queues](https://zoom.us/pbx/page/telephone/groups#/groups) page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

/**
 * Status of the Call Queue.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetCallQueueResponseStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetCallQueueResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetCallQueueResponseStatus::Active => "active",
            GetCallQueueResponseStatus::Inactive => "inactive",
            GetCallQueueResponseStatus::Noop => "",
            GetCallQueueResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetCallQueueResponseStatus {
    fn default() -> GetCallQueueResponseStatus {
        GetCallQueueResponseStatus::Noop
    }
}
impl GetCallQueueResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetCallQueueResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQueueResponseSite {
    /**
     * Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) where the Call Queue is assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQueueResponsePhoneNumbers {
    /**
     * Unique Identifier of the number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Source
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ListCallQueuesResponsePhoneNumbersSource>,
}

/**
 * Level of the user. The value can be one of the following:<br>
 *   `manager`: A call queue manager has the privilege to change call queue settings, policy settings and manage recordings and voicemail inbox. There can only be one manager for each call queue.<br><br>
 *   `user`: Regular user without the privileges of a manager.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Level {
    #[serde(rename = "manager")]
    Manager,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Level {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Level::Manager => "manager",
            Level::User => "user",
            Level::Noop => "",
            Level::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Level {
    fn default() -> Level {
        Level::Noop
    }
}
impl Level {
    pub fn is_noop(&self) -> bool {
        matches!(self, Level::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQueueResponseMembersUsers {
    /**
     * User ID: Unique Identifier of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Level of the user. The value can be one of the following:<br>
     *  `manager`: A call queue manager has the privilege to change call queue settings, policy settings and manage recordings and voicemail inbox. There can only be one manager for each call queue.<br><br>
     *  `user`: Regular user without the privileges of a manager.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<Level>,
    /**
     * Name of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Determines whether the user can receive calls or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub receive_call: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CommonAreaPhones {
    /**
     * Unique Identifier of the [Common Area Phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the [Common Area Phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQueueResponseMembers {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub common_area_phones: Vec<CommonAreaPhones>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub users: Vec<GetCallQueueResponseMembersUsers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQueueResponse {
    /**
     * Extension number assigned to the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Unique Identifier of the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members: Option<GetCallQueueResponseMembers>,
    /**
     * Name of the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<GetCallQueueResponsePhoneNumbers>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<GetCallQueueResponseSite>,
    /**
     * Status of the Call Queue.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<GetCallQueueResponseStatus>,
}

/**
 * Status of the Call Queue. Allowed values:<br>
 *   `active`<br>
 *   `inactive`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UpdateCallQueueRequestStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UpdateCallQueueRequestStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UpdateCallQueueRequestStatus::Active => "active",
            UpdateCallQueueRequestStatus::Inactive => "inactive",
            UpdateCallQueueRequestStatus::Noop => "",
            UpdateCallQueueRequestStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UpdateCallQueueRequestStatus {
    fn default() -> UpdateCallQueueRequestStatus {
        UpdateCallQueueRequestStatus::Noop
    }
}
impl UpdateCallQueueRequestStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, UpdateCallQueueRequestStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateCallQueueRequest {
    /**
     * Description for the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Phone extension number for the site.<br>
     *  
     *  If a site code has been [assigned](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b) to the site, provide the short extension number instead of the original extension number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Name of the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) where the Call Queue is assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
    /**
     * Status of the Call Queue. Allowed values:<br>
     *  `active`<br>
     *  `inactive`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<UpdateCallQueueRequestStatus>,
    /**
     * [Timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) of the Call Queue.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneCallQueueRequestNumbers {
    /**
     * Unique Identifier of the phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneCallQueueRequest {
    /**
     * Provide either the `id` or the `number` field. Only a max of 5 numbers can be assigned to a call queue at a time.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<AssignPhoneCallQueueRequestNumbers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddMembersCallQueueRequestUsers {
    /**
     * Email address of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User ID: Unique Identifier of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// A maximum of 10 members can be added at a time.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddMembersCallQueueRequest {
    /**
     * A maximum of 10 members can be added at a time.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub common_area_phone_ids: Vec<String>,
    /**
     * A maximum of 10 members can be added at a time.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub users: Vec<AddMembersCallQueueRequestUsers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddMembersCallQueueRequestData {
    /**
     * A maximum of 10 members can be added at a time.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members: Option<AddMembersCallQueueRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ChangeCallQueueManagerRequest {
    /**
     * Unique Identifier (userId) or email address of the user who will be the new call queue manager.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub member_id: String,
}

/**
 * Indicates who the phone number belongs to.<br>
 *   `user`: Number has been assigned to an existing phone user allowing them to receive calls through their extension number or direct phone number.<br> `callQueue`: Phone number has been assigned to a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br> `commonAreaPhone`: Phone number has been assigned to a [ provisioned common area desk phone](https://support.zoom.us/hc/en-us/articles/360021119092-Provisioning-Phones-and-Devices).<br>
 *   `autoReceptionist`: Phone number has been assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Integrated-Voice-Response-IVR-).<br>
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetPhoneNumberDetailsResponseAssigneeType {
    #[serde(rename = "autoReceptionist")]
    AutoReceptionist,
    #[serde(rename = "callQueue")]
    CallQueue,
    #[serde(rename = "commonAreaPhone")]
    CommonAreaPhone,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetPhoneNumberDetailsResponseAssigneeType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetPhoneNumberDetailsResponseAssigneeType::AutoReceptionist => "autoReceptionist",
            GetPhoneNumberDetailsResponseAssigneeType::CallQueue => "callQueue",
            GetPhoneNumberDetailsResponseAssigneeType::CommonAreaPhone => "commonAreaPhone",
            GetPhoneNumberDetailsResponseAssigneeType::User => "user",
            GetPhoneNumberDetailsResponseAssigneeType::Noop => "",
            GetPhoneNumberDetailsResponseAssigneeType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetPhoneNumberDetailsResponseAssigneeType {
    fn default() -> GetPhoneNumberDetailsResponseAssigneeType {
        GetPhoneNumberDetailsResponseAssigneeType::Noop
    }
}
impl GetPhoneNumberDetailsResponseAssigneeType {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetPhoneNumberDetailsResponseAssigneeType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPhoneNumberDetailsResponseAssignee {
    /**
     * Extension number of the Phone.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Unique Identifier of the user to whom the number has been assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the user to whom the number has been assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Indicates who the phone number belongs to.<br>
     *  `user`: Number has been assigned to an existing phone user allowing them to receive calls through their extension number or direct phone number.<br> `callQueue`: Phone number has been assigned to a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br> `commonAreaPhone`: Phone number has been assigned to a [ provisioned common area desk phone](https://support.zoom.us/hc/en-us/articles/360021119092-Provisioning-Phones-and-Devices).<br>
     *  `autoReceptionist`: Phone number has been assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Integrated-Voice-Response-IVR-).<br>
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<GetPhoneNumberDetailsResponseAssigneeType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPhoneNumberDetailsResponseCarrier {
    /**
     * Carrier code.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub code: i64,
    /**
     * Carrier name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPhoneNumberDetailsResponseSipGroup {
    /**
     * Sip group display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Sip group id.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPhoneNumberDetailsResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<GetPhoneNumberDetailsResponseAssignee>,
    /**
     * The capability for the phone number, whether it can take incoming calls, make outgoing calls, or both. Values include `incoming`, `outgoing`, or both of these values.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub capability: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub carrier: Option<GetPhoneNumberDetailsResponseCarrier>,
    /**
     * The display name for the phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Unique Identifier of the Phone Number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Location (city, state and country) where the Phone number is assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Phone number in E164 format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * The type of number. Values can be one of the following:<br>
     *  `toll`, `tollfree`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub number_type: Option<ListAccountPhoneNumbersResponseNumberType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sip_group: Option<GetPhoneNumberDetailsResponseSipGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<Site>,
    /**
     * Source of phone number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<Source>,
    /**
     * Status of the number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListAccountPhoneNumbersResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdatePhoneNumberDetailsRequest {
    /**
     * Phone number capability. Values: `outgoing` or `incoming`. Add one or both.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub capability: Vec<String>,
    /**
     * Phone number display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Sip group id, only used for byoc phone number update.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_group_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ChangeMainCompanyNumberRequest {
    /**
     * Provide either the unique identifier of the phone number (id) or the phone number itself in e164 format (e.g: +199955500123).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCallingPlansResponse {
    /**
     * Total number of plan used.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub assigned: i64,
    /**
     * Remaining number of calling plans that can be assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub available: i64,
    /**
     * Name of the plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Total number of plan subscriptions bought.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub subscribed: i64,
    /**
     * Plan type. Refer to the Plan Number section [here](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCallingPlansResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub calling_plans: Vec<ListCallingPlansResponse>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPhoneUsersResponseSite {
    /**
     * Unique Identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPhoneUsersResponseCallingPlans {
    /**
     * Name of the calling plan that user is enrolled in.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Type of calling plan that user is enrolled in.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPhoneUsersResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub calling_plans: Vec<ListPhoneUsersResponseCallingPlans>,
    /**
     * Email address of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Extension number assigned to the user's Zoom phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Unique Identifier of the user (userId).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Zoom Phone Identifier of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_user_id: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<ListPhoneUsersResponseSite>,
    /**
     * Displays the status of the user's Zoom Phone license. The value can be either of the following:<br>
     *  `activate`: Active Zoom phone user.<br>
     *  `deactivate`: User with Zoom phone license disabled. This type of user can't make or receive calls.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListPhoneUsersResponseData {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned from a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The total records found for this query.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub users: Vec<ListPhoneUsersResponse>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateAutoReceptionistRequest {
    /**
     * Extension number to be assigned to the auto receptionist. If site code is enabled, provide the short extension number instead.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Display name of the auto receptionist.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumbersAutoReceptionistRequest {
    /**
     * Unique Identifier of the Phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number in e164 format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumbersAutoReceptionistRequestData {
    /**
     * Provide either the unique identifier of the Phone Number  in the `id` field or provide the phone number in the `number` field.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<AssignPhoneNumbersAutoReceptionistRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCommonAreaPhonesResponseCallingPlans {
    /**
     * Plan name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * [Plan Number](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/**
 * Phone number source. The value can be either `internal` or `external`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListCommonAreaPhonesResponsePhoneNumbersSource {
    #[serde(rename = "external")]
    External,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListCommonAreaPhonesResponsePhoneNumbersSource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListCommonAreaPhonesResponsePhoneNumbersSource::External => "external",
            ListCommonAreaPhonesResponsePhoneNumbersSource::Internal => "internal",
            ListCommonAreaPhonesResponsePhoneNumbersSource::Noop => "",
            ListCommonAreaPhonesResponsePhoneNumbersSource::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListCommonAreaPhonesResponsePhoneNumbersSource {
    fn default() -> ListCommonAreaPhonesResponsePhoneNumbersSource {
        ListCommonAreaPhonesResponsePhoneNumbersSource::Noop
    }
}
impl ListCommonAreaPhonesResponsePhoneNumbersSource {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListCommonAreaPhonesResponsePhoneNumbersSource::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCommonAreaPhonesResponsePhoneNumbers {
    /**
     * Unique Identifier of the Phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Phone number source. The value can be either `internal` or `external`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ListCommonAreaPhonesResponsePhoneNumbersSource>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCommonAreaPhonesResponseSite {
    /**
     * Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) to which the common area desk phone is assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCommonAreaPhonesResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub calling_plans: Vec<ListCommonAreaPhonesResponseCallingPlans>,
    /**
     * Type of device (manufacturer name + model name). Refer to the table here for a list of [supported devices](https://marketplace.zoom.us/docs/api-reference/other-references/zoomphone-supporteddevice).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_type: String,
    /**
     * Display name of the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Unique Identifier of the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     *  Mac address or serial number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<ListCommonAreaPhonesResponsePhoneNumbers>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<ListCommonAreaPhonesResponseSite>,
    /**
     * Status of the common area phone. It can be either `online` or `offline`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCommonAreaPhonesResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub common_area_phones: Vec<ListCommonAreaPhonesResponse>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * Total number of records returned from a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * Total number of records found for this query.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddCommonAreaPhoneRequest {
    /**
     * Description for the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Display name of the Common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Extension number assigned to the common area phone. If site code is enabled, provide the short extension number instead.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Mac Address (serial number) of the common area desk phone. These examples show the formats supported: `64-16-7f-37-90-92` or `64167f379092`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    /**
     * Device Model name. Refer to the "Model Name" field in [this](https://marketplace.zoom.us/docs/api-reference/other-references/zoomphone-supporteddevice) table.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub model: String,
    /**
     * Provision template id
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub provision_template_id: String,
    /**
     * Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672). This can be retrieved from the [List Phone Sites](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
    /**
     * [Timezone ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists) for the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub time_zone: String,
    /**
     * Phone device manufacturer name. Refer to the "Manufacturer Name" field in [this](https://marketplace.zoom.us/docs/api-reference/other-references/zoomphone-supporteddevice) table.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddCommonAreaPhoneResponse {
    /**
     * Display name of the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Unique Identifier of the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCommonAreaPhoneResponseProvisionSipAccounts {
    /**
     * Authorization ID of the SIP account provided in the provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authorization_id: String,
    /**
     * Outbound proxy provided in the provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub outbound_proxy: String,
    /**
     * Password entered during the  provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * The secondary outbound proxy provided in the provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub secondary_outbound_proxy: String,
    /**
     * SIP Domain provided in the provisioning process.<br>
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_domain: String,
    /**
     * User name of the SIP account provided in the provisioning process.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_name: String,
}

/// Provisioning information of the common area phone.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCommonAreaPhoneResponseProvision {
    /**
     * Provisioning information of the common area phone.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sip_accounts: Vec<GetCommonAreaPhoneResponseProvisionSipAccounts>,
    /**
     * Provisioning information of the common area phone.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<GetDeviceResponseProvisionType>,
    /**
     * Provisioning information of the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub url: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCommonAreaPhoneResponseNumbers {
    /**
     * Phone number display name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Phone number id.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Phone number source. The value can be either `internal` or `external`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ListCommonAreaPhonesResponsePhoneNumbersSource>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCommonAreaPhoneResponseCallingPlans {
    /**
     * Calling plan name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Calling plan type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ProvisionTemplate {
    /**
     * Provision template id.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Provision template name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Support provision template or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub supported: bool,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SelectOutboundCallerId {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InternationalCall {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

/**
 * Allow Hot Desking feature to current device.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetCommonAreaPhoneResponsePolicyHotDeskingStatus {
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "on")]
    On,
    #[serde(rename = "unsupported")]
    Unsupported,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetCommonAreaPhoneResponsePolicyHotDeskingStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetCommonAreaPhoneResponsePolicyHotDeskingStatus::Off => "off",
            GetCommonAreaPhoneResponsePolicyHotDeskingStatus::On => "on",
            GetCommonAreaPhoneResponsePolicyHotDeskingStatus::Unsupported => "unsupported",
            GetCommonAreaPhoneResponsePolicyHotDeskingStatus::Noop => "",
            GetCommonAreaPhoneResponsePolicyHotDeskingStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetCommonAreaPhoneResponsePolicyHotDeskingStatus {
    fn default() -> GetCommonAreaPhoneResponsePolicyHotDeskingStatus {
        GetCommonAreaPhoneResponsePolicyHotDeskingStatus::Noop
    }
}
impl GetCommonAreaPhoneResponsePolicyHotDeskingStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetCommonAreaPhoneResponsePolicyHotDeskingStatus::Noop)
    }
}

///
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct HotDesking {
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<GetCommonAreaPhoneResponsePolicyHotDeskingStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCommonAreaPhoneResponsePolicy {
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hot_desking: Option<HotDesking>,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub international_call: Option<InternationalCall>,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub select_outbound_caller_id: Option<SelectOutboundCallerId>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCommonAreaPhoneResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub calling_plans: Vec<GetCommonAreaPhoneResponseCallingPlans>,
    /**
     * Type of device (manufacturer name + model name).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_type: String,
    /**
     * Unique Identifier of the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     *  Mac address or serial number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    /**
     * Display name of the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<GetCommonAreaPhoneResponseNumbers>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GetCommonAreaPhoneResponsePolicy>,
    /**
     * Provisioning information of the common area phone.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provision: Option<GetCommonAreaPhoneResponseProvision>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provision_template: Option<ProvisionTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<ListCommonAreaPhonesResponseSite>,
    /**
     * Status of the common area phone. It can be either `online` or `offline`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateCommonAreaPhoneRequestPolicySelectOutboundCallerId {
    /**
     * Allow current extension to change outbound caller ID when placing calls.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateCommonAreaPhoneRequestPolicyInternationalCall {
    /**
     * Allow current extension to place international calls outside of the calling plan.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub enable: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateCommonAreaPhoneRequestPolicy {
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hot_desking: Option<HotDesking>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub international_call: Option<UpdateCommonAreaPhoneRequestPolicyInternationalCall>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub select_outbound_caller_id: Option<UpdateCommonAreaPhoneRequestPolicySelectOutboundCallerId>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateCommonAreaPhoneRequest {
    /**
     * Display name of the common area phone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Extension number of the phone. If site code is enabled, provide short extension number instead.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     *  Mac address or serial number of the device. Examples of supported format: "64-16-7f-37-90-92" or "64167f379092".
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mac_address: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UpdateCommonAreaPhoneRequestPolicy>,
    /**
     * Provision template id
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub provision_template_id: String,
    /**
     * Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) to which the common area desk phone is assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumbersCommonAreaRequest {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumbersCommonAreaRequestData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<AssignPhoneNumbersCommonAreaRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumbersCommonAreaResponse {
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub number: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumbersCommonAreaResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<AssignPhoneNumbersCommonAreaResponse>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignCallingPlansCommonAreaPhoneRequest {
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignCallingPlansCommonAreaPhoneRequestData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub calling_plans: Vec<AssignCallingPlansCommonAreaPhoneRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignCallingPlansCommonAreaPhoneResponse {
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub name: i64,
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignCallingPlansCommonAreaPhoneResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub calling_plans: Vec<AssignCallingPlansCommonAreaPhoneResponse>,
}

/**
 * Indicates the match type for the blocked list. The values can be one of the following:<br>
 *   `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
 *   `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum MatchType {
    #[serde(rename = "phoneNumber")]
    PhoneNumber,
    #[serde(rename = "prefix")]
    Prefix,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for MatchType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            MatchType::PhoneNumber => "phoneNumber",
            MatchType::Prefix => "prefix",
            MatchType::Noop => "",
            MatchType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for MatchType {
    fn default() -> MatchType {
        MatchType::Noop
    }
}
impl MatchType {
    pub fn is_noop(&self) -> bool {
        matches!(self, MatchType::Noop)
    }
}

/**
 * Block type.<br>
 *   `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
 *   `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum BlockType {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for BlockType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            BlockType::Inbound => "inbound",
            BlockType::Outbound => "outbound",
            BlockType::Noop => "",
            BlockType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for BlockType {
    fn default() -> BlockType {
        BlockType::Noop
    }
}
impl BlockType {
    pub fn is_noop(&self) -> bool {
        matches!(self, BlockType::Noop)
    }
}

/**
 * Indicates whether the blocking is active or inactive. <br>
 *   `active`: The blocked list is active.<br>
 *   `inactive`: The blocked list is inactive.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListBlockedResponseStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListBlockedResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListBlockedResponseStatus::Active => "active",
            ListBlockedResponseStatus::Inactive => "inactive",
            ListBlockedResponseStatus::Noop => "",
            ListBlockedResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListBlockedResponseStatus {
    fn default() -> ListBlockedResponseStatus {
        ListBlockedResponseStatus::Noop
    }
}
impl ListBlockedResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListBlockedResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct BlockedList {
    /**
     * Block type.<br>
     *  `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
     *  `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub block_type: Option<BlockType>,
    /**
     * Provide a comment to help you identify the blocked number or prefix.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub comment: String,
    /**
     * Unique identifier of the blocked list.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Indicates the match type for the blocked list. The values can be one of the following:<br>
     *  `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
     *  `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub match_type: Option<MatchType>,
    /**
     * The phone number to be blocked if you passed "phoneNumber" as the value for the `match_type` field. If you passed "prefix" as the value for the `match_type` field, provide the prefix of the phone number here including the country code. For example, entering 1905 blocks numbers with country code 1 and area code 905.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * Indicates whether the blocking is active or inactive. <br>
     *  `active`: The blocked list is active.<br>
     *  `inactive`: The blocked list is inactive.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListBlockedResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListBlockedResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub blocked_list: Vec<BlockedList>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The total number of records returned from a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The total number of records found for this query.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/**
 * Specify the match type for the blocked list. The values can be one of the following:<br><br>
 *   `phoneNumber`: Choose this option (Phone Number Match) if you want to block a specific phone number. Then, in the `phone_number` field, provide the phone number along with the country code.<br><br>
 *   `prefix`: Choose this option (Prefix Match) if you want to block all numbers with a specific country code and area code. Next, in the `phone_number` field, enter a country code as part of the prefix. For example, entering 1907 blocks numbers with country code 1 and area code 907.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AddAnumberBlockedListRequestMatchType {
    #[serde(rename = "phoneNumber")]
    PhoneNumber,
    #[serde(rename = "prefix")]
    Prefix,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AddAnumberBlockedListRequestMatchType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AddAnumberBlockedListRequestMatchType::PhoneNumber => "phoneNumber",
            AddAnumberBlockedListRequestMatchType::Prefix => "prefix",
            AddAnumberBlockedListRequestMatchType::Noop => "",
            AddAnumberBlockedListRequestMatchType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AddAnumberBlockedListRequestMatchType {
    fn default() -> AddAnumberBlockedListRequestMatchType {
        AddAnumberBlockedListRequestMatchType::Noop
    }
}
impl AddAnumberBlockedListRequestMatchType {
    pub fn is_noop(&self) -> bool {
        matches!(self, AddAnumberBlockedListRequestMatchType::Noop)
    }
}

/**
 * State whether you want the block type to be inbound or outbound.<br>
 *   `inbound`: Pass this value to prevent the blocked number or prefix from calling in to phone users.<br>
 *   `outbound`: Pass this value to prevent phone users from calling the blocked number or prefix.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AddAnumberBlockedListRequestBlockType {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AddAnumberBlockedListRequestBlockType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AddAnumberBlockedListRequestBlockType::Inbound => "inbound",
            AddAnumberBlockedListRequestBlockType::Outbound => "outbound",
            AddAnumberBlockedListRequestBlockType::Noop => "",
            AddAnumberBlockedListRequestBlockType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AddAnumberBlockedListRequestBlockType {
    fn default() -> AddAnumberBlockedListRequestBlockType {
        AddAnumberBlockedListRequestBlockType::Noop
    }
}
impl AddAnumberBlockedListRequestBlockType {
    pub fn is_noop(&self) -> bool {
        matches!(self, AddAnumberBlockedListRequestBlockType::Noop)
    }
}

/**
 * Enable or disable the blocking. One of the following values are allowed:<br>
 *   `active`: Keep the blocking active.<br>
 *   `inactive`: Disable the blocking.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum AddAnumberBlockedListRequestStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for AddAnumberBlockedListRequestStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            AddAnumberBlockedListRequestStatus::Active => "active",
            AddAnumberBlockedListRequestStatus::Inactive => "inactive",
            AddAnumberBlockedListRequestStatus::Noop => "",
            AddAnumberBlockedListRequestStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for AddAnumberBlockedListRequestStatus {
    fn default() -> AddAnumberBlockedListRequestStatus {
        AddAnumberBlockedListRequestStatus::Noop
    }
}
impl AddAnumberBlockedListRequestStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, AddAnumberBlockedListRequestStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateBlockedListRequest {
    /**
     * State whether you want the block type to be inbound or outbound.<br>
     *  `inbound`: Pass this value to prevent the blocked number or prefix from calling in to phone users.<br>
     *  `outbound`: Pass this value to prevent phone users from calling the blocked number or prefix.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub block_type: Option<AddAnumberBlockedListRequestBlockType>,
    /**
     * Provide a comment to help you identify the blocked number or prefix.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub comment: String,
    /**
     * Specify the match type for the blocked list. The values can be one of the following:<br><br>
     *  `phoneNumber`: Choose this option (Phone Number Match) if you want to block a specific phone number. Then, in the `phone_number` field, provide the phone number along with the country code.<br><br>
     *  `prefix`: Choose this option (Prefix Match) if you want to block all numbers with a specific country code and area code. Next, in the `phone_number` field, enter a country code as part of the prefix. For example, entering 1907 blocks numbers with country code 1 and area code 907.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub match_type: Option<AddAnumberBlockedListRequestMatchType>,
    /**
     * The phone number to be blocked if you passed "phoneNumber" as the value for the `match_type` field. If you passed "prefix" as the value for the `match_type` field, provide the prefix of the phone number here including the country code. For example, entering 1905 blocks numbers with country code 1 and area code 905.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * Enable or disable the blocking. One of the following values are allowed:<br>
     *  `active`: Keep the blocking active.<br>
     *  `inactive`: Disable the blocking.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<AddAnumberBlockedListRequestStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddAnumberBlockedListResponse {
    /**
     * Unique identifier of the blocked list.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetBlockedListResponse {
    /**
     * Block type.<br>
     *  `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
     *  `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub block_type: Option<BlockType>,
    /**
     * Provide a comment to help you identify the blocked number or prefix.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub comment: String,
    /**
     * Unique identifier of the blocked list.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Indicates the match type for the blocked list. The values can be one of the following:<br>
     *  `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
     *  `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub match_type: Option<MatchType>,
    /**
     * The phone number or the prefix number that is blocked based on the `match_type`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * Indicates whether the blocking is active or inactive. <br>
     *  `active`: The blocked list is active.<br>
     *  `inactive`: The blocked list is inactive.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListBlockedResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct BillingReports {
    /**
     * End date of the billing period.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<chrono::NaiveDate>,
    /**
     * Unique Identifier of the report. Use this ID to retrieve billing invoice via the "Get Billing Invoices API".
     *  
     *  You can also use this ID to export a CSV file of the billing report from this URL: `https://zoom.us/account/report/billing/export?id={id}`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Start date of the billing period.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<chrono::NaiveDate>,
    /**
     * Total tax amount for this billing period.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tax_amount: String,
    /**
     * Total billing amount for this billing period.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub total_amount: String,
    /**
     * Type of the billing report. The value should be either of the following:<br>
     *  `0` - Detailed Billing Reports
     *  `1` - Custom Billing Reports
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetBillingReportResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub billing_reports: Vec<BillingReports>,
    /**
     * Currency of the billed amount.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub currency: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Invoices {
    /**
     * End date of the invoice period.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<chrono::NaiveDate>,
    /**
     * Name of the invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub invoice_charge_name: String,
    /**
     * Invoice number
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub invoice_number: String,
    /**
     * Number of licenses bought.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub quantity: i64,
    /**
     * Start date of the invoice period.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<chrono::NaiveDate>,
    /**
     * Tax amount in the invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tax_amount: String,
    /**
     * Total billed amount in the invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub total_amount: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetBillingInvoicesReportsResponse {
    /**
     * Currency of the billed amount in the invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub currency: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub invoices: Vec<Invoices>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSharedLineGroupsResponsePhoneNumbers {
    /**
     * Unique identifier of the phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number in E164 format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Status of the number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListAccountPhoneNumbersResponseStatus>,
}

/**
 * Status of the Shared Line Group.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListSharedLineGroupsResponseStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListSharedLineGroupsResponseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListSharedLineGroupsResponseStatus::Active => "active",
            ListSharedLineGroupsResponseStatus::Inactive => "inactive",
            ListSharedLineGroupsResponseStatus::Noop => "",
            ListSharedLineGroupsResponseStatus::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListSharedLineGroupsResponseStatus {
    fn default() -> ListSharedLineGroupsResponseStatus {
        ListSharedLineGroupsResponseStatus::Noop
    }
}
impl ListSharedLineGroupsResponseStatus {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListSharedLineGroupsResponseStatus::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSharedLineGroupsResponseSite {
    /**
     * Unique Identifier of the [Site](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/getasite).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the Site.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct SharedLineGroups {
    /**
     * Display Name of the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Extension number assigned to the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Unique Identifier of the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone Numbers Assigned to the Shared Line Group.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<ListSharedLineGroupsResponsePhoneNumbers>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<ListSharedLineGroupsResponseSite>,
    /**
     * Status of the Shared Line Group.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListSharedLineGroupsResponseStatus>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSharedLineGroupsResponse {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub shared_line_groups: Vec<SharedLineGroups>,
    /**
     * Total records found in the response for this request.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateSharedLineGroupRequest {
    /**
     * Provide a description for the shared line group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Provide a name to help identify the shared line group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Extension number to be assigned to the shared line group. If a [site code has been assigned](https://support.zoom.us/hc/en-us/articles/360020809672#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b) to the site, provide the short extension number
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) that you would like to use for the shared line group. You will only be able to add members that belong to this site to the shared line group.
     *  
     *  This field is required only if the [multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) option has been enabled for the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSharedLineGroupResponsePhoneNumbers {
    /**
     * Unique identifier of the phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number in E164 format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

/// Site assigned to the Shared Line Group.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSharedLineGroupResponseSite {
    /**
     * Site assigned to the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Site assigned to the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSharedLineGroupResponseMembersUsers {
    /**
     * Unique identifier of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSharedLineGroupResponseMembersCommonAreaPhones {
    /**
     * Unique identifier of the [Common Area Phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the [Common Area Phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// View current [members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_3ffbbb77-a009-4c09-91e4-81fc264b61d6) of the shared line group.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSharedLineGroupResponseMembers {
    /**
     * View current [members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_3ffbbb77-a009-4c09-91e4-81fc264b61d6) of the shared line group.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub common_area_phones: Vec<GetSharedLineGroupResponseMembersCommonAreaPhones>,
    /**
     * View current [members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_3ffbbb77-a009-4c09-91e4-81fc264b61d6) of the shared line group.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub users: Vec<GetSharedLineGroupResponseMembersUsers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetSharedLineGroupResponse {
    /**
     * Display Name of the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Extension number assigned to the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Unique Identifier of the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * View current [members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_3ffbbb77-a009-4c09-91e4-81fc264b61d6) of the shared line group.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members: Option<GetSharedLineGroupResponseMembers>,
    /**
     * Object representing information about phone number(s) assigned to the group.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<GetSharedLineGroupResponsePhoneNumbers>,
    /**
     * If you have multiple direct phone numbers assigned to the shared line group, this is the primary number selected for desk phones. The primary number shares the same line as the extension number. This means if a caller is routed to the shared line group through an auto receptionist, the line associated with the primary number will be used.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub primary_number: String,
    /**
     * Site assigned to the Shared Line Group.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<GetSharedLineGroupResponseSite>,
    /**
     * Status of the Shared Line Group.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListSharedLineGroupsResponseStatus>,
    /**
     * Timezone used for the Business Hours.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
}

/// If you have multiple direct phone numbers assigned to the shared line group, select a number from those numbers as the primary number. The primary number shares the same line as the extension number. This means if a caller is routed to the shared line group through an auto receptionist, the line associated with the primary number will be used. A pending number cannot be used as a Primary Number.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct PrimaryNumber {
    /**
     * If you have multiple direct phone numbers assigned to the shared line group, select a number from those numbers as the primary number. The primary number shares the same line as the extension number. This means if a caller is routed to the shared line group through an auto receptionist, the line associated with the primary number will be used. A pending number cannot be used as a Primary Number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * If you have multiple direct phone numbers assigned to the shared line group, select a number from those numbers as the primary number. The primary number shares the same line as the extension number. This means if a caller is routed to the shared line group through an auto receptionist, the line associated with the primary number will be used. A pending number cannot be used as a Primary Number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdateSharedLineGroupRequest {
    /**
     * Display Name of the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_name: String,
    /**
     * Extension number assigned to the Shared Line Group.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * If you have multiple direct phone numbers assigned to the shared line group, select a number from those numbers as the primary number. The primary number shares the same line as the extension number. This means if a caller is routed to the shared line group through an auto receptionist, the line associated with the primary number will be used. A pending number cannot be used as a Primary Number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub primary_number: Option<PrimaryNumber>,
    /**
     * Status of the Shared Line Group.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ListSharedLineGroupsResponseStatus>,
    /**
     * Timezone to be used for the Business Hours. A value should be provided from the IDs listed [here](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddMembersSharedLineGroupRequestUsers {
    /**
     * Email address of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Unique identifier of the user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

/// Members can comprise of users on the account as well as common area phones. You can add a maximum of 10 members at once.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddMembersSharedLineGroupRequest {
    /**
     * Members can comprise of users on the account as well as common area phones. You can add a maximum of 10 members at once.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub common_area_phone_ids: Vec<String>,
    /**
     * Members can comprise of users on the account as well as common area phones. You can add a maximum of 10 members at once.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub users: Vec<AddMembersSharedLineGroupRequestUsers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddMembersSharedLineGroupRequestData {
    /**
     * Members can comprise of users on the account as well as common area phones. You can add a maximum of 10 members at once.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members: Option<AddMembersSharedLineGroupRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignPhoneNumbersSlgRequest {
    /**
     * Phone number(s) to be assigned to the Shared Line Group.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<AssignPhoneCallQueueRequestNumbers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddAutoReceptionistRequest {
    /**
     * Provide a name to help identify the auto receptionist.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Unique identifier of the site where the auto receptionist is to be assigned. This field is required only if you have [multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) enabled.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddAutoReceptionistResponse {
    /**
     *  Extension number assigned to the auto receptionist.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub extension_number: i64,
    /**
     * Auto receptionist ID. Unique Identifier of the auto receptionist.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     *  Name of the auto receptionist.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddBatchRegistrantsResponse {
    /**
     * Email address of the registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Unique URL using which registrant can join the meeting.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub join_url: String,
    /**
     * Unique identifier of the registrant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub registrant_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddBatchRegistrantsResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub registrants: Vec<AddBatchRegistrantsResponse>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQueueRecordingsResponse {
    /**
     * Contact name of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_name: String,
    /**
     * Name of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number: String,
    /**
     * Phone number type of the callee.<br>`1`- Internal<br>`2`- External
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number_type: String,
    /**
     * Name of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_name: String,
    /**
     * Phone number of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number: String,
    /**
     * Phone number type of the caller.<br>`1`- Internal<br>`2`- External
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number_type: String,
    /**
     * Date of the recording.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * Direction of call. The value of this field can be either `outbound` or `inbound`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub direction: String,
    /**
     * URL using which the recording can be downloaded.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * Duration of the call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Unique Identifier of the recording.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQueueRecordingsResponseData {
    /**
     * Start date.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub from: String,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub recordings: Vec<GetCallQueueRecordingsResponse>,
    /**
     * End date.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to: String,
    /**
     * The total number of records returned for this API call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub total_records: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Params {
    /**
     * This field is only required if Google Calendar is being used for the event associated with the Zoom Room. The value for this field can be retrieved by calling Google's [CalendarList:list API](https://developers.google.com/calendar/v3/reference/events/list) and referring to the "id" field included in the [calendarList resource](https://developers.google.com/calendar/v3/reference/calendarList#resource).
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub calendar_id: String,
    /**
     * This field is required only for Microsoft Exchange or Office 365  calendar. The change key represents the specific version of the calendar item and can be retrieved by using Microsoft's [FindItem Operation](https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/finditem-operation) and referring to the ChangeKey field of the ItemId Element included in the operation response.<br>
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub change_key: String,
    /**
     * Unique Identifier of the calendar event associated with the Zoom Room.<br><br>If the calendar integration being used is Microsoft Exchange, the value for this field can be retrieved by using Microsoft's [FindItem Operation](https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/finditem-operation) and referring to the Id field of the ItemId Element included in the operation response.<br><br>If the Google calendar integration was used for this event, the event_id can be retrieved by calling Google's [Events:list API](https://developers.google.com/calendar/v3/reference/events/list) and referring to the "id" field included in the [events resource](https://developers.google.com/calendar/v3/reference/events#resource).
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub event_id: String,
    /**
     * This field is only required for Microsoft Exchange / Office 365 Calendar. It is the [resource mailbox](https://support.microsoft.com/en-us/help/10063/creating-and-managing-resource-mailboxes-in-office-365) associated with the calendar.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub resource_email: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CheckInRoomsRequest {
    /**
     * The value of this field can be one of the following:<br>
     *  \* zoomroom.check_in
     *  \* zoomroom.check_out
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub method: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<Params>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InMeetingRecordingControlRequest {
    /**
     * The method that you would like to control. The value of this field can be one of the following:
     *  \* `recording.start`: Provide this value if you would like to start the recording.<br><br>
     *  \* `recording.stop`: Provide this value if you would like to stop the recording.<br><br>
     *  \* `recording.pause`: Provide this value if you would like to pause the recording.<br><br>
     *  \* `recording.resume`: Provide this value if you would like to resume the recording that was previously paused.
     *  
     *  
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub method: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSipTrunksResponse {
    /**
     * DNIS of the SIP trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dnis: String,
    /**
     * Unique identifier of the sip trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name assigned to the SIP trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Prefix of the SIP Connected Audio phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number_prefix: String,
    /**
     * Outbound caller Id assigned to the trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub outbound_caller_id: String,
    /**
     * IP address or domain of the SIP trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_server_address: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListSipTrunksResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sip_trunks: Vec<ListSipTrunksResponse>,
    /**
     * Total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignSipTrunksRequest {
    /**
     * DNIS of the sub account. The prefix of the DNIS (i.e. the first five digits of the DNIS value) must match the DNIS prefix of the master account. To retrieve the DNIS prefix of a master account's SIP Trunk, use the List SIP Trunks API and refer to the first five digits in the `dnis` value.
     *  
     *  For example, if the DNIS of the master account is 1888812345, the DNIS of the sub account must comprise of "18888" + "random_number". The maximum allowed length of the DNIS is 8.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dnis: String,
    /**
     * Unique identifier of the SIP trunk that will be assigned to the sub account. The value of this field can be retrieved by listing the SIP Trunks of a master account using List SIP Trunks API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Assign an outbound caller Id to the trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub outbound_caller_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignSipTrunksRequestData {
    /**
     * Array of one or more SIP Trunk objects.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sip_trunks: Vec<AssignSipTrunksRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignSipTrunksResponse {
    /**
     * DNIS - identifier for the SIP trunk enabled account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dnis: String,
    /**
     * Unique identifier of the SIP trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the SIP trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * If the value of this field is `"0"`, it means that all the calls will be routed through this special line. All other values indicate the prefix of the phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number_prefix: String,
    /**
     * IP Address or domain of the SIP trunk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_server_address: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AssignSipTrunksResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sip_trunks: Vec<AssignSipTrunksResponse>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CalloutCountries {
    /**
     * Country code.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * Two letter country Id.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the country.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListInternalCalloutCountriesResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub callout_countries: Vec<CalloutCountries>,
    /**
     * The total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddCalloutCountriesRequest {
    /**
     * Two letter country code of the  call-out country.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddCalloutCountriesRequestData {
    /**
     * List of callout countries.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub callout_countries: Vec<AddCalloutCountriesRequest>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddCalloutCountriesResponse {
    /**
     * Country code for Phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     * Country ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the country.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddCalloutCountriesResponseData {
    /**
     * List of Call-out countries.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub callout_countries: Vec<AddCalloutCountriesResponse>,
}

/**
 * Specify the language in which this phone number should be displayed. Currently, the only supported languages are `en-GB`, `en-US`, `de-DE`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Languages {
    #[serde(rename = "de-DE")]
    De,
    #[serde(rename = "en-GB")]
    EnGb,
    #[serde(rename = "en-US")]
    EnUs,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Languages {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Languages::De => "de-DE",
            Languages::EnGb => "en-GB",
            Languages::EnUs => "en-US",
            Languages::Noop => "",
            Languages::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Languages {
    fn default() -> Languages {
        Languages::Noop
    }
}
impl Languages {
    pub fn is_noop(&self) -> bool {
        matches!(self, Languages::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InternalNumbers {
    /**
     * Control whether the number can be used to attend 3rd party meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_for_external_meetings: bool,
    /**
     * Specify whether this number can be used by users to join a meeting or not. <br>
     *  \* `true` : This number can be used to join a meeting. <br>
     *  \*  `false`: This number can not be used to join a meeting.
     *  
     *  Note that if the value of `visible` field is set to `true`, the value of this field will always be `true`.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_join: bool,
    /**
     * Two letter country code of the country.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Phone number with display format. For instance, if the value in the number field is `+1888888000`, the value of this field could be `+1 888 888 000`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_number: String,
    /**
     * A short description for the phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub labels: String,
    /**
     * Specify the language in which this phone number should be displayed. Currently, the only supported languages are `en-GB`, `en-US`, `de-DE`.
     */
    #[serde(default, skip_serializing_if = "Languages::is_noop")]
    pub languages: Languages,
    /**
     * Phone number in E164 format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Type of phone number. <br>
     *  The value can be one of the following:<br>
     *  \* `0` : toll <br>
     *  \* `1` : tollfree
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * Specify whether you want this number to be visible (in Zoom Client and Zoom Portal) to the account users or not. The value could be one of the following:<br>
     *  \* `true`: Make the number visible. <br>
     *  \* `false`: Hide the number.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub visible: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListInternalNumbersResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub internal_numbers: Vec<InternalNumbers>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records that you specified to get in the response per page.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddInternalNumbersRequest {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub internal_numbers: Vec<InternalNumbers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddInternalNumbersResponse {
    /**
     * Control whether the number can be used to attend 3rd party meetings.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_for_external_meetings: bool,
    /**
     * Specify whether this number can be used by users to join a meeting or not. <br>
     *  \* `true` : This number can be used to join a meeting. <br>
     *  \*  `false`: This number can not be used to join a meeting.
     *  
     *  Note that if the value of `visible` field is set to `true`, the value of this field will always be `true`.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub allow_join: bool,
    /**
     * Two letter country code of the country.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Phone number with display format. For instance, if the value in the number field is `+1888888000`, the value of this field could be `+1 888 888 000`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display_number: String,
    /**
     * Unique identifier of the internal number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * A short description for the phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub labels: String,
    /**
     * Specify the language in which this phone number should be displayed. Currently, the only supported languages are `en-GB`, `en-US`, `de-DE`.
     */
    #[serde(default, skip_serializing_if = "Languages::is_noop")]
    pub languages: Languages,
    /**
     * Phone number in E164 format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Type of phone number. <br>
     *  The value can be one of the following:<br>
     *  \* `0` : toll <br>
     *  \* `1` : tollfree
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * Specify whether you want this number to be visible (in Zoom Client and Zoom Portal) to the account users or not. The value could be one of the following:<br>
     *  \* `true`: Make the number visible. <br>
     *  \* `false`: Hide the number.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub visible: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddInternalNumbersResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub internal_numbers: Vec<AddInternalNumbersResponse>,
}

/**
 * Specify one of the following values for this field:
 *   
 *   `upgrade`: Upgrade to the latest Zoom Rooms App Version.<br>
 *   `downgrade`: Downgrade the Zoom Rooms App Version.<br>
 *   `cancel`: Cancel an ongoing upgrade or downgrade process.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ChangeZoomRoomsAppVersionRequestAction {
    #[serde(rename = "cancel")]
    Cancel,
    #[serde(rename = "downgrade")]
    Downgrade,
    #[serde(rename = "upgrade")]
    Upgrade,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ChangeZoomRoomsAppVersionRequestAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ChangeZoomRoomsAppVersionRequestAction::Cancel => "cancel",
            ChangeZoomRoomsAppVersionRequestAction::Downgrade => "downgrade",
            ChangeZoomRoomsAppVersionRequestAction::Upgrade => "upgrade",
            ChangeZoomRoomsAppVersionRequestAction::Noop => "",
            ChangeZoomRoomsAppVersionRequestAction::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ChangeZoomRoomsAppVersionRequestAction {
    fn default() -> ChangeZoomRoomsAppVersionRequestAction {
        ChangeZoomRoomsAppVersionRequestAction::Noop
    }
}
impl ChangeZoomRoomsAppVersionRequestAction {
    pub fn is_noop(&self) -> bool {
        matches!(self, ChangeZoomRoomsAppVersionRequestAction::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ChangeZoomRoomsAppVersionRequest {
    /**
     * Specify one of the following values for this field:
     *  
     *  `upgrade`: Upgrade to the latest Zoom Rooms App Version.<br>
     *  `downgrade`: Downgrade the Zoom Rooms App Version.<br>
     *  `cancel`: Cancel an ongoing upgrade or downgrade process.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<ChangeZoomRoomsAppVersionRequestAction>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Contents {
    /**
     * Unique identifier of the content or the folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the content file or the folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListDigitalSignageContentResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub contents: Vec<Contents>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListWebinarTemplatesResponse {
    /**
     * Unique identifier of the template. If you would like to use this template while scheduling a webinar, you can provide the value of this field in `template_id` field of [Create a Webinar](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) API.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListWebinarTemplatesResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub templates: Vec<ListWebinarTemplatesResponse>,
    /**
     * Total number of records returned.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetWebinarLiveStreamDetailsResponse {
    /**
     * Live streaming page URL. This is the URL using which anyone can view the live stream of the webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub page_url: String,
    /**
     * Stream Key.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub stream_key: String,
    /**
     * Stream URL.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub stream_url: String,
}

/// All of the following types:
///
/// - `InviteLink`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarInviteLinksCreateRequestAllOf {
    /**
     * Invite Links
     */
    InviteLink(InviteLink),
}

/// All of the following types:
///
/// - `InviteLinks`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum WebinarInviteLinksCreateResponseAllOf {
    /**
     * Invite links response.
     */
    InviteLinks(InviteLinks),
}

/**
 * Presence status of the user. The value can be set to one of the following:<br>
 *   * `Away`
 *   * `Do_Not_Disturb`
 *   * `Available`
 *   * `In_Calendar_Event`
 *   * `Presenting`
 *   * `In_A_Zoom_Meeting`
 *   * `On_A_Call`
 *   
 *   Users who are on Zoom Client with a version **lower than 5.3.0** can update the status from:
 *   * `Away` to `Do_Not_Disturb`
 *   * `Available` to `Do_Not_Disturb`
 *   
 *   Users who are on **Zoom Client 5.3.0** or higher can update the status from:
 *   * `Do_Not_Disturb` to `Away`
 *   * `Do_Not_Disturb` to `Available`
 *   * `Available` to `Away`
 *   * `Away` to `Available`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum UpdatePresenceStatusRequest {
    #[serde(rename = "Available")]
    Available,
    #[serde(rename = "Away")]
    Away,
    #[serde(rename = "Do_No_Disturb")]
    DoNoDisturb,
    #[serde(rename = "In_A_Zoom_Meeting")]
    InAZoomMeeting,
    #[serde(rename = "In_Calendar_Event")]
    InCalendarEvent,
    #[serde(rename = "On_A_Call")]
    OnACall,
    #[serde(rename = "Presenting")]
    Presenting,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for UpdatePresenceStatusRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            UpdatePresenceStatusRequest::Available => "Available",
            UpdatePresenceStatusRequest::Away => "Away",
            UpdatePresenceStatusRequest::DoNoDisturb => "Do_No_Disturb",
            UpdatePresenceStatusRequest::InAZoomMeeting => "In_A_Zoom_Meeting",
            UpdatePresenceStatusRequest::InCalendarEvent => "In_Calendar_Event",
            UpdatePresenceStatusRequest::OnACall => "On_A_Call",
            UpdatePresenceStatusRequest::Presenting => "Presenting",
            UpdatePresenceStatusRequest::Noop => "",
            UpdatePresenceStatusRequest::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for UpdatePresenceStatusRequest {
    fn default() -> UpdatePresenceStatusRequest {
        UpdatePresenceStatusRequest::Noop
    }
}
impl UpdatePresenceStatusRequest {
    pub fn is_noop(&self) -> bool {
        matches!(self, UpdatePresenceStatusRequest::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UpdatePresenceStatusRequestData {
    /**
     * If you're updating the status to `Do_Not_Disturb`, specify a duration in minutes for which the status should remain as `Do_Not_Disturb`.
     *  
     *  The default value is 20 minutes and the maximum allowed value is 1440 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Presence status of the user. The value can be set to one of the following:<br>
     *  \* `Away`
     *  \* `Do_Not_Disturb`
     *  \* `Available`
     *  \* `In_Calendar_Event`
     *  \* `Presenting`
     *  \* `In_A_Zoom_Meeting`
     *  \* `On_A_Call`
     *  
     *  Users who are on Zoom Client with a version \*\*lower than 5.3.0\*\* can update the status from:
     *  \* `Away` to `Do_Not_Disturb`
     *  \* `Available` to `Do_Not_Disturb`
     *  
     *  Users who are on \*\*Zoom Client 5.3.0\*\* or higher can update the status from:
     *  \* `Do_Not_Disturb` to `Away`
     *  \* `Do_Not_Disturb` to `Available`
     *  \* `Available` to `Away`
     *  \* `Away` to `Available`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<UpdatePresenceStatusRequest>,
}

/// Caller object contains information of the caller.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Caller {
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub codec: String,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_private_ip: String,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_public_ip: String,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_type: String,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub headset: String,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub isp: String,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub microphone: String,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

/// Callee object contains information of the callee.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Callee {
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub codec: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_private_ip: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_public_ip: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_type: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub headset: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub isp: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub microphone: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone_number: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCallLogsMetricsResponse {
    /**
     * Unique identifier of the phone call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_id: String,
    /**
     * Callee object contains information of the callee.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub callee: Option<Callee>,
    /**
     * Caller object contains information of the caller.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub caller: Option<Caller>,
    /**
     * Date and time at which the call started.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * Direction of the call. The value of this field can be either `internal` or `outbound`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub direction: String,
    /**
     * Duration of the call in seconds.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Zoom uses Mean Opinion Score (MOS) as the main measurement to report on voice quality. MOS measures voice quality on a scale of 1 to 5. A score of 1 indicates unacceptable voice quality for all users. A score of 5 is the best voice quality.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mos: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListCallLogsMetricsResponseData {
    /**
     * Call logs.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub call_logs: Vec<ListCallLogsMetricsResponse>,
    /**
     * Start date for the report in `yyyy-mm-dd` format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub from: String,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * End date for the report in `yyyy-mm-dd` format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to: String,
    /**
     * The total number of records available across all pages.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Qos {
    /**
     * The average amount of packet loss, i.e., the percentage of packets that fail to arrive at their destination.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * The number of bits per second in kbps that can be transmitted along a digital network.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * The variation in the delay of received packets. The value of this field is expressed in milliseconds.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * The max amount of packet loss, i.e., the max percentage of packets that fail to arrive at their destination.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
    /**
     * Mean Opinion Score(MOS) measures voice quality on a scale of 1 to 5. A MOS greater than or equal to 3.5 means good quality, while below 3.5 means poor quality.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mos: String,
    /**
     * The amount of time(in milliseconds) it takes for a VoIP packet to travel from one point to another.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub network_delay: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Sending {
    /**
     * Date and time at which the QoS was delivered.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qos: Option<Qos>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQoSResponseCallerQosReceiving {
    /**
     * The average amount of packet loss. For example, the percentage of packets that fail to arrive at their destination.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * The number of bits per second, in kbps, that can be transmitted along a digital network.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * The variation in the delay of received packets, in milliseconds.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * The max amount of packet loss. For example, the maximum percentage of packets that fail to arrive at their destination.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
    /**
     * The MOS (Mean Opinion Score).
     *  
     *  MOS measures voice quality on a scale of 1 to 5. A score than or equal to 3.5 means good quality, while below 3.5 means poor quality.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mos: String,
    /**
     * The amount of time, in milliseconds, it takes for a VoIP (Voice Over IP) packet to travel from one point to another.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub network_delay: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Receiving {
    /**
     * The date and time at which the QoS was received.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qos: Option<GetCallQoSResponseCallerQosReceiving>,
}

/// Quality of Service object that represents the call quality data of the caller.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CallerQos {
    /**
     * Quality of Service object that represents the call quality data of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_private_ip: String,
    /**
     * Quality of Service object that represents the call quality data of the caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_public_ip: String,
    /**
     * Quality of Service object that represents the call quality data of the caller.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub receiving: Vec<Receiving>,
    /**
     * Quality of Service object that represents the call quality data of the caller.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sending: Vec<Sending>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQoSResponseCalleeQosSending {
    /**
     * The average amount of packet loss. For example, the percentage of packets that fail to arrive at their destination.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub avg_loss: String,
    /**
     * The number of bits per second, in kbps, that can be transmitted along a digital network.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bitrate: String,
    /**
     * The variation in the delay of received packets, in milliseconds.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub jitter: String,
    /**
     * The max amount of packet loss. For example, the max percentage of packets that fail to arrive at their destination.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub max_loss: String,
    /**
     * The MOS (Mean Opinion Score).
     *  
     *  MOS measures voice quality on a scale of 1 to 5. A score than or equal to 3.5 means good quality, while below 3.5 means poor quality.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub mos: String,
    /**
     * The amount of time, in milliseconds, it takes for a VoIP (Voice Over IP) packet to travel from one point to another.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub network_delay: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQoSResponseCalleeQosSendingData {
    /**
     * The date and time at which the QoS was delivered.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qos: Option<GetCallQoSResponseCalleeQosSending>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQoSResponseCalleeQosReceiving {
    /**
     * The date and time at which the QoS was received.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qos: Option<GetCallQoSResponseCalleeQosSending>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CalleeQos {
    /**
     * Display the device's private IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_private_ip: String,
    /**
     * Display the device's public IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_public_ip: String,
    /**
     * The QoS received by the callee.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub receiving: Vec<GetCallQoSResponseCalleeQosReceiving>,
    /**
     * The QoS sent by the callee.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sending: Vec<GetCallQoSResponseCalleeQosSendingData>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallQoSResponse {
    /**
     * Unique identifier of the phone call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_id: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub callee_qos: Option<CalleeQos>,
    /**
     * Quality of Service object that represents the call quality data of the caller.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub caller_qos: Option<CallerQos>,
}

/**
 * Question type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum CreateBatchPollsRequestQuestionsType {
    #[serde(rename = "multiple")]
    Multiple,
    #[serde(rename = "single")]
    Single,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for CreateBatchPollsRequestQuestionsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            CreateBatchPollsRequestQuestionsType::Multiple => "multiple",
            CreateBatchPollsRequestQuestionsType::Single => "single",
            CreateBatchPollsRequestQuestionsType::Noop => "",
            CreateBatchPollsRequestQuestionsType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for CreateBatchPollsRequestQuestionsType {
    fn default() -> CreateBatchPollsRequestQuestionsType {
        CreateBatchPollsRequestQuestionsType::Noop
    }
}
impl CreateBatchPollsRequestQuestionsType {
    pub fn is_noop(&self) -> bool {
        matches!(self, CreateBatchPollsRequestQuestionsType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateBatchPollsRequestQuestions {
    /**
     * Possible answers for the question.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub answers: Vec<String>,
    /**
     * Name of the question.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Question type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<CreateBatchPollsRequestQuestionsType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateBatchPollsRequest {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<CreateBatchPollsRequestQuestions>,
    /**
     * Meeting Poll Title.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
}

/**
 * Poll question and answer type.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum CreateBatchPollsResponseQuestionsType {
    #[serde(rename = "multiple")]
    Multiple,
    #[serde(rename = "single")]
    Single,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for CreateBatchPollsResponseQuestionsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            CreateBatchPollsResponseQuestionsType::Multiple => "multiple",
            CreateBatchPollsResponseQuestionsType::Single => "single",
            CreateBatchPollsResponseQuestionsType::Noop => "",
            CreateBatchPollsResponseQuestionsType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for CreateBatchPollsResponseQuestionsType {
    fn default() -> CreateBatchPollsResponseQuestionsType {
        CreateBatchPollsResponseQuestionsType::Noop
    }
}
impl CreateBatchPollsResponseQuestionsType {
    pub fn is_noop(&self) -> bool {
        matches!(self, CreateBatchPollsResponseQuestionsType::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateBatchPollsResponseQuestions {
    /**
     * Answers to questons
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub answers: Vec<String>,
    /**
     * Name of question.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Poll question and answer type.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub type_: Option<CreateBatchPollsResponseQuestionsType>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct Polls {
    /**
     * Meeting Poll ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub questions: Vec<CreateBatchPollsResponseQuestions>,
    /**
     * Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<MeetingPollCreateResponseStatus>,
    /**
     * Title for the Poll
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct CreateBatchPollsResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub polls: Vec<Polls>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ManageE911SignageResponse {
    /**
     * Unique identifier of the event related to the content being displayed. This field is only returned if you provided `zoomroom.emergency_alert_displayed` as the value of the `method` parameter.
     *  
     *  Save this response value and provide it as the value of the `event_id` request parameter when you need to remove the alert content using `zoomroom.emergency_alert_removed` method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub event_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPsOperationLogsResponse {
    /**
     * Action that was performed.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub action: String,
    /**
     * Category type of the operation.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub category_type: String,
    /**
     * Operation detail.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub operation_detail: String,
    /**
     * The user who performed the operation.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub operator: String,
    /**
     * The time at which the operation was performed.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub time: Option<chrono::DateTime<chrono::Utc>>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetPsOperationLogsResponseData {
    /**
     * Array of operation log objects
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub operation_logs: Vec<GetPsOperationLogsResponse>,
}

/// All of the following types:
///
/// - `PaginationToken4ImChat`
/// - `GetPsOperationLogsResponseData`
///
/// You can easily convert this enum to the inner value with `From` and `Into`, as both are implemented for each type.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetPsOperationLogsResponseAllOf {
    GetPsOperationLogsResponseData(GetPsOperationLogsResponseData),
    /**
     * Pagination object.
     */
    PaginationToken4ImChat(PaginationToken4ImChat),
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountBillingInvoicesResponse {
    /**
     * The remaining balance of the invoice after all payments, adjustments, and refunds are applied.
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub balance: f64,
    /**
     * The date by which the payment for this invoice is due.
     *  
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub due_date: Option<chrono::NaiveDate>,
    /**
     * Unique identifier of the invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The date when the invoice was generated.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invoice_date: Option<chrono::NaiveDate>,
    /**
     * Invoice number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub invoice_number: String,
    /**
     * Status of the invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in the invoice.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_date: Option<chrono::NaiveDate>,
    /**
     * Tax amount.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub tax_amount: f64,
    /**
     * Total invoice amount.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub total_amount: f64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AccountBillingInvoicesResponseData {
    /**
     * Currency used in the invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub currency: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub invoices: Vec<AccountBillingInvoicesResponse>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct InvoiceItems {
    /**
     * Description for the charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub charge_name: String,
    /**
     * Identifier for the charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub charge_number: String,
    /**
     * Charge type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub charge_type: String,
    /**
     * Billing end date.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<chrono::NaiveDate>,
    /**
     * Quantity.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub quantity: i64,
    /**
     * Billing start date.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<chrono::NaiveDate>,
    /**
     * Tax amount.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub tax_amount: f64,
    /**
     * Total amount.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub total_amount: f64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetAccountBillingInvoiceResponse {
    /**
     * The remaining balance of the invoice after all payments, adjustments, and refunds are applied.
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub balance: f64,
    /**
     * Billing currency.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub currency: String,
    /**
     * The date by which the payment for this invoice is due.
     *  
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub due_date: Option<chrono::NaiveDate>,
    /**
     * Unique identifier of the invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The date when the invoice was generated.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invoice_date: Option<chrono::NaiveDate>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub invoice_items: Vec<InvoiceItems>,
    /**
     * Invoice number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub invoice_number: String,
    /**
     * Status of the invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in the invoice.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_date: Option<chrono::NaiveDate>,
    /**
     * Tax amount.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub tax_amount: f64,
    /**
     * Total invoice amount.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize"
    )]
    pub total_amount: f64,
}

/**
 * Feedback submitted by the participant.
 *   
 *   * `GOOD`: Thumbs up.
 *   * `NOT GOOD`: Thumbs down.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Quality {
    #[serde(rename = "GOOD")]
    Good,
    #[serde(rename = "NOT GOOD")]
    NotGood,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Quality {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Quality::Good => "GOOD",
            Quality::NotGood => "NOT GOOD",
            Quality::Noop => "",
            Quality::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Quality {
    fn default() -> Quality {
        Quality::Noop
    }
}
impl Quality {
    pub fn is_noop(&self) -> bool {
        matches!(self, Quality::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ParticipantFeedbackResponseParticipants {
    /**
     * Date and time at which the feedback was submitted.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub date_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * Email address of the participant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Feedback submitted by the participant.
     *  
     *  \* `GOOD`: Thumbs up.
     *  \* `NOT GOOD`: Thumbs down.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quality: Option<Quality>,
    /**
     * User ID of the participant.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub user_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ParticipantFeedbackResponse {
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub participants: Vec<ParticipantFeedbackResponseParticipants>,
}

/**
 * Direction of the call: `inbound` | `outbound`
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum GetCallLogDetailsResponseDirection {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for GetCallLogDetailsResponseDirection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            GetCallLogDetailsResponseDirection::Inbound => "inbound",
            GetCallLogDetailsResponseDirection::Outbound => "outbound",
            GetCallLogDetailsResponseDirection::Noop => "",
            GetCallLogDetailsResponseDirection::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for GetCallLogDetailsResponseDirection {
    fn default() -> GetCallLogDetailsResponseDirection {
        GetCallLogDetailsResponseDirection::Noop
    }
}
impl GetCallLogDetailsResponseDirection {
    pub fn is_noop(&self) -> bool {
        matches!(self, GetCallLogDetailsResponseDirection::Noop)
    }
}

/**
 * Result of the call: `call_connected` | `recorded` | `no_answer`.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum Result {
    #[serde(rename = "call_connected")]
    CallConnected,
    #[serde(rename = "no_answer")]
    NoAnswer,
    #[serde(rename = "recorded")]
    Recorded,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for Result {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            Result::CallConnected => "call_connected",
            Result::NoAnswer => "no_answer",
            Result::Recorded => "recorded",
            Result::Noop => "",
            Result::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for Result {
    fn default() -> Result {
        Result::Noop
    }
}
impl Result {
    pub fn is_noop(&self) -> bool {
        matches!(self, Result::Noop)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallLogDetailsResponseSite {
    /**
     * Target [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) where the phone number was assigned. Sites allow you to organize the phone users in your organization. For example, you can create sites based on different office locations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the site where the phone number is assigned.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ForwardTo {
    /**
     * The extension number of the call to forward to.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension_number: String,
    /**
     * The unique identifier of the call to forward to.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * The name of the call to forward to.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * For forwarded calls, display the recipient's type: `user`, `callQueue`, `autoReceptionist`, or `sharedLineGroup`.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct LogDetails {
    /**
     * Start time of the call.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * Display the device's private IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_private_ip: String,
    /**
     * Display the device's public IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_public_ip: String,
    /**
     * Duration of the call in seconds.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forward_to: Option<ForwardTo>,
    /**
     * Call log ID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Path of the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub path: String,
    /**
     * Result of the call: `call_connected` | `recorded` | `no_answer`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<Result>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site: Option<GetCallLogDetailsResponseSite>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct GetCallLogDetailsResponse {
    /**
     * Unique identifier of the phone call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub call_id: String,
    /**
     * The type of call:
     *  \*`voip` (Voice over IP)
     *  \*`pstn` (Public Switched Telephone Network)
     *  \*`tollfree`
     *  \*`international`
     *  \*`contactCenter`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub call_type: Option<CallType>,
    /**
     * Contact name of callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_name: String,
    /**
     * Number of callee.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub callee_number: String,
    /**
     * The callee's phone number type:
     *  \* `1` — Internal number.
     *  \* `2` — External number.
     *  \* `3` — Customized emergency number.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub callee_number_type: Option<serde_json::Value>,
    /**
     * Contact name of caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_name: String,
    /**
     * Number of caller.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number: String,
    /**
     * Type of caller's number: `1` - internal | `2` - external.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub caller_number_type: String,
    /**
     * Start time of the call.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_time: Option<chrono::NaiveDate>,
    /**
     * Display the device's private IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_private_ip: String,
    /**
     * Display the device's public IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub device_public_ip: String,
    /**
     * Direction of the call: `inbound` | `outbound`
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<GetCallLogDetailsResponseDirection>,
    /**
     * Duration of the call in seconds.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * Whether the call has a recording or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_recording: bool,
    /**
     * Whether the call has voicemail or not.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub has_voicemail: bool,
    /**
     * Call Log ID
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Child records.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub log_details: Vec<LogDetails>,
    /**
     * Path of the call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub path: String,
    /**
     * Result of the call: `call_connected` | `recorded` | `no_answer`.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<Result>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddByocNumberRequest {
    /**
     * Name of the carrier.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub carrier: String,
    /**
     * Phone number(s) to be added to Zoom. The value should be in e164 format.
     */
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<String>,
    /**
     * Sip group id.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sip_group_id: String,
    /**
     * Unique identifier of the site. This field is only required if you have enabled multiple sites in the account. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) or [Adding a site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15) for details.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub site_id: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddByocNumberResponsePhoneNumbers {
    /**
     * Unique identifier of the phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Phone number in e164 format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct AddByocNumberResponse {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phone_numbers: Vec<AddByocNumberResponsePhoneNumbers>,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct UploadVBuserResponse {
    /**
     * Unique identifier of the file.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Indicate whether or not this file is the default virtual background file.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub is_default: bool,
    /**
     * File name.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * File size.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub size: String,
    /**
     * File type.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListMeetingTemplatesResponse {
    /**
     * Unique identifier of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Name of the template.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Type of the template. The value of this field can be one of the following:<br>
     *  `1`: meeting template <br>
     *  `2`: admin meeting template
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListMeetingTemplatesResponseData {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub templates: Vec<ListMeetingTemplatesResponse>,
    /**
     * Total records found for this request.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_records: i64,
}

/**
 * The query date type for the `from` and `to` parameters.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListArchivedFilesQueryDateType {
    #[serde(rename = "archive_complete_time")]
    ArchiveCompleteTime,
    #[serde(rename = "meeting_start_time")]
    MeetingStartTime,
    FallthroughString(String),
}

impl std::fmt::Display for ListArchivedFilesQueryDateType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListArchivedFilesQueryDateType::ArchiveCompleteTime => "archive_complete_time",
            ListArchivedFilesQueryDateType::MeetingStartTime => "meeting_start_time",
            ListArchivedFilesQueryDateType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListArchivedFilesQueryDateType {
    fn default() -> ListArchivedFilesQueryDateType {
        ListArchivedFilesQueryDateType::MeetingStartTime
    }
}

/**
 * The archived file's type:
 *   * `MP4` — Video file.
 *   * `M4A` — Audio-only file.
 *   * `TRANSCRIPT` — A transcript file of the recording, in VTT format.
 *   * `CHAT` — A TXT file containing chat messages that were sent during the meeting.
 *   * `CC` — A file containing the recording's closed captions, in VTT file format.
 *   * `CSV` — A file containing polling data in, in CSV format.
 *   
 *   For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
 */
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
#[serde(untagged)]
pub enum ListArchivedFilesResponseMeetingsArchiveFileType {
    #[serde(rename = "CC")]
    Cc,
    #[serde(rename = "CHAT")]
    Chat,
    #[serde(rename = "CSV")]
    Csv,
    #[serde(rename = "M4A")]
    M4A,
    #[serde(rename = "MP4")]
    Mp4,
    #[serde(rename = "TRANSCRIPT")]
    Transcript,
    #[serde(rename = "")]
    Noop,
    FallthroughString(String),
}

impl std::fmt::Display for ListArchivedFilesResponseMeetingsArchiveFileType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &*self {
            ListArchivedFilesResponseMeetingsArchiveFileType::Cc => "CC",
            ListArchivedFilesResponseMeetingsArchiveFileType::Chat => "CHAT",
            ListArchivedFilesResponseMeetingsArchiveFileType::Csv => "CSV",
            ListArchivedFilesResponseMeetingsArchiveFileType::M4A => "M4A",
            ListArchivedFilesResponseMeetingsArchiveFileType::Mp4 => "MP4",
            ListArchivedFilesResponseMeetingsArchiveFileType::Transcript => "TRANSCRIPT",
            ListArchivedFilesResponseMeetingsArchiveFileType::Noop => "",
            ListArchivedFilesResponseMeetingsArchiveFileType::FallthroughString(s) => s,
        }
        .fmt(f)
    }
}

impl Default for ListArchivedFilesResponseMeetingsArchiveFileType {
    fn default() -> ListArchivedFilesResponseMeetingsArchiveFileType {
        ListArchivedFilesResponseMeetingsArchiveFileType::Noop
    }
}
impl ListArchivedFilesResponseMeetingsArchiveFileType {
    pub fn is_noop(&self) -> bool {
        matches!(self, ListArchivedFilesResponseMeetingsArchiveFileType::Noop)
    }
}

/// Information about the archived files.
#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListArchivedFilesResponseMeetingsArchive {
    /**
     * Information about the archived files.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub download_url: String,
    /**
     * Information about the archived files.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub file_extension: String,
    /**
     * Information about the archived files.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub file_size: i64,
    /**
     * Information about the archived files.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file_type: Option<ListArchivedFilesResponseMeetingsArchiveFileType>,
    /**
     * Information about the archived files.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Information about the archived files.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recording_type: Option<RecordingType>,
    /**
     * Information about the archived files.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListArchivedFilesResponseMeetings {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub archive_files: Vec<ListArchivedFilesResponseMeetingsArchive>,
    /**
     * The duration of the meeting or webinar.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub duration: i64,
    /**
     * The ID of the user who was set as the meeting or webinar host.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub host_id: String,
    /**
     * The unique ID of the meeting (`meetingId`) or the webinar (`webinarId`).
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub id: i64,
    /**
     * The number of archive files returned in the API response.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub recording_count: i64,
    /**
     * The meeting or webinar's start time.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_time_format::deserialize"
    )]
    pub start_time: Option<chrono::DateTime<chrono::Utc>>,
    /**
     * The meeting or webinar's timezone.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timezone: String,
    /**
     * The meeting or webinar topic.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub topic: String,
    /**
     * The total size of the archive file.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub total_size: i64,
    /**
     * The meeting or webinar's type:
     *  
     *  Meeting type values:
     *  \* `1` — Instant meeting.
     *  \* `2` — Scheduled meeting.
     *  \* `3` — Recurring meeting with no fixed time.
     *  \* `8` — Recurring meeting with a fixed time.
     *  
     *  Webinar type values:
     *  
     *  \* `5` — A webinar.
     *  \* `6` — Recurring webinar with no fixed time.
     *  \* `9` — Recurring webinar with a fixed time.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "type"
    )]
    pub type_: i64,
    /**
     * The meeting or webinar's univsersally unique ID (UUID). Each meeting or webinar instance generates its own UUID.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uuid: String,
}

#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
pub struct ListArchivedFilesResponse {
    /**
     * The query start date, in `yyyy-MM-dd'T'HH:mm:ss'Z'` format. The duration for the query defined in the `from` and `to` parameters should \*\*not\*\* exceed 7 days because this API \*\*only\*\* provides one week's data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub from: String,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub meetings: Vec<ListArchivedFilesResponseMeetings>,
    /**
     * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub next_page_token: String,
    /**
     * The number of records returned within a single API call.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub page_size: i64,
    /**
     * The query end date, `yyyy-MM-dd'T'HH:mm:ss'Z'` format.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub to: String,
}
